# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `solargraph` gem.
# Please instead update this file by running `bin/tapioca gem solargraph`.


# source://solargraph//lib/solargraph/converters/dl.rb#1
module ReverseMarkdown; end

# source://solargraph//lib/solargraph/converters/dl.rb#2
module ReverseMarkdown::Converters; end

# source://solargraph//lib/solargraph/converters/dd.rb#5
class ReverseMarkdown::Converters::Dd < ::ReverseMarkdown::Converters::Base
  # @param node [Nokogiri::XML::Element]
  # @param state [Hash]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/converters/dd.rb#9
  def convert(node, state = T.unsafe(nil)); end
end

# source://solargraph//lib/solargraph/converters/dl.rb#3
class ReverseMarkdown::Converters::Dl < ::ReverseMarkdown::Converters::Base
  # @param node [Nokogiri::XML::Element]
  # @param state [Hash]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/converters/dl.rb#7
  def convert(node, state = T.unsafe(nil)); end
end

# source://solargraph//lib/solargraph/converters/dt.rb#3
class ReverseMarkdown::Converters::Dt < ::ReverseMarkdown::Converters::Base
  # @param node [Nokogiri::XML::Element]
  # @param state [Hash]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/converters/dt.rb#7
  def convert(node, state = T.unsafe(nil)); end
end

# The top-level namespace for the Solargraph code mapping, documentation,
# static analysis, and language server libraries.
#
# source://solargraph//lib/solargraph/yard_tags.rb#8
module Solargraph
  class << self
    # @param type [Symbol] The type of assertion to perform.
    # @param msg [String, nil] An optional message to log
    # @param block [Proc] A block that returns a message to log
    # @return [void]
    #
    # source://solargraph//lib/solargraph.rb#74
    def assert_or_log(type, msg = T.unsafe(nil), &block); end

    # @param type [Symbol] Type of assert.
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph.rb#59
    def asserts_on?(type); end

    # A convenience method for Solargraph::Logging.logger.
    #
    # @return [Logger]
    #
    # source://solargraph//lib/solargraph.rb#82
    def logger; end

    # A helper method that runs Bundler.with_unbundled_env or falls back to
    # Bundler.with_clean_env for earlier versions of Bundler.
    #
    # @sg-ignore dynamic call, but both functions behave the same
    #
    # @generic T
    # @return [generic<T>]
    # @yieldreturn [generic<T>]
    #
    # source://solargraph//lib/solargraph.rb#93
    def with_clean_env(&block); end
  end
end

# An aggregate provider for information about Workspaces, Sources, gems, and
# the Ruby core.
#
# source://solargraph//lib/solargraph/api_map.rb#11
class Solargraph::ApiMap
  include ::Solargraph::Logging
  extend ::Solargraph::Logging

  # @param pins [Array<Solargraph::Pin::Base>]
  # @return [ApiMap] a new instance of ApiMap
  #
  # source://solargraph//lib/solargraph/api_map.rb#27
  def initialize(pins: T.unsafe(nil)); end

  # @param other [Object]
  #
  # source://solargraph//lib/solargraph/api_map.rb#46
  def ==(other); end

  # True if the specified file was included in a bundle, i.e., it's either
  # included in a workspace or open in a library.
  #
  # @param filename [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#618
  def bundled?(filename); end

  # @param out [IO, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map.rb#195
  def cache_all!(out); end

  # @param gemspec [Gem::Specification]
  # @param rebuild [Boolean]
  # @param out [IO, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map.rb#203
  def cache_gem(gemspec, rebuild: T.unsafe(nil), out: T.unsafe(nil)); end

  # Catalog a bench.
  #
  # @param bench [Bench]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/api_map.rb#90
  def catalog(bench); end

  # @param cursor [Source::Cursor]
  # @raise [FileNotFoundError] if the cursor's file is not in the ApiMap
  # @return [SourceMap::Clip]
  #
  # source://solargraph//lib/solargraph/api_map.rb#585
  def clip(cursor); end

  # Get a clip by filename and position.
  #
  # @param filename [String]
  # @param position [Position, Array(Integer, Integer)]
  # @return [SourceMap::Clip]
  #
  # source://solargraph//lib/solargraph/api_map.rb#174
  def clip_at(filename, position); end

  # @return [Environ]
  #
  # source://solargraph//lib/solargraph/api_map.rb#156
  def conventions_environ; end

  # @return [Enumerable<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#140
  def core_pins; end

  # @param filename [String]
  # @param position [Position, Array(Integer, Integer)]
  # @raise [FileNotFoundError]
  # @return [Source::Cursor]
  #
  # source://solargraph//lib/solargraph/api_map.rb#163
  def cursor_at(filename, position); end

  # Get a fully qualified namespace from a reference pin.
  #
  # @param pin [Pin::Reference]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map.rb#304
  def dereference(pin); end

  # @return [DocMap]
  #
  # source://solargraph//lib/solargraph/api_map.rb#120
  def doc_map; end

  # @deprecated This method is likely superfluous. Calling #get_path_pins
  #   directly should be sufficient.
  # @param path [String] The path to find
  # @return [Enumerable<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#560
  def document(path); end

  # Get an array of document symbols from a file.
  #
  # @param filename [String]
  # @return [Array<Pin::Symbol>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#595
  def document_symbols(filename); end

  # @param other [Object]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#40
  def eql?(other); end

  # @return [Enumerable<Solargraph::Pin::Block>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#363
  def get_block_pins; end

  # Get an array of class variable pins for a namespace.
  #
  # @param namespace [String] A fully qualified namespace
  # @return [Enumerable<Solargraph::Pin::ClassVariable>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#348
  def get_class_variable_pins(namespace); end

  # Get an array of method pins for a complex type.
  #
  # The type's namespace and the context should be fully qualified. If the
  # context matches the namespace type or is a subclass of the type,
  # protected methods are included in the results. If protected methods are
  # included and internal is true, private methods are also included.
  #
  # @example
  #   api_map = Solargraph::ApiMap.new
  #   type = Solargraph::ComplexType.parse('String')
  #   api_map.get_complex_type_methods(type)
  # @param complex_type [Solargraph::ComplexType] The complex type of the namespace
  # @param context [String] The context from which the type is referenced
  # @param internal [Boolean] True to include private methods
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#465
  def get_complex_type_methods(complex_type, context = T.unsafe(nil), internal = T.unsafe(nil)); end

  # Get suggestions for constants in the specified namespace. The result
  # may contain both constant and namespace pins.
  #
  # @param namespace [String] The namespace
  # @param contexts [Array<String>] The contexts
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#263
  def get_constants(namespace, *contexts); end

  # @param fqns [String]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#310
  def get_extends(fqns); end

  # @return [Enumerable<Solargraph::Pin::GlobalVariable>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#358
  def get_global_variable_pins; end

  # @param fqns [String]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#316
  def get_includes(fqns); end

  # Get an array of instance variable pins defined in specified namespace
  # and scope.
  #
  # @param namespace [String] A fully qualified namespace
  # @param scope [Symbol] :instance or :class
  # @return [Array<Solargraph::Pin::InstanceVariable>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#326
  def get_instance_variable_pins(namespace, scope = T.unsafe(nil)); end

  # Get a stack of method pins for a method name in a potentially
  # parameterized namespace. The order of the pins corresponds to
  # the ancestry chain, with highest precedence first.
  #
  # @example
  #   api_map.get_method_stack('Subclass', 'method_name')
  #   #=> [ <Subclass#method_name pin>, <Superclass#method_name pin> ]
  # @param rooted_tag [String] Parameterized namespace, fully qualified
  # @param name [String] Method name to look up
  # @param scope [Symbol] :instance or :class
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param preserve_generics [Boolean]
  # @return [Array<Solargraph::Pin::Method>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#504
  def get_method_stack(rooted_tag, name, scope: T.unsafe(nil), visibility: T.unsafe(nil), preserve_generics: T.unsafe(nil)); end

  # Get an array of methods available in a particular context.
  #
  # @param rooted_tag [String] The fully qualified namespace to search for methods
  # @param scope [Symbol] :class or :instance
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param deep [Boolean] True to include superclasses, mixins, etc.
  # @return [Array<Solargraph::Pin::Method>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#374
  def get_methods(rooted_tag, scope: T.unsafe(nil), visibility: T.unsafe(nil), deep: T.unsafe(nil)); end

  # @param namespace [String]
  # @param context [String]
  # @return [Array<Pin::Namespace>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#277
  def get_namespace_pins(namespace, context); end

  # Get an array of pins that match the specified path.
  #
  # @param path [String]
  # @return [Enumerable<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#538
  def get_path_pins(path); end

  # Get an array of all suggestions that match the specified path.
  #
  # @deprecated Use #get_path_pins instead.
  # @param path [String] The path to find
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#529
  def get_path_suggestions(path); end

  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#353
  def get_symbols; end

  # source://solargraph//lib/solargraph/api_map.rb#50
  def hash; end

  # @param pins [Array<Pin::Base>]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/api_map.rb#65
  def index(pins); end

  # @param fq_reference_tag [String] A fully qualified whose method should be pulled in
  # @param namespace_pin [Pin::Base] Namespace pin for the rooted_type
  #   parameter - used to pull generics information
  # @param type [ComplexType] The type which is having its
  #   methods supplemented from fq_reference_tag
  # @param scope [Symbol] :class or :instance
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param deep [Boolean]
  # @param skip [Set<String>]
  # @param no_core [Boolean] Skip core classes if true
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#684
  def inner_get_methods_from_reference(fq_reference_tag, namespace_pin, type, scope, visibility, deep, skip, no_core); end

  # avoid enormous dump
  #
  # source://solargraph//lib/solargraph/api_map.rb#59
  def inspect; end

  # An array of pins based on Ruby keywords (`if`, `end`, etc.).
  #
  # @return [Enumerable<Solargraph::Pin::Keyword>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#237
  def keyword_pins; end

  # @param location [Solargraph::Location]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#577
  def locate_pins(location); end

  # Map a single source.
  #
  # @param source [Source]
  # @param live [Boolean] True for live source map (active editor file)
  # @return [self]
  #
  # source://solargraph//lib/solargraph/api_map.rb#80
  def map(source, live: T.unsafe(nil)); end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#24
  def missing_docs; end

  # @param name [String]
  # @return [YARD::Tags::MacroDirective, nil]
  #
  # source://solargraph//lib/solargraph/api_map.rb#146
  def named_macro(name); end

  # True if the namespace exists.
  #
  # @param name [String] The namespace to match
  # @param context [String] The context to search
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#253
  def namespace_exists?(name, context = T.unsafe(nil)); end

  # An array of namespace names defined in the ApiMap.
  #
  # @return [Set<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#244
  def namespaces; end

  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#230
  def pins; end

  # Determine fully qualified tag for a given tag used inside the
  # definition of another tag ("context"). This method will start
  # the search in the specified context until it finds a match for
  # the tag.
  #
  # Does not recurse into qualifying the type parameters, but
  # returns any which were passed in unchanged.
  #
  # @param tag [String, nil] The namespace to
  #   match, complete with generic parameters set to appropriate
  #   values if available
  # @param context_tag [String] The fully qualified context in which
  #   the tag was referenced; start from here to resolve the name.
  #   Should not be prefixed with '::'.
  # @return [String, nil] fully qualified tag
  #
  # source://solargraph//lib/solargraph/api_map.rb#296
  def qualify(tag, context_tag = T.unsafe(nil)); end

  # Get an array of all symbols in the workspace that match the query.
  #
  # @param query [String]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#568
  def query_symbols(query); end

  # @return [Set<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#151
  def required; end

  # @param pins [Enumerable<Pin::Base>]
  # @param visibility [Enumerable<Symbol>]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#662
  def resolve_method_aliases(pins, visibility = T.unsafe(nil)); end

  # Get a list of documented paths that match the query.
  #
  # @example
  #   api_map.query('str') # Results will include `String` and `Struct`
  # @param query [String] The text to match
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#549
  def search(query); end

  # Get a source map by filename.
  #
  # @param filename [String]
  # @raise [FileNotFoundError]
  # @return [SourceMap]
  #
  # source://solargraph//lib/solargraph/api_map.rb#609
  def source_map(filename); end

  # @return [Array<SourceMap>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#601
  def source_maps; end

  # Check if a class is a superclass of another class.
  #
  # @param sup [String] The superclass
  # @param sub [String] The subclass
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#627
  def super_and_sub?(sup, sub); end

  # source://solargraph//lib/solargraph/api_map.rb#54
  def to_s; end

  # Check if the host class includes the specified module, ignoring
  # type parameters used.
  #
  # @param host_ns [String] The class namesapce (no type parameters)
  # @param module_ns [String] The module namespace (no type parameters)
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#655
  def type_include?(host_ns, module_ns); end

  # @return [::Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#125
  def uncached_gemspecs; end

  # @return [::Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#130
  def uncached_rbs_collection_gemspecs; end

  # @return [::Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#135
  def uncached_yard_gemspecs; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#19
  def unresolved_requires; end

  # @sg-ignore Missing @return tag for Solargraph::ApiMap#visible_pins
  #
  # @see Solargraph::Parser::FlowSensitiveTyping#visible_pins
  #
  # source://solargraph//lib/solargraph/api_map.rb#340
  def visible_pins(*args, **kwargs, &blk); end

  protected

  # @sg-ignore
  #
  # @todo need to model type def statement in chains as a symbol so
  #   that this overload of 'protected' will typecheck @sg-ignore
  #
  # source://solargraph//lib/solargraph/api_map.rb#115
  def equality_fields; end

  private

  # @return [Solargraph::ApiMap::Cache]
  #
  # source://solargraph//lib/solargraph/api_map.rb#721
  def cache; end

  # @param namespace_pin [Pin::Namespace]
  # @param rooted_type [ComplexType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#947
  def can_resolve_generics?(namespace_pin, rooted_type); end

  # Fast path for creating resolved alias pins without individual method stack lookups
  #
  # @param alias_pin [Pin::MethodAlias] The alias pin to resolve
  # @param original [Pin::Method] The original method pin that was already found
  # @return [Pin::Method] The resolved method pin
  #
  # source://solargraph//lib/solargraph/api_map.rb#887
  def create_resolved_alias_pin(alias_pin, original); end

  # @param namespace_pin [Pin::Namespace]
  # @param rooted_type [ComplexType]
  # @param pins [Enumerable<Pin::Base>]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#925
  def erase_generics(namespace_pin, rooted_type, pins); end

  # Get the namespace's type (Class or Module).
  #
  # @param fqns [String] A fully qualified namespace
  # @return [Symbol, nil] :class, :module, or nil
  #
  # source://solargraph//lib/solargraph/api_map.rb#822
  def get_namespace_type(fqns); end

  # @param namespace_pin [Pin::Namespace, Pin::Constant]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#941
  def has_generics?(namespace_pin); end

  # @param rooted_tag [String] A fully qualified namespace, with
  #   generic parameter values if applicable
  # @param scope [Symbol] :class or :instance
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param deep [Boolean]
  # @param skip [Set<String>]
  # @param no_core [Boolean] Skip core classes if true
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#732
  def inner_get_methods(rooted_tag, scope, visibility, deep, skip, no_core = T.unsafe(nil)); end

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/api_map.rb#808
  def path_macros; end

  # Sort an array of pins to put nil or undefined variables last.
  #
  # @param pins [Enumerable<Pin::BaseVariable>]
  # @return [Enumerable<Pin::BaseVariable>]
  #
  # source://solargraph//lib/solargraph/api_map.rb#834
  def prefer_non_nil_variables(pins); end

  # @param fq_sub_tag [String]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map.rb#814
  def qualify_superclass(fq_sub_tag); end

  # @param alias_pin [Pin::MethodAlias]
  # @return [Pin::Method, nil]
  #
  # source://solargraph//lib/solargraph/api_map.rb#853
  def resolve_method_alias(alias_pin); end

  # @param namespace_pin [Pin::Namespace]
  # @param rooted_type [ComplexType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map.rb#936
  def should_erase_generics_when_done?(namespace_pin, rooted_type); end

  # A hash of source maps with filename keys.
  #
  # @return [Hash{String => SourceMap}]
  #
  # source://solargraph//lib/solargraph/api_map.rb#713
  def source_map_hash; end

  # @return [ApiMap::Store]
  #
  # source://solargraph//lib/solargraph/api_map.rb#716
  def store; end

  class << self
    # Create an ApiMap with a workspace in the specified directory.
    #
    # @param directory [String]
    # @return [ApiMap]
    #
    # source://solargraph//lib/solargraph/api_map.rb#183
    def load(directory); end

    # Create an ApiMap with a workspace in the specified directory and cache
    # any missing gems.
    #
    # @param directory [String]
    # @param out [IO] The output stream for messages
    # @return [ApiMap]
    #
    # source://solargraph//lib/solargraph/api_map.rb#218
    def load_with_cache(directory, out); end
  end
end

# source://solargraph//lib/solargraph/api_map/cache.rb#5
class Solargraph::ApiMap::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#6
  def initialize; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#91
  def clear; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#98
  def empty?; end

  # @param namespace [String]
  # @param contexts [Array<String>]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#50
  def get_constants(namespace, contexts); end

  # @param fqns [String]
  # @param scope [Symbol]
  # @param visibility [Array<Symbol>]
  # @param deep [Boolean]
  # @return [Array<Pin::Method>]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#33
  def get_methods(fqns, scope, visibility, deep); end

  # @param name [String]
  # @param context [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#65
  def get_qualified_namespace(name, context); end

  # @param path [String]
  # @return [Pin::Method]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#79
  def get_receiver_definition(path); end

  # avoid enormous dump
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#24
  def inspect; end

  # @param namespace [String]
  # @param contexts [Array<String>]
  # @param value [Array<Pin::Base>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#58
  def set_constants(namespace, contexts, value); end

  # @param fqns [String]
  # @param scope [Symbol]
  # @param visibility [Array<Symbol>]
  # @param deep [Boolean]
  # @param value [Array<Pin::Method>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#43
  def set_methods(fqns, scope, visibility, deep, value); end

  # @param name [String]
  # @param context [String]
  # @param value [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#73
  def set_qualified_namespace(name, context, value); end

  # @param path [String]
  # @param pin [Pin::Method]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#86
  def set_receiver_definition(path, pin); end

  # source://solargraph//lib/solargraph/api_map/cache.rb#19
  def to_s; end

  private

  # @return [Array<Object>]
  #
  # source://solargraph//lib/solargraph/api_map/cache.rb#105
  def all_caches; end
end

# Methods for handling constants.
#
# source://solargraph//lib/solargraph/api_map/constants.rb#7
class Solargraph::ApiMap::Constants
  # @param store [Store]
  # @return [Constants] a new instance of Constants
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#9
  def initialize(store); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#75
  def clear; end

  # Collect a list of all constants defined in the specified gates.
  #
  # @param gates [Array<Array<String>, String>]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#38
  def collect(*gates); end

  # Get a fully qualified namespace from a reference pin.
  #
  # @param pin [Pin::Reference]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#30
  def dereference(pin); end

  # Determine fully qualified tag for a given tag used inside the
  # definition of another tag ("context"). This method will start
  # the search in the specified context until it finds a match for
  # the tag.
  #
  # Does not recurse into qualifying the type parameters, but
  # returns any which were passed in unchanged.
  #
  # @param tag [String, nil] The namespace to
  #   match, complete with generic parameters set to appropriate
  #   values if available
  # @param context_tag [String] The fully qualified context in which
  #   the tag was referenced; start from here to resolve the name.
  #   Should not be prefixed with '::'.
  # @return [String, nil] fully qualified tag
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#58
  def qualify(tag, context_tag = T.unsafe(nil)); end

  # Resolve a name to a fully qualified namespace or constant.
  #
  # @param name [String]
  # @param gates [Array<Array<String>, String>]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#18
  def resolve(name, *gates); end

  private

  # @return [Hash{Array<String> => Array<Pin::Base>}]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#130
  def cached_collect; end

  # @return [Hash{Array(Name, Array<String>) => String, nil}]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#125
  def cached_resolve; end

  # @param gates [Array<String>]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#117
  def collect_and_cache(gates); end

  # @param fqns [String]
  # @param visibility [Array<Symbol>]
  # @param skip [Set<String>]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#195
  def inner_get_constants(fqns, visibility, skip); end

  # @param name [String] Namespace to fully qualify
  # @param root [String] The context to search
  # @param skip [Set<String>] Contexts already searched
  # @return [String, nil] Fully qualified ("rooted") namespace
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#156
  def inner_qualify(name, root, skip); end

  # Determine fully qualified namespace for a given namespace used
  # inside the definition of another tag ("context"). This method
  # will start the search in the specified context until it finds a
  # match for the namespace.
  #
  # @param namespace [String, nil] The namespace to
  #   match
  # @param context_namespace [String] The context namespace in which the
  #   tag was referenced; start from here to resolve the name
  # @return [String, nil] fully qualified namespace
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#144
  def qualify_namespace(namespace, context_namespace = T.unsafe(nil)); end

  # @param name [String]
  # @param gates [Array<String>]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#87
  def resolve_and_cache(name, gates); end

  # @param name [String]
  # @param gates [Array<String>]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#94
  def resolve_uncached(name, gates); end

  # @param name [String]
  # @param gates [Array<String>]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#107
  def simple_resolve(name, gates); end

  # @return [Store]
  #
  # source://solargraph//lib/solargraph/api_map/constants.rb#82
  def store; end
end

# source://solargraph//lib/solargraph/api_map/index.rb#5
class Solargraph::ApiMap::Index
  include ::Solargraph::Logging

  # @param pins [Array<Pin::Base>]
  # @return [Index] a new instance of Index
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#9
  def initialize(pins = T.unsafe(nil)); end

  # @return [Hash{String => Array<String>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#57
  def extend_references; end

  # @return [Hash{String => Array<Pin::Reference::Include>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#52
  def include_reference_pins; end

  # @return [Hash{String => Array<String>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#47
  def include_references; end

  # @param pins [Enumerable<Pin::Base>]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#73
  def merge(pins); end

  # @return [Hash{String => Array<Pin::Namespace>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#22
  def namespace_hash; end

  # @return [Set<String>]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#19
  def namespaces; end

  # @return [Hash{String => Array<Pin::Base>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#32
  def path_pin_hash; end

  # @return [Hash{String => Array<Pin::Base>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#27
  def pin_class_hash; end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#14
  def pins; end

  # @generic T
  # @param klass [Class<generic<T>>]
  # @return [Set<generic<T>>]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#39
  def pins_by_class(klass); end

  # @return [Hash{String => Array<String>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#62
  def prepend_references; end

  # @return [Hash{String => Array<String>}]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#67
  def superclass_references; end

  protected

  # @param new_pins [Enumerable<Pin::Base>]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#99
  def catalog(new_pins); end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#83
  def deep_clone; end

  # Sets the attribute extend_references
  #
  # @param value the value to set the attribute extend_references to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def extend_references=(_arg0); end

  # Sets the attribute include_references
  #
  # @param value the value to set the attribute include_references to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def include_references=(_arg0); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#129
  def map_overrides; end

  # @param klass [Class<Pin::Reference>]
  # @param hash [Hash{String => Array<Pin::Reference>}]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#122
  def map_references(klass, hash); end

  # Sets the attribute namespace_hash
  #
  # @param value the value to set the attribute namespace_hash to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def namespace_hash=(_arg0); end

  # Sets the attribute path_pin_hash
  #
  # @param value the value to set the attribute path_pin_hash to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def path_pin_hash=(_arg0); end

  # Sets the attribute pin_class_hash
  #
  # @param value the value to set the attribute pin_class_hash to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def pin_class_hash=(_arg0); end

  # Sets the attribute pin_select_cache
  #
  # @param value the value to set the attribute pin_select_cache to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def pin_select_cache=(_arg0); end

  # Sets the attribute pins
  #
  # @param value the value to set the attribute pins to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def pins=(_arg0); end

  # Sets the attribute prepend_references
  #
  # @param value the value to set the attribute prepend_references to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def prepend_references=(_arg0); end

  # @param pin [Pin::Method]
  # @param tag [YARD::Tags::Tag]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#157
  def redefine_return_type(pin, tag); end

  # Sets the attribute superclass_references
  #
  # @param value the value to set the attribute superclass_references to.
  #
  # source://solargraph//lib/solargraph/api_map/index.rb#79
  def superclass_references=(_arg0); end
end

# source://solargraph//lib/solargraph/api_map/source_to_yard.rb#5
module Solargraph::ApiMap::SourceToYard
  # Get the YARD CodeObject at the specified path.
  #
  # @generic T
  # @param path [String]
  # @param klass [Class<generic<T>>]
  # @return [generic<T>, nil]
  #
  # source://solargraph//lib/solargraph/api_map/source_to_yard.rb#13
  def code_object_at(path, klass = T.unsafe(nil)); end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map/source_to_yard.rb#19
  def code_object_paths; end

  # @param store [ApiMap::Store] ApiMap pin store
  # @return [void]
  #
  # source://solargraph//lib/solargraph/api_map/source_to_yard.rb#25
  def rake_yard(store); end

  private

  # @return [Hash{String => YARD::CodeObjects::Base}]
  #
  # source://solargraph//lib/solargraph/api_map/source_to_yard.rb#84
  def code_object_map; end

  # @return [YARD::CodeObjects::RootObject]
  #
  # source://solargraph//lib/solargraph/api_map/source_to_yard.rb#89
  def root_code_object; end
end

# Queryable collection of Pins representing a Workspace, gems and the Ruby
# core.
#
# source://solargraph//lib/solargraph/api_map/store.rb#8
class Solargraph::ApiMap::Store
  # @param pinsets [Array<Enumerable<Pin::Base>>]
  # @return [Store] a new instance of Store
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#10
  def initialize(*pinsets); end

  # @return [Enumerable<Pin::Block>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#193
  def block_pins; end

  # @return [Constants]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#259
  def constants; end

  # @param fqns [String]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#170
  def domains(fqns); end

  # @param fqns [String]
  # @return [Array<Solargraph::Pin::Namespace>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#206
  def fqns_pins(fqns); end

  # Get all ancestors (superclasses, includes, prepends, extends) for a namespace
  #
  # @param fqns [String] The fully qualified namespace
  # @return [Array<String>] Array of ancestor namespaces including the original
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#222
  def get_ancestors(fqns); end

  # @param fqns [String]
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#138
  def get_class_variables(fqns); end

  # @param fqns [String]
  # @param visibility [Array<Symbol>]
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#61
  def get_constants(fqns, visibility = T.unsafe(nil)); end

  # @param fqns [String]
  # @return [Array<Pin::Reference::Extend>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#117
  def get_extends(fqns); end

  # @param fqns [String]
  # @return [Array<Pin::Reference::Include>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#105
  def get_includes(fqns); end

  # @param fqns [String]
  # @param scope [Symbol] :class or :instance
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#130
  def get_instance_variables(fqns, scope = T.unsafe(nil)); end

  # @param fqns [String]
  # @param scope [Symbol]
  # @param visibility [Array<Symbol>]
  # @return [Enumerable<Solargraph::Pin::Method>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#71
  def get_methods(fqns, scope: T.unsafe(nil), visibility: T.unsafe(nil)); end

  # @param path [String]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#123
  def get_path_pins(path); end

  # @param fqns [String]
  # @return [Array<Pin::Reference::Prepend>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#111
  def get_prepends(fqns); end

  # @param fqns [String]
  # @return [Pin::Reference::Superclass]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#83
  def get_superclass(fqns); end

  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#143
  def get_symbols; end

  # source://solargraph//lib/solargraph/api_map/store.rb#54
  def inspect; end

  # @return [Enumerable<Solargraph::Pin::Method>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#164
  def method_pins; end

  # @return [Hash{String => YARD::Tags::MacroDirective}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#179
  def named_macros; end

  # @param fqns [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#149
  def namespace_exists?(fqns); end

  # @return [Enumerable<Solargraph::Pin::Namespace>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#159
  def namespace_pins; end

  # @return [Set<String>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#154
  def namespaces; end

  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#16
  def pins; end

  # @generic T
  # @param klass [Class<generic<T>>]
  # @return [Set<generic<T>>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#200
  def pins_by_class(klass); end

  # @param fq_sub_tag [String]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#92
  def qualify_superclass(fq_sub_tag); end

  # source://solargraph//lib/solargraph/api_map/store.rb#50
  def to_s; end

  # @param pinsets [Array<Enumerable<Pin::Base>>] - pinsets[0] = core Ruby pins
  #   - pinsets[1] = documentation/gem pins
  #   - pinsets[2] = convention pins
  #   - pinsets[3] = workspace source pins
  #   - pinsets[4] = currently open file pins
  # @return [Boolean] True if the index was updated
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#27
  def update(*pinsets); end

  private

  # @return [Enumerable<Pin::InstanceVariable>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#334
  def all_instance_variables; end

  # @return [Hash{String => String, nil}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#357
  def cached_qualify_superclass; end

  # @param pinsets [Array<Enumerable<Pin::Base>>]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#272
  def catalog(pinsets); end

  # @return [Hash{String => Array<Pin::Reference::Extend>}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#322
  def extend_references; end

  # @return [Hash{::Array(String, String) => ::Array<Pin::Namespace>}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#289
  def fqns_pins_map; end

  # @return [Hash{String => Array<Solargraph::Pin::Reference::Include>}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#312
  def include_reference_pins; end

  # @return [Hash{String => Array<Pin::Reference::Include>}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#307
  def include_references; end

  # @return [Index]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#266
  def index; end

  # @param name [String]
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#328
  def namespace_children(name); end

  # @return [Hash{String => Array<Pin::Reference::Prepend>}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#317
  def prepend_references; end

  # @param fq_sub_tag [String]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#352
  def qualify_and_cache_superclass(fq_sub_tag); end

  # @return [Hash{String => Array<String>}]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#302
  def superclass_references; end

  # @return [Enumerable<Solargraph::Pin::Symbol>]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#297
  def symbols; end

  # @param fqns [String]
  # @return [Pin::Reference::Superclass, nil]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#340
  def try_special_superclasses(fqns); end

  # @param fq_sub_tag [String]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/api_map/store.rb#363
  def uncached_qualify_superclass(fq_sub_tag); end
end

# source://solargraph//lib/solargraph/api_map/store.rb#78
Solargraph::ApiMap::Store::BOOLEAN_SUPERCLASS_PIN = T.let(T.unsafe(nil), Solargraph::Pin::Reference::Superclass)

# source://solargraph//lib/solargraph/api_map/store.rb#79
Solargraph::ApiMap::Store::OBJECT_SUPERCLASS_PIN = T.let(T.unsafe(nil), Solargraph::Pin::Reference::Superclass)

# A container of source maps and workspace data to be cataloged in an ApiMap.
#
# source://solargraph//lib/solargraph/bench.rb#7
class Solargraph::Bench
  # @param source_maps [Array<SourceMap>, Set<SourceMap>]
  # @param workspace [Workspace]
  # @param live_map [SourceMap, nil]
  # @param external_requires [Array<String>, Set<String>]
  # @return [Bench] a new instance of Bench
  #
  # source://solargraph//lib/solargraph/bench.rb#24
  def initialize(source_maps: T.unsafe(nil), workspace: T.unsafe(nil), live_map: T.unsafe(nil), external_requires: T.unsafe(nil)); end

  # @return [Set<String>]
  #
  # source://solargraph//lib/solargraph/bench.rb#18
  def external_requires; end

  # @return [Set<SourceMap>]
  #
  # source://solargraph//lib/solargraph/bench.rb#41
  def icebox; end

  # @return [SourceMap]
  #
  # source://solargraph//lib/solargraph/bench.rb#15
  def live_map; end

  # @return [Hash{String => SourceMap}]
  #
  # source://solargraph//lib/solargraph/bench.rb#34
  def source_map_hash; end

  # @return [Set<SourceMap>]
  #
  # source://solargraph//lib/solargraph/bench.rb#9
  def source_maps; end

  # @return [Workspace]
  #
  # source://solargraph//lib/solargraph/bench.rb#12
  def workspace; end
end

# source://solargraph//lib/solargraph.rb#21
class Solargraph::BundleNotFoundError < ::StandardError; end

# source://solargraph//lib/solargraph.rb#56
Solargraph::CHDIR_MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# A container for type data based on YARD type tags.
#
# source://solargraph//lib/solargraph/complex_type.rb#6
class Solargraph::ComplexType
  include ::Solargraph::Equality

  # @param types [Array<UniqueType, ComplexType>]
  # @return [ComplexType] a new instance of ComplexType
  #
  # source://solargraph//lib/solargraph/complex_type.rb#16
  def initialize(types = T.unsafe(nil)); end

  # @param index [Integer]
  # @return [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#120
  def [](index); end

  # @return [Boolean]
  # @yieldparam [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#188
  def all?(&block); end

  # @return [Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#241
  def all_params; end

  # every type and subtype in this union have been resolved to be
  # fully qualified
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#257
  def all_rooted?; end

  # @return [Boolean]
  # @yieldparam [UniqueType]
  # @yieldreturn [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#195
  def any?(&block); end

  # @param atype [ComplexType] type which may be assigned to this type
  # @param api_map [ApiMap] The ApiMap that performs qualification
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#104
  def can_assign?(api_map, atype); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#178
  def desc; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#173
  def downcast_to_literal_if_possible; end

  # @return [Enumerable<UniqueType>]
  # @yieldparam [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#86
  def each(&block); end

  # @overload each_unique_type
  # @return [void]
  # @yieldparam [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#94
  def each_unique_type(&block); end

  # @return [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#57
  def first; end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#222
  def force_rooted; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#203
  def generic?; end

  # Returns the value of attribute items.
  #
  # source://solargraph//lib/solargraph/complex_type.rb#267
  def items; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#109
  def length; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#168
  def literal?; end

  # @return [Array<UniqueType>]
  # @yieldparam [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#80
  def map(&block); end

  # @param name [Symbol]
  # @return [Object, nil]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#142
  def method_missing(name, *args, &block); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#130
  def namespace; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#136
  def namespaces; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#236
  def nullable?; end

  # @param api_map [ApiMap]
  # @param context [String]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#36
  def qualify(api_map, context = T.unsafe(nil)); end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#246
  def reduce_class_type; end

  # @param definitions [Pin::Namespace, Pin::Method]
  # @param context_type [ComplexType]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#231
  def resolve_generics(definitions, context_type); end

  # @param generics_to_resolve [Enumerable<String>] ]
  # @param context_type [UniqueType, nil]
  # @param resolved_generic_values [Hash{String => ComplexType}] Added to as types are encountered or resolved
  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#50
  def resolve_generics_from_context(generics_to_resolve, context_type, resolved_generic_values: T.unsafe(nil)); end

  # every top-level type has resolved to be fully qualified; see
  # #all_rooted? to check their subtypes as well
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#263
  def rooted?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#183
  def rooted_tags; end

  # @return [Array<UniqueType>]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#125
  def select(&block); end

  # @param dst [ComplexType]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#70
  def self_to_type(dst); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#199
  def selfy?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#164
  def simple_tags; end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#208
  def simplify_literals; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#159
  def tags; end

  # @return [Array<UniqueType>]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#114
  def to_a; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#62
  def to_rbs; end

  # source://solargraph//lib/solargraph/complex_type.rb#154
  def to_s; end

  # @param new_name [String, nil]
  # @return [ComplexType]
  # @yieldparam t [UniqueType]
  # @yieldreturn [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#216
  def transform(new_name = T.unsafe(nil), &transform_type); end

  protected

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#284
  def bottom?; end

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/complex_type.rb#29
  def equality_fields; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#276
  def reduce_object; end

  private

  # @param dst [String]
  # @return [String]
  # @todo This is a quick and dirty hack that forces `self` keywords
  #   to reference an instance of their class and never the class itself.
  #   This behavior may change depending on which result is expected
  #   from YARD conventions. See https://github.com/lsegal/yard/issues/1257
  #
  # source://solargraph//lib/solargraph/complex_type.rb#420
  def reduce_class(dst); end

  # @param name [Symbol]
  # @param include_private [Boolean]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type.rb#150
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # Parse type strings into a ComplexType.
    #
    # # @overload parse(*strings, partial: false)
    # #  @todo Need ability to use a literal true as a type below
    # #  @param partial [Boolean] True if the string is part of a another type
    # #  @return [Array<UniqueType>]
    #
    # @example
    #   ComplexType.parse 'String', 'Foo', 'nil' #=> [String, Foo, nil]
    # @note The `partial` parameter is used to indicate that the method is
    #   receiving a string that will be used inside another ComplexType.
    #   It returns arrays of ComplexTypes instead of a single cohesive one.
    #   Consumers should not need to use this parameter; it should only be
    #   used internally.
    # @param strings [Array<String>] The type definitions to parse
    # @return [ComplexType]
    # @todo To be able to select the right signature above,
    #   Chain::Call needs to know the decl type (:arg, :optarg,
    #   :kwarg, etc) of the arguments given, instead of just having
    #   an array of Chains as the arguments.
    #
    # source://solargraph//lib/solargraph/complex_type.rb#311
    def parse(*strings, partial: T.unsafe(nil)); end

    # @param strings [Array<String>]
    # @return [ComplexType]
    #
    # source://solargraph//lib/solargraph/complex_type.rb#395
    def try_parse(*strings); end
  end
end

# source://solargraph//lib/solargraph/complex_type.rb#409
Solargraph::ComplexType::BOOLEAN = T.let(T.unsafe(nil), Solargraph::ComplexType)

# source://solargraph//lib/solargraph/complex_type.rb#410
Solargraph::ComplexType::BOT = T.let(T.unsafe(nil), Solargraph::ComplexType)

# source://solargraph//lib/solargraph/complex_type.rb#7
Solargraph::ComplexType::GENERIC_TAG_NAME = T.let(T.unsafe(nil), String)

# source://solargraph//lib/solargraph/complex_type.rb#407
Solargraph::ComplexType::NIL = T.let(T.unsafe(nil), Solargraph::ComplexType)

# source://solargraph//lib/solargraph/complex_type.rb#406
Solargraph::ComplexType::ROOT = T.let(T.unsafe(nil), Solargraph::ComplexType)

# source://solargraph//lib/solargraph/complex_type.rb#408
Solargraph::ComplexType::SELF = T.let(T.unsafe(nil), Solargraph::ComplexType)

# source://solargraph//lib/solargraph/complex_type.rb#405
Solargraph::ComplexType::SYMBOL = T.let(T.unsafe(nil), Solargraph::ComplexType)

# Methods for accessing type data available from
# both ComplexType and UniqueType.
#
# @abstract This mixin relies on these -
#   instance variables:
#   @name: String
#   @subtypes: Array<ComplexType>
#   @rooted: boolish
#   methods:
#   transform()
#   all_params()
#   rooted?()
#   can_root_name?()
#
# source://solargraph//lib/solargraph/complex_type/type_methods.rb#18
module Solargraph::ComplexType::TypeMethods
  # @param other [Object]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#191
  def ==(other); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#64
  def defined?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#47
  def duck_type?; end

  # @return [Enumerator<UniqueType>]
  # @yieldparam [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#217
  def each_unique_type(&block); end

  # @param generics_to_erase [Enumerable<String>]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#74
  def erase_generics(generics_to_erase); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#104
  def fixed_parameters?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#164
  def generate_substring_from(&to_str); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#109
  def hash_parameters?; end

  # @return [Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#119
  def key_types; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#99
  def list_parameters?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#31
  def name; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#124
  def namespace; end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#134
  def namespace_type; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#52
  def nil_type?; end

  # @return [Symbol, nil]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#89
  def parameters_type; end

  # Generate a ComplexType that fully qualifies this type's namespaces.
  #
  # @param api_map [ApiMap] The ApiMap that performs qualification
  # @param context [String] The namespace from which to resolve names
  # @return [self, ComplexType, UniqueType] The generated ComplexType
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#201
  def qualify(api_map, context = T.unsafe(nil)); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#148
  def rooted_name; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#142
  def rooted_namespace; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#159
  def rooted_substring; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#42
  def rooted_tag; end

  # @return [::Symbol] :class or :instance
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#185
  def scope; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#154
  def substring; end

  # @return [Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#34
  def subtypes; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#37
  def tag; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#56
  def tuple?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#68
  def undefined?; end

  # @return [Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#114
  def value_types; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/type_methods.rb#60
  def void?; end
end

# @type [Hash{String => Symbol}]
#
# source://solargraph//lib/solargraph/complex_type/type_methods.rb#92
Solargraph::ComplexType::TypeMethods::PARAMETERS_TYPE_BY_STARTING_TAG = T.let(T.unsafe(nil), Hash)

# source://solargraph//lib/solargraph/complex_type.rb#404
Solargraph::ComplexType::UNDEFINED = T.let(T.unsafe(nil), Solargraph::ComplexType)

# An individual type signature. A complex type can consist of multiple
# unique types.
#
# source://solargraph//lib/solargraph/complex_type/unique_type.rb#8
class Solargraph::ComplexType::UniqueType
  include ::Solargraph::ComplexType::TypeMethods
  include ::Solargraph::Equality
  include ::Solargraph::Logging

  # @param name [String]
  # @param key_types [Array<ComplexType>]
  # @param subtypes [Array<ComplexType>]
  # @param rooted [Boolean]
  # @param parameters_type [Symbol, nil]
  # @return [UniqueType] a new instance of UniqueType
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#73
  def initialize(name, key_types = T.unsafe(nil), subtypes = T.unsafe(nil), rooted:, parameters_type: T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#149
  def ==(other); end

  # Returns the value of attribute all_params.
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#12
  def all_params; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#440
  def all_rooted?; end

  # @param api_map [ApiMap] The ApiMap that performs qualification
  # @param atype [ComplexType] type which may be assigned to this type
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#241
  def can_assign?(api_map, atype); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#449
  def can_root_name?(name_to_check = T.unsafe(nil)); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#174
  def desc; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#122
  def determine_non_literal_name; end

  # @return [UniqueType]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#252
  def downcast_to_literal_if_possible; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#139
  def eql?(other); end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#381
  def force_rooted; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#235
  def generic?; end

  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#153
  def hash; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#93
  def implicit_union?; end

  # @return [Array<UniqueType>]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#158
  def items; end

  # Returns the value of attribute key_types.
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#12
  def key_types; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#112
  def literal?; end

  # @return [Array<self>]
  # @yieldparam t [self]
  # @yieldreturn [self]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#345
  def map(&block); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#117
  def non_literal_name; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#209
  def parameters?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#224
  def parameters_as_rbs; end

  # Generate a ComplexType that fully qualifies this type's namespaces.
  #
  # @param api_map [ApiMap] The ApiMap that performs qualification
  # @param context [String] The namespace from which to resolve names
  # @return [self, ComplexType, UniqueType] The generated ComplexType
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#412
  def qualify(api_map, context = T.unsafe(nil)); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#163
  def rbs_name; end

  # @param types [Array<UniqueType, ComplexType>]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#215
  def rbs_union(types); end

  # @param new_name [String, nil]
  # @param make_rooted [Boolean, nil]
  # @param new_key_types [Array<ComplexType>, nil]
  # @param rooted [Boolean, nil]
  # @param new_subtypes [Array<ComplexType>, nil]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#360
  def recreate(new_name: T.unsafe(nil), make_rooted: T.unsafe(nil), new_key_types: T.unsafe(nil), new_subtypes: T.unsafe(nil)); end

  # Probe the concrete type for each of the generic type
  # parameters used in this type, and return a new type if
  # possible.
  #
  # @param definitions [Pin::Namespace, Pin::Method] The module/class/method which uses generic types
  # @param context_type [ComplexType] The receiver type
  # @return [UniqueType, ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#311
  def resolve_generics(definitions, context_type); end

  # @param generics_to_resolve [Enumerable<String>]
  # @param context_type [UniqueType, nil]
  # @param resolved_generic_values [Hash{String => ComplexType, ComplexType::UniqueType}] Added to as types are encountered or resolved
  # @return [UniqueType, ComplexType]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#260
  def resolve_generics_from_context(generics_to_resolve, context_type, resolved_generic_values: T.unsafe(nil)); end

  # @param generics_to_resolve [Enumerable<String>]
  # @param context_type [UniqueType]
  # @param resolved_generic_values [Hash{String => ComplexType}]
  # @return [Array<ComplexType>]
  # @yieldreturn [Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#287
  def resolve_param_generics_from_context(generics_to_resolve, context_type, resolved_generic_values); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#445
  def rooted?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#371
  def rooted_tags; end

  # @param dst [ComplexType]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#432
  def self_to_type(dst); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#426
  def selfy?; end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#105
  def simplify_literals; end

  # Returns the value of attribute subtypes.
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#12
  def subtypes; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#376
  def tags; end

  # @return [Array<UniqueType>]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#350
  def to_a; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#179
  def to_rbs; end

  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#100
  def to_s; end

  # Apply the given transformation to each subtype and then finally to this type
  #
  # @param new_name [String, nil]
  # @return [self]
  # @yieldparam t [UniqueType]
  # @yieldreturn [self]
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#393
  def transform(new_name = T.unsafe(nil), &transform_type); end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/complex_type/unique_type.rb#15
  def equality_fields; end

  class << self
    # @param name [String]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/complex_type/unique_type.rb#454
    def can_root_name?(name); end

    # Create a UniqueType with the specified name and an optional substring.
    # The substring is the parameter section of a parametrized type, e.g.,
    # for the type `Array<String>`, the name is `Array` and the substring is
    # `<String>`.
    #
    # @param name [String] The name of the type
    # @param substring [String] The substring of the type
    # @param make_rooted [Boolean, nil]
    # @return [UniqueType]
    #
    # source://solargraph//lib/solargraph/complex_type/unique_type.rb#28
    def parse(name, substring = T.unsafe(nil), make_rooted: T.unsafe(nil)); end
  end
end

# source://solargraph//lib/solargraph/complex_type/unique_type.rb#460
Solargraph::ComplexType::UniqueType::BOOLEAN = T.let(T.unsafe(nil), Solargraph::ComplexType::UniqueType)

# source://solargraph//lib/solargraph/complex_type/unique_type.rb#462
Solargraph::ComplexType::UniqueType::FALSE = T.let(T.unsafe(nil), Solargraph::ComplexType::UniqueType)

# source://solargraph//lib/solargraph/complex_type/unique_type.rb#463
Solargraph::ComplexType::UniqueType::NIL = T.let(T.unsafe(nil), Solargraph::ComplexType::UniqueType)

# @type [Hash{String => UniqueType}]
#
# source://solargraph//lib/solargraph/complex_type/unique_type.rb#465
Solargraph::ComplexType::UniqueType::SINGLE_SUBTYPE = T.let(T.unsafe(nil), Hash)

# source://solargraph//lib/solargraph/complex_type/unique_type.rb#461
Solargraph::ComplexType::UniqueType::TRUE = T.let(T.unsafe(nil), Solargraph::ComplexType::UniqueType)

# source://solargraph//lib/solargraph/complex_type/unique_type.rb#459
Solargraph::ComplexType::UniqueType::UNDEFINED = T.let(T.unsafe(nil), Solargraph::ComplexType::UniqueType)

# source://solargraph//lib/solargraph/complex_type.rb#403
Solargraph::ComplexType::VOID = T.let(T.unsafe(nil), Solargraph::ComplexType)

# source://solargraph//lib/solargraph.rb#19
class Solargraph::ComplexTypeError < ::StandardError; end

# Conventions provide a way to modify an ApiMap based on expectations about
# one of its sources.
#
# source://solargraph//lib/solargraph/convention.rb#7
module Solargraph::Convention
  class << self
    # @param doc_map [DocMap]
    # @return [Environ]
    #
    # source://solargraph//lib/solargraph/convention.rb#43
    def for_global(doc_map); end

    # @param source_map [SourceMap]
    # @return [Environ]
    #
    # source://solargraph//lib/solargraph/convention.rb#33
    def for_local(source_map); end

    # Provides any additional method pins based on the described object.
    #
    # @param api_map [ApiMap]
    # @param rooted_tag [String] A fully qualified namespace, with
    #   generic parameter values if applicable
    # @param scope [Symbol] :class or :instance
    # @param visibility [Array<Symbol>] :public, :protected, and/or :private
    # @param deep [Boolean]
    # @param skip [Set<String>]
    # @param no_core [Boolean] Skip core classes if true
    # @return [Environ]
    #
    # source://solargraph//lib/solargraph/convention.rb#63
    def for_object(api_map, rooted_tag, scope, visibility, deep, skip, no_core); end

    # @param convention [Class<Convention::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/convention.rb#21
    def register(convention); end

    # @param convention [Class<Convention::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/convention.rb#27
    def unregister(convention); end
  end
end

# ActiveSupport::Concern is syntactic sugar for a common
# pattern to include class methods while mixing-in a Module
# See https://api.rubyonrails.org/classes/ActiveSupport/Concern.html
#
# source://solargraph//lib/solargraph/convention/active_support_concern.rb#8
class Solargraph::Convention::ActiveSupportConcern < ::Solargraph::Convention::Base
  include ::Solargraph::Logging

  # yard-activesupport-concern pulls methods inside
  # 'class_methods' blocks into main class visible from YARD
  #
  # @param _doc_map [DocMap]
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#30
  def global(_doc_map); end

  # @param api_map [ApiMap]
  # @param rooted_tag [String]
  # @param scope [Symbol] :class or :instance
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param deep [Boolean] whether to include methods from included modules
  # @param skip [Set<String>]
  # @param _no_core [Boolean] n whether to skip core methods
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#21
  def object(api_map, rooted_tag, scope, visibility, deep, skip, _no_core); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#12
  def pins; end
end

# Process an object to add any class methods brought in via
# ActiveSupport::Concern
#
# source://solargraph//lib/solargraph/convention/active_support_concern.rb#36
class Solargraph::Convention::ActiveSupportConcern::ObjectProcessor
  include ::Solargraph::Logging

  # @param api_map [ApiMap]
  # @param rooted_tag [String] the tag of the class or module being processed
  # @param scope [Symbol] :class or :instance
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param deep [Boolean] whether to include methods from included modules
  # @param skip [Set<String>] a set of tags to skip
  # @return [ObjectProcessor] a new instance of ObjectProcessor
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#47
  def initialize(api_map, rooted_tag, scope, visibility, deep, skip); end

  # Returns the value of attribute environ.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#39
  def environ; end

  private

  # Returns the value of attribute api_map.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def api_map; end

  # Returns the value of attribute deep.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def deep; end

  # Returns the value of attribute fqns.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def fqns; end

  # Returns the value of attribute namespace_pin.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def namespace_pin; end

  # @param include_tag [Pin::Reference::Include] the include reference pin
  # @return [void]
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#76
  def process_include(include_tag); end

  # Returns the value of attribute rooted_tag.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def rooted_tag; end

  # Returns the value of attribute rooted_type.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def rooted_type; end

  # Returns the value of attribute scope.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def scope; end

  # Returns the value of attribute skip.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def skip; end

  # Returns the value of attribute visibility.
  #
  # source://solargraph//lib/solargraph/convention/active_support_concern.rb#69
  def visibility; end
end

# The base class for Conventions.
#
# A Convention provides Environs that customize ApiMaps with additional
# pins and other information. Subclasses should implement the `local` and
# `global` methods as necessary.
#
# source://solargraph//lib/solargraph/convention/base.rb#11
class Solargraph::Convention::Base
  # The Environ for a DocMap.
  # Subclasses can override this method.
  #
  # @param doc_map [DocMap]
  # @return [Environ]
  #
  # source://solargraph//lib/solargraph/convention/base.rb#28
  def global(doc_map); end

  # The Environ for a source map.
  # Subclasses can override this method.
  #
  # @param source_map [SourceMap]
  # @return [Environ]
  #
  # source://solargraph//lib/solargraph/convention/base.rb#19
  def local(source_map); end

  # Provides any additional method pins based on e the described object.
  #
  # @param api_map [ApiMap]
  # @param rooted_tag [String] A fully qualified namespace, with
  #   generic parameter values if applicable
  # @param scope [Symbol] :class or :instance
  # @param visibility [Array<Symbol>] :public, :protected, and/or :private
  # @param deep [Boolean]
  # @param skip [Set<String>]
  # @param no_core [Boolean] Skip core classes if true
  # @return [Environ]
  #
  # source://solargraph//lib/solargraph/convention/base.rb#44
  def object(api_map, rooted_tag, scope, visibility, deep, skip, no_core); end
end

# source://solargraph//lib/solargraph/convention/base.rb#12
Solargraph::Convention::Base::EMPTY_ENVIRON = T.let(T.unsafe(nil), Solargraph::Environ)

# source://solargraph//lib/solargraph/convention/data_definition.rb#5
module Solargraph::Convention::DataDefinition; end

# A node wrapper for a Data definition via const assignment.
#
# @example
#   MyData = Data.new(:bar, :baz) do
#   def foo
#   end
#   end
#
# source://solargraph//lib/solargraph/convention/data_definition/data_assignment_node.rb#12
class Solargraph::Convention::DataDefinition::DataAssignmentNode < ::Solargraph::Convention::DataDefinition::DataDefintionNode
  # source://solargraph//lib/solargraph/convention/data_definition/data_assignment_node.rb#40
  def class_name; end

  private

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_assignment_node.rb#51
  def data_node; end

  class << self
    # s(:casgn, nil, :Foo,
    #   s(:block,
    #     s(:send,
    #       s(:const, nil, :Data), :define,
    #       s(:sym, :bar),
    #       s(:sym, :baz)),
    #     s(:args),
    #     s(:def, :foo,
    #       s(:args),
    #       s(:send, nil, :bar))))
    #
    # @param node [::Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/convention/data_definition/data_assignment_node.rb#26
    def match?(node); end
  end
end

# A node wrapper for a Data definition via inheritance.
#
# @example
#   class MyData < Data.new(:bar, :baz)
#   def foo
#   end
#   end
#
# source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#12
class Solargraph::Convention::DataDefinition::DataDefintionNode
  # @param node [Parser::AST::Node]
  # @return [DataDefintionNode] a new instance of DataDefintionNode
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#52
  def initialize(node); end

  # @return [Array<Array(Parser::AST::Node, String)>]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#62
  def attributes; end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#70
  def body_node; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#57
  def class_name; end

  private

  # @return [Array<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#85
  def data_attribute_nodes; end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#80
  def data_node; end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#77
  def node; end

  class << self
    # @example
    #   s(:class,
    #   s(:const, nil, :Foo),
    #   s(:send,
    #   s(:const, nil, :Data), :define,
    #   s(:sym, :bar),
    #   s(:sym, :baz)),
    #   s(:hash,
    #   s(:pair,
    #   s(:sym, :keyword_init),
    #   s(:true)))),
    #   s(:def, :foo,
    #   s(:args),
    #   s(:send, nil, :bar)))
    # @param node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#30
    def match?(node); end

    private

    # @param data_node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/convention/data_definition/data_definition_node.rb#40
    def data_definition_node?(data_node); end
  end
end

# source://solargraph//lib/solargraph/convention/data_definition.rb#9
module Solargraph::Convention::DataDefinition::NodeProcessors; end

# source://solargraph//lib/solargraph/convention/data_definition.rb#10
class Solargraph::Convention::DataDefinition::NodeProcessors::DataNode < ::Solargraph::Parser::NodeProcessor::Base
  # @return [Boolean] continue processing the next processor of the same node.
  #
  # source://solargraph//lib/solargraph/convention/data_definition.rb#12
  def process; end

  private

  # @param attribute_node [Parser::AST::Node]
  # @param attribute_name [String]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/convention/data_definition.rb#93
  def attribute_comments(attribute_node, attribute_name); end

  # @return [DataDefintionNode, nil]
  #
  # source://solargraph//lib/solargraph/convention/data_definition.rb#82
  def data_definition_node; end
end

# source://solargraph//lib/solargraph/convention/gemfile.rb#5
class Solargraph::Convention::Gemfile < ::Solargraph::Convention::Base
  # source://solargraph//lib/solargraph/convention/gemfile.rb#6
  def local(source_map); end
end

# source://solargraph//lib/solargraph/convention/gemspec.rb#5
class Solargraph::Convention::Gemspec < ::Solargraph::Convention::Base
  # source://solargraph//lib/solargraph/convention/gemspec.rb#6
  def local(source_map); end
end

# source://solargraph//lib/solargraph/convention/rakefile.rb#5
class Solargraph::Convention::Rakefile < ::Solargraph::Convention::Base
  # source://solargraph//lib/solargraph/convention/rakefile.rb#6
  def local(source_map); end
end

# source://solargraph//lib/solargraph/convention/struct_definition.rb#5
module Solargraph::Convention::StructDefinition; end

# source://solargraph//lib/solargraph/convention/struct_definition.rb#9
module Solargraph::Convention::StructDefinition::NodeProcessors; end

# source://solargraph//lib/solargraph/convention/struct_definition.rb#10
class Solargraph::Convention::StructDefinition::NodeProcessors::StructNode < ::Solargraph::Parser::NodeProcessor::Base
  # @return [Boolean] continue processing the next processor of the same node.
  #
  # source://solargraph//lib/solargraph/convention/struct_definition.rb#12
  def process; end

  private

  # @param tag [YARD::Tags::Tag, nil] The param tag for this attribute. If nil, this method is a no-op
  # @param for_setter [Boolean] If true, will return a @param tag instead of a @return tag
  # @return [String] The formatted comment for the attribute
  #
  # source://solargraph//lib/solargraph/convention/struct_definition.rb#149
  def attribute_comment(tag, for_setter); end

  # Gets/generates the relevant docstring for this struct & it's attributes
  #
  # @return [YARD::Docstring]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition.rb#116
  def docstring; end

  # Parses any relevant comments for a struct int a yard docstring
  #
  # @return [YARD::Docstring]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition.rb#122
  def parse_comments; end

  # @return [StructDefintionNode, StructAssignmentNode, nil]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition.rb#106
  def struct_definition_node; end

  # @param tag [YARD::Tags::Tag, nil] The param tag for this attribute.xtract_
  # @return [String]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition.rb#141
  def tag_string(tag); end
end

# A node wrapper for a Struct definition via const assignment.
#
# @example
#   MyStruct = Struct.new(:bar, :baz) do
#   def foo
#   end
#   end
#
# source://solargraph//lib/solargraph/convention/struct_definition/struct_assignment_node.rb#12
class Solargraph::Convention::StructDefinition::StructAssignmentNode < ::Solargraph::Convention::StructDefinition::StructDefintionNode
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_assignment_node.rb#40
  def class_name; end

  private

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_assignment_node.rb#51
  def struct_node; end

  class << self
    # s(:casgn, nil, :Foo,
    #   s(:block,
    #     s(:send,
    #       s(:const, nil, :Struct), :new,
    #       s(:sym, :bar),
    #       s(:sym, :baz)),
    #     s(:args),
    #     s(:def, :foo,
    #       s(:args),
    #       s(:send, nil, :bar))))
    #
    # @param node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/convention/struct_definition/struct_assignment_node.rb#26
    def match?(node); end
  end
end

# A node wrapper for a Struct definition via inheritance.
#
# @example
#   class MyStruct < Struct.new(:bar, :baz)
#   def foo
#   end
#   end
#
# source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#12
class Solargraph::Convention::StructDefinition::StructDefintionNode
  # @param node [Parser::AST::Node]
  # @return [StructDefintionNode] a new instance of StructDefintionNode
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#52
  def initialize(node); end

  # @return [Array<Array(Parser::AST::Node, String)>]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#62
  def attributes; end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#81
  def body_node; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#57
  def class_name; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#69
  def keyword_init?; end

  private

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#88
  def node; end

  # @return [Array<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#96
  def struct_attribute_nodes; end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#91
  def struct_node; end

  class << self
    # @example
    #   s(:class,
    #   s(:const, nil, :Foo),
    #   s(:send,
    #   s(:const, nil, :Struct), :new,
    #   s(:sym, :bar),
    #   s(:sym, :baz)),
    #   s(:hash,
    #   s(:pair,
    #   s(:sym, :keyword_init),
    #   s(:true)))),
    #   s(:def, :foo,
    #   s(:args),
    #   s(:send, nil, :bar)))
    # @param node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#30
    def match?(node); end

    private

    # @param struct_node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/convention/struct_definition/struct_definition_node.rb#40
    def struct_definition_node?(struct_node); end
  end
end

# The Diagnostics library provides reporters for analyzing problems in code
# and providing the results to language server clients.
#
# source://solargraph//lib/solargraph/diagnostics.rb#7
module Solargraph::Diagnostics
  class << self
    # Add a reporter with a name to identify it in .solargraph.yml files.
    #
    # @param name [String] The name
    # @param klass [Class<Solargraph::Diagnostics::Base>] The class implementation
    # @return [void]
    #
    # source://solargraph//lib/solargraph/diagnostics.rb#22
    def register(name, klass); end

    # Find a reporter by name.
    #
    # @param name [String] The name with which the reporter was registered
    # @return [Class<Solargraph::Diagnostics::Base>, nil]
    #
    # source://solargraph//lib/solargraph/diagnostics.rb#37
    def reporter(name); end

    # Get an array of reporter names.
    #
    # @return [Array<String>]
    #
    # source://solargraph//lib/solargraph/diagnostics.rb#29
    def reporters; end

    private

    # @return [Hash{String => Class<Solargraph::Diagnostics::Base>}]
    #
    # source://solargraph//lib/solargraph/diagnostics.rb#44
    def reporter_hash; end
  end
end

# The base class for diagnostics reporters.
#
# source://solargraph//lib/solargraph/diagnostics/base.rb#7
class Solargraph::Diagnostics::Base
  # @return [Base] a new instance of Base
  #
  # source://solargraph//lib/solargraph/diagnostics/base.rb#11
  def initialize(*args); end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/diagnostics/base.rb#9
  def args; end

  # Perform a diagnosis on a Source within the context of an ApiMap.
  # The result is an array of hash objects that conform to the LSP's
  # Diagnostic specification.
  #
  # Subclasses should override this method.
  #
  # @param source [Solargraph::Source]
  # @param api_map [Solargraph::ApiMap]
  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/diagnostics/base.rb#24
  def diagnose(source, api_map); end
end

# RequireNotFound reports required paths that could not be resolved to
# either a file in the workspace or a gem.
#
# source://solargraph//lib/solargraph/diagnostics/require_not_found.rb#8
class Solargraph::Diagnostics::RequireNotFound < ::Solargraph::Diagnostics::Base
  # source://solargraph//lib/solargraph/diagnostics/require_not_found.rb#9
  def diagnose(source, api_map); end

  private

  # @param path [String]
  # @param location [Location]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/diagnostics/require_not_found.rb#31
  def docs_error(path, location); end

  # @param path [String]
  # @param location [Location]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/diagnostics/require_not_found.rb#43
  def require_error(path, location); end
end

# This reporter provides linting through RuboCop.
#
# source://solargraph//lib/solargraph/diagnostics/rubocop.rb#9
class Solargraph::Diagnostics::Rubocop < ::Solargraph::Diagnostics::Base
  include ::Solargraph::Diagnostics::RubocopHelpers

  # @param source [Solargraph::Source]
  # @param _api_map [Solargraph::ApiMap]
  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#25
  def diagnose(source, _api_map); end

  private

  # @param resp [Hash{String => Array<Hash{String => Array<Hash{String => undefined}>}>}]
  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#58
  def make_array(resp); end

  # @param off [Hash{String => Hash{String => Integer}}]
  # @return [Position]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#97
  def offense_ending_position(off); end

  # @param off [Hash]
  # @return [Range]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#85
  def offense_range(off); end

  # @param off [Hash{String => Hash{String => Integer}}]
  # @return [Position]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#91
  def offense_start_position(off); end

  # Convert a RuboCop offense to an LSP diagnostic
  #
  # @param off [Hash{String => unknown}] Offense received from Rubocop
  # @return [Hash{Symbol => Hash, String, Integer}] LSP diagnostic
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#72
  def offense_to_diagnostic(off); end

  # Extracts the rubocop version from _args_
  #
  # @return [String]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop.rb#52
  def rubocop_version; end
end

# Conversion of RuboCop severity names to LSP constants
#
# source://solargraph//lib/solargraph/diagnostics/rubocop.rb#13
Solargraph::Diagnostics::Rubocop::SEVERITIES = T.let(T.unsafe(nil), Hash)

# Utility methods for the RuboCop diagnostics reporter.
#
# source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#7
module Solargraph::Diagnostics::RubocopHelpers
  private

  # RuboCop internally uses capitalized drive letters for Windows paths,
  # so we need to convert the paths provided to the command.
  #
  # @param path [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#49
  def fix_drive_letter(path); end

  # Generate command-line options for the specified filename and code.
  #
  # @param filename [String]
  # @param code [String]
  # @return [Array(Array<String>, Array<String>)]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#36
  def generate_options(filename, code); end

  # @return [String]
  # @todo This is a smelly way to redirect output, but the RuboCop specs do
  #   the same thing.
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#57
  def redirect_stdout; end

  # Requires a specific version of rubocop, or the latest installed version
  # if _version_ is `nil`.
  #
  # @param version [String, nil]
  # @raise [InvalidRubocopVersionError] if _version_ is not installed
  # @return [void]
  #
  # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#16
  def require_rubocop(version = T.unsafe(nil)); end

  class << self
    # RuboCop internally uses capitalized drive letters for Windows paths,
    # so we need to convert the paths provided to the command.
    #
    # @param path [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#49
    def fix_drive_letter(path); end

    # Generate command-line options for the specified filename and code.
    #
    # @param filename [String]
    # @param code [String]
    # @return [Array(Array<String>, Array<String>)]
    #
    # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#36
    def generate_options(filename, code); end

    # @return [String]
    # @todo This is a smelly way to redirect output, but the RuboCop specs do
    #   the same thing.
    #
    # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#57
    def redirect_stdout; end

    # Requires a specific version of rubocop, or the latest installed version
    # if _version_ is `nil`.
    #
    # @param version [String, nil]
    # @raise [InvalidRubocopVersionError] if _version_ is not installed
    # @return [void]
    #
    # source://solargraph//lib/solargraph/diagnostics/rubocop_helpers.rb#16
    def require_rubocop(version = T.unsafe(nil)); end
  end
end

# These severity constants match the DiagnosticSeverity constants in the
# language server protocol.
#
# source://solargraph//lib/solargraph/diagnostics/severities.rb#8
module Solargraph::Diagnostics::Severities; end

# source://solargraph//lib/solargraph/diagnostics/severities.rb#9
Solargraph::Diagnostics::Severities::ERROR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/diagnostics/severities.rb#12
Solargraph::Diagnostics::Severities::HINT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/diagnostics/severities.rb#11
Solargraph::Diagnostics::Severities::INFORMATION = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/diagnostics/severities.rb#10
Solargraph::Diagnostics::Severities::WARNING = T.let(T.unsafe(nil), Integer)

# TypeCheck reports methods with undefined return types, untagged
# parameters, and invalid param tags.
#
# source://solargraph//lib/solargraph/diagnostics/type_check.rb#8
class Solargraph::Diagnostics::TypeCheck < ::Solargraph::Diagnostics::Base
  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/diagnostics/type_check.rb#10
  def diagnose(source, api_map); end

  private

  # @param location [Location]
  # @param source [Source]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/diagnostics/type_check.rb#32
  def extract_first_line(location, source); end

  # @param position [Solargraph::Position]
  # @param source [Solargraph::Source]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/diagnostics/type_check.rb#49
  def last_character(position, source); end
end

# source://solargraph//lib/solargraph/diagnostics/update_errors.rb#5
class Solargraph::Diagnostics::UpdateErrors < ::Solargraph::Diagnostics::Base
  # source://solargraph//lib/solargraph/diagnostics/update_errors.rb#6
  def diagnose(source, api_map); end

  private

  # Combine an array of ranges by their starting lines.
  #
  # @param code [String]
  # @param ranges [Array<Range>]
  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/diagnostics/update_errors.rb#26
  def combine_ranges(code, ranges); end
end

# source://solargraph//lib/solargraph.rb#16
class Solargraph::DiagnosticsError < ::RuntimeError; end

# A collection of pins generated from required gems.
#
# source://solargraph//lib/solargraph/doc_map.rb#10
class Solargraph::DocMap
  include ::Solargraph::Logging

  # @param requires [Array<String>]
  # @param preferences [Array<Gem::Specification>]
  # @param workspace [Workspace, nil]
  # @return [DocMap] a new instance of DocMap
  #
  # source://solargraph//lib/solargraph/doc_map.rb#51
  def initialize(requires, preferences, workspace = T.unsafe(nil)); end

  # @param gemspec [Gem::Specification]
  # @param rebuild [Boolean] whether to rebuild the pins even if they are cached
  # @param out [IO, nil] output stream for logging
  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#108
  def cache(gemspec, rebuild: T.unsafe(nil), out: T.unsafe(nil)); end

  # @param out [IO]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#65
  def cache_all!(out); end

  # @param gemspec [Gem::Specification]
  # @param out [IO]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#94
  def cache_rbs_collection_pins(gemspec, out); end

  # @param gemspec [Gem::Specification]
  # @param out [IO]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#85
  def cache_yard_pins(gemspec, out); end

  # @return [Hash{Array(String, String) => Array<Pin::Base>}] Indexed by gemspec name and version
  # @todo this should also include an index by the hash of the RBS collection
  #
  # source://solargraph//lib/solargraph/doc_map.rb#158
  def combined_pins_in_memory; end

  # @return [Set<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#168
  def dependencies; end

  # @return [Environ]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#46
  def environ; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#122
  def gemspecs; end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#21
  def pins; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#18
  def preferences; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#40
  def rbs_collection_config_path; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#37
  def rbs_collection_path; end

  # @return [Hash{Array(String, String) => Array<Pin::Base>}] Indexed by gemspec name and version
  #
  # source://solargraph//lib/solargraph/doc_map.rb#147
  def rbs_collection_pins_in_memory; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#15
  def required; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#14
  def requires; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#24
  def uncached_gemspecs; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#34
  def uncached_rbs_collection_gemspecs; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#31
  def uncached_yard_gemspecs; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#127
  def unresolved_requires; end

  # @return [Workspace, nil]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#43
  def workspace; end

  # @return [Hash{Array(String, String) => Array<Pin::Base>}] Indexed by gemspec name and version
  #
  # source://solargraph//lib/solargraph/doc_map.rb#142
  def yard_pins_in_memory; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#163
  def yard_plugins; end

  private

  # @param gemspec [Gem::Specification]
  # @param version [Gem::Version]
  # @return [Gem::Specification]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#351
  def change_gemspec_version(gemspec, version); end

  # @param gemspec [Gem::Specification]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#235
  def deserialize_combined_pin_cache(gemspec); end

  # @param gemspec [Gem::Specification]
  # @param rbs_version_cache_key [String]
  # @return [Array<Pin::Base>, nil]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#296
  def deserialize_rbs_collection_cache(gemspec, rbs_version_cache_key); end

  # @param path [String] require path that might be in the RBS stdlib collection
  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#279
  def deserialize_stdlib_rbs_map(path); end

  # @param gemspec [Gem::Specification]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#216
  def deserialize_yard_pin_cache(gemspec); end

  # @param gemspec [Gem::Specification]
  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#360
  def fetch_dependencies(gemspec); end

  # @param gemspec [Gem::Specification]
  # @return [Gem::Specification]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#339
  def gemspec_or_preference(gemspec); end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#385
  def gemspecs_required_from_bundler; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#408
  def gemspecs_required_from_external_bundle; end

  # source://solargraph//lib/solargraph/doc_map.rb#380
  def inspect; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#175
  def load_serialized_gem_pins; end

  # @param gemspec [Gem::Specification]
  # @return [Array<Gem::Dependency>]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#375
  def only_runtime_dependencies(gemspec); end

  # @return [Hash{String => Gem::Specification}]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#210
  def preference_map; end

  # @return [Hash{String => Array<Gem::Specification>}]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#205
  def required_gems_map; end

  # @param path [String]
  # @return [::Array<Gem::Specification>, nil]
  #
  # source://solargraph//lib/solargraph/doc_map.rb#312
  def resolve_path_to_gemspecs(path); end

  class << self
    # @return [Hash{Array(String, String) => Array<Pin::Base>}] Indexed by gemspec name and version
    #
    # source://solargraph//lib/solargraph/doc_map.rb#152
    def all_combined_pins_in_memory; end

    # @return [Hash{String => Hash{Array(String, String) => Array<Pin::Base>}}] stored by RBS collection path
    #
    # source://solargraph//lib/solargraph/doc_map.rb#137
    def all_rbs_collection_gems_in_memory; end

    # @return [Hash{Array(String, String) => Array<Gem::Specification>}] Indexed by gemspec name and version
    #
    # source://solargraph//lib/solargraph/doc_map.rb#132
    def all_yard_gems_in_memory; end
  end
end

# A placeholder for the @!domain directive. It doesn't need to do anything
# for yardocs. It's only used for Solargraph API maps.
#
# source://solargraph//lib/solargraph/yard_tags.rb#11
class Solargraph::DomainDirective < ::YARD::Tags::Directive
  # source://solargraph//lib/solargraph/yard_tags.rb#12
  def call; end
end

# A collection of additional data, such as map pins and required paths, that
# can be added to an ApiMap.
#
# Conventions are used to add Environs.
#
# source://solargraph//lib/solargraph/environ.rb#9
class Solargraph::Environ
  # @param requires [Array<String>]
  # @param domains [Array<String>]
  # @param pins [Array<Pin::Base>]
  # @param yard_plugins [Array<String>]
  # @return [Environ] a new instance of Environ
  #
  # source://solargraph//lib/solargraph/environ.rb#26
  def initialize(requires: T.unsafe(nil), domains: T.unsafe(nil), pins: T.unsafe(nil), yard_plugins: T.unsafe(nil)); end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/environ.rb#34
  def clear; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/environ.rb#14
  def domains; end

  # @param other [Environ]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/environ.rb#44
  def merge(other); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/environ.rb#17
  def pins; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/environ.rb#11
  def requires; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/environ.rb#20
  def yard_plugins; end
end

# @abstract This mixin relies on these -
#   methods:
#   equality_fields()
#
# source://solargraph//lib/solargraph/equality.rb#7
module Solargraph::Equality
  # @param other [Object]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/equality.rb#20
  def ==(other); end

  # @param other [Object]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/equality.rb#13
  def eql?(other); end

  # source://solargraph//lib/solargraph/equality.rb#28
  def freeze; end

  # source://solargraph//lib/solargraph/equality.rb#24
  def hash; end
end

# source://solargraph//lib/solargraph.rb#17
class Solargraph::FileNotFoundError < ::RuntimeError; end

# A utility for building gem pins from a combination of YARD and RBS
# documentation.
#
# source://solargraph//lib/solargraph/gem_pins.rb#9
module Solargraph::GemPins
  extend ::Solargraph::Logging

  class << self
    # @param yard_plugins [Array<String>] The names of YARD plugins to use.
    # @param gemspec [Gem::Specification]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/gem_pins.rb#47
    def build_yard_pins(yard_plugins, gemspec); end

    # @param yard_pins [Array<Pin::Base>]
    # @param rbs_pins [Array<Pin::Base>]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/gem_pins.rb#57
    def combine(yard_pins, rbs_pins); end

    # @param pins [Array<Pin::Method>]
    # @return [Pin::Method, nil]
    #
    # source://solargraph//lib/solargraph/gem_pins.rb#27
    def combine_method_pins(*pins); end

    # @param pins [Array<Pin::Base>]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/gem_pins.rb#16
    def combine_method_pins_by_path(pins); end

    private

    # Select the first defined type.
    #
    # @param choices [Array<ComplexType>]
    # @return [ComplexType]
    #
    # source://solargraph//lib/solargraph/gem_pins.rb#89
    def best_return_type(*choices); end
  end
end

# source://solargraph//lib/solargraph.rb#15
class Solargraph::InvalidOffsetError < ::RangeError; end

# source://solargraph//lib/solargraph.rb#22
class Solargraph::InvalidRubocopVersionError < ::RuntimeError; end

# The LanguageServer namespace contains the classes and modules that compose
# concrete implementations of language servers.
#
# source://solargraph//lib/solargraph/language_server/error_codes.rb#4
module Solargraph::LanguageServer; end

# The CompletionItemKind constants for the language server protocol.
#
# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#7
module Solargraph::LanguageServer::CompletionItemKinds; end

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#14
Solargraph::LanguageServer::CompletionItemKinds::CLASS = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#23
Solargraph::LanguageServer::CompletionItemKinds::COLOR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#28
Solargraph::LanguageServer::CompletionItemKinds::CONSTANT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#11
Solargraph::LanguageServer::CompletionItemKinds::CONSTRUCTOR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#20
Solargraph::LanguageServer::CompletionItemKinds::ENUM = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#27
Solargraph::LanguageServer::CompletionItemKinds::ENUM_MEMBER = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#30
Solargraph::LanguageServer::CompletionItemKinds::EVENT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#12
Solargraph::LanguageServer::CompletionItemKinds::FIELD = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#24
Solargraph::LanguageServer::CompletionItemKinds::FILE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#26
Solargraph::LanguageServer::CompletionItemKinds::FOLDER = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#10
Solargraph::LanguageServer::CompletionItemKinds::FUNCTION = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#15
Solargraph::LanguageServer::CompletionItemKinds::INTERFACE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#21
Solargraph::LanguageServer::CompletionItemKinds::KEYWORD = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#9
Solargraph::LanguageServer::CompletionItemKinds::METHOD = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#16
Solargraph::LanguageServer::CompletionItemKinds::MODULE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#31
Solargraph::LanguageServer::CompletionItemKinds::OPERATOR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#17
Solargraph::LanguageServer::CompletionItemKinds::PROPERTY = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#25
Solargraph::LanguageServer::CompletionItemKinds::REFERENCE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#22
Solargraph::LanguageServer::CompletionItemKinds::SNIPPET = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#29
Solargraph::LanguageServer::CompletionItemKinds::STRUCT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#8
Solargraph::LanguageServer::CompletionItemKinds::TEXT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#32
Solargraph::LanguageServer::CompletionItemKinds::TYPE_PARAMETER = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#18
Solargraph::LanguageServer::CompletionItemKinds::UNIT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#19
Solargraph::LanguageServer::CompletionItemKinds::VALUE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/completion_item_kinds.rb#13
Solargraph::LanguageServer::CompletionItemKinds::VARIABLE = T.let(T.unsafe(nil), Integer)

# The ErrorCode constants for the language server protocol.
#
# source://solargraph//lib/solargraph/language_server/error_codes.rb#7
module Solargraph::LanguageServer::ErrorCodes; end

# source://solargraph//lib/solargraph/language_server/error_codes.rb#12
Solargraph::LanguageServer::ErrorCodes::INTERNAL_ERROR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#11
Solargraph::LanguageServer::ErrorCodes::INVALID_PARAMS = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#9
Solargraph::LanguageServer::ErrorCodes::INVALID_REQUEST = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#10
Solargraph::LanguageServer::ErrorCodes::METHOD_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#8
Solargraph::LanguageServer::ErrorCodes::PARSE_ERROR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#17
Solargraph::LanguageServer::ErrorCodes::REQUEST_CANCELLED = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#14
Solargraph::LanguageServer::ErrorCodes::SERVER_ERROR_END = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#13
Solargraph::LanguageServer::ErrorCodes::SERVER_ERROR_START = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#15
Solargraph::LanguageServer::ErrorCodes::SERVER_NOT_INITIALIZED = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/error_codes.rb#16
Solargraph::LanguageServer::ErrorCodes::UNKNOWN_ERROR_CODE = T.let(T.unsafe(nil), Integer)

# The language server protocol's data provider. Hosts are responsible for
# querying the library and processing messages. They also provide thread
# safety for multi-threaded transports.
#
# source://solargraph//lib/solargraph/language_server/host.rb#13
class Solargraph::LanguageServer::Host
  include ::Solargraph::LanguageServer::UriHelpers
  include ::Solargraph::Logging
  include ::Solargraph::LanguageServer::Host::Dispatch
  include ::Observable

  # @return [Host] a new instance of Host
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#26
  def initialize; end

  # Flag a method as available for dynamic registration.
  #
  # @param method [String] The method name, e.g., 'textDocument/completion'
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#432
  def allow_registration(method); end

  # True if the specified LSP method can be dynamically registered.
  #
  # @param method [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#440
  def can_register?(method); end

  # Cancel the method with the specified ID.
  #
  # @param id [Integer]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#65
  def cancel(id); end

  # True if the host received a request to cancel the method with the
  # specified ID.
  #
  # @param id [Integer]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#74
  def cancel?(id); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#686
  def catalog; end

  # Update a document from the parameters of a textDocument/didChange
  # method.
  #
  # @param params [Hash]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#248
  def change(params); end

  # Delete the specified ID from the list of cancelled IDs if it exists.
  #
  # @param id [Integer]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#82
  def clear(id); end

  # @return [Hash{String => Hash{String => Boolean}}]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#692
  def client_capabilities; end

  # Sets the attribute client_capabilities
  #
  # @param value the value to set the attribute client_capabilities to.
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#24
  def client_capabilities=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#696
  def client_supports_progress?; end

  # Close the file specified by the URI.
  #
  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#195
  def close(uri); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#303
  def command_path; end

  # @param uri [String]
  # @param line [Integer]
  # @param column [Integer]
  # @return [Solargraph::SourceMap::Completion]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#538
  def completions_at(uri, line, column); end

  # Update the configuration options with the provided hash.
  #
  # @param update [Hash]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#50
  def configure(update); end

  # Respond to a notification that files were created in the workspace.
  # The libraries will determine whether the files should be merged; see
  # Solargraph::Library#create_from_disk.
  #
  # @param uris [Array<String>] The URIs of the files.
  # @return [Boolean] True if at least one library accepted at least one file.
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#132
  def create(*uris); end

  # @return [Hash{String => [Boolean,String]}]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#661
  def default_configuration; end

  # @param uri [String]
  # @param line [Integer]
  # @param column [Integer]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#552
  def definitions_at(uri, line, column); end

  # Delete the specified files from the library.
  #
  # @param uris [Array<String>] The file uris.
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#148
  def delete(*uris); end

  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#203
  def diagnose(uri); end

  # @param query [String]
  # @return [Array]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#604
  def document(query); end

  # @param uri [String]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#616
  def document_symbols(uri); end

  # Clear the message buffer and return the most recent data.
  #
  # @return [String] The most recent data or an empty string.
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#267
  def flush; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#341
  def folders; end

  # @param uri [String]
  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#681
  def folding_ranges(uri); end

  # @param uri [String]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#529
  def formatter_config(uri); end

  # @return [Bool] if has pending completion request
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#544
  def has_pending_completions?; end

  # Locate multiple pins that match a completion item. The first match is
  # based on the corresponding location in a library source if available.
  # Subsequent matches are based on path.
  #
  # @param params [Hash] A hash representation of a completion item
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#476
  def locate_pins(params); end

  # Open the specified file in the library.
  #
  # @param uri [String] The file uri.
  # @param text [String] The contents of the file.
  # @param version [Integer] A version number.
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#168
  def open(uri, text, version); end

  # True if the specified file is currently open in the library.
  #
  # @param uri [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#187
  def open?(uri); end

  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#178
  def open_from_disk(uri); end

  # @return [Hash{String => [Boolean, String]}]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#57
  def options; end

  # Get a list of IDs for server requests that are waiting for responses
  # from the client.
  #
  # @return [Array<Integer>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#656
  def pending_requests; end

  # Prepare a library for the specified directory.
  #
  # @param directory [String]
  # @param name [String, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#281
  def prepare(directory, name = T.unsafe(nil)); end

  # Prepare multiple folders.
  #
  # @param array [Array<Hash{String => String}>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#311
  def prepare_folders(array); end

  # Called by adapter, to handle the request
  #
  # @param request [Hash]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#89
  def process(request); end

  # @param query [String]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#588
  def query_symbols(query); end

  # Queue a message to be sent to the client.
  #
  # @param message [String] The message to send.
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#258
  def queue(message); end

  # @param uri [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#521
  def read_text(uri); end

  # Start processing a request from the client. After the message is
  # processed, caller is responsible for sending the response.
  #
  # @param request [Hash{String => unspecified}] The contents of the message.
  # @return [Solargraph::LanguageServer::Message::Base, nil] The message handler.
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#98
  def receive(request); end

  # @param uri [String]
  # @param line [Integer]
  # @param column [Integer]
  # @param strip [Boolean] Strip special characters from variable names
  # @param only [Boolean] If true, search current file only
  # @return [Array<Solargraph::Location>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#581
  def references_from(uri, line, column, strip: T.unsafe(nil), only: T.unsafe(nil)); end

  # Register the methods as capabilities with the client.
  # This method will avoid duplicating registrations and ignore methods
  # that were not flagged for dynamic registration by the client.
  #
  # @param methods [Array<String>] The methods to register
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#395
  def register_capabilities(methods); end

  # True if the specified method has been registered.
  #
  # @param method [String] The method name, e.g., 'textDocument/completion'
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#448
  def registered?(method); end

  # Remove a directory.
  #
  # @param directory [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#322
  def remove(directory); end

  # @param array [Array<Hash>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#334
  def remove_folders(array); end

  # @param query [String]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#596
  def search(query); end

  # Send a notification to the client.
  #
  # @param method [String] The message method
  # @param params [Hash] The method parameters
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#350
  def send_notification(method, params); end

  # Send a request to the client and execute the provided block to process
  # the response. If an ID is not provided, the host will use an auto-
  # incrementing integer.
  #
  # @param method [String] The message method
  # @param params [Hash] The method parameters
  # @param block [Proc] The block that processes the response
  # @return [void]
  # @yieldparam The [Hash] result sent by the client
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#372
  def send_request(method, params, &block); end

  # Send a notification to the client.
  #
  # @param text [String]
  # @param type [Integer] A MessageType constant
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#629
  def show_message(text, type = T.unsafe(nil)); end

  # Send a notification with optional responses.
  #
  # @param text [String]
  # @param type [Integer] A MessageType constant
  # @param actions [Array<String>] Response options for the client
  # @param block The block that processes the response
  # @return [void]
  # @yieldparam The [String] action received from the client
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#644
  def show_message_request(text, type, actions, &block); end

  # @param uri [String]
  # @param line [Integer]
  # @param column [Integer]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#570
  def signatures_at(uri, line, column); end

  # Start asynchronous process handling.
  #
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#39
  def start; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#457
  def stop; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#466
  def stopped?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#452
  def synchronizing?; end

  # @param uri [String]
  # @param line [Integer]
  # @param column [Integer]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#561
  def type_definitions_at(uri, line, column); end

  # Unregister the methods with the client.
  # This method will avoid duplicating unregistrations and ignore methods
  # that were not flagged for dynamic registration by the client.
  #
  # @param methods [Array<String>] The methods to unregister
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#415
  def unregister_capabilities(methods); end

  private

  # @return [Array<Integer>]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#703
  def cancelled; end

  # @param uri [String]
  # @param change [Hash]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#756
  def check_diff(uri, change); end

  # @return [Diagnoser]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#713
  def diagnoser; end

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#785
  def dynamic_capability_options; end

  # @param params [Hash]
  # @return [Source::Updater]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#734
  def generate_updater(params); end

  # @param library [Library]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#849
  def library_map(library); end

  # @return [MessageWorker]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#708
  def message_worker; end

  # @param path [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#727
  def normalize_separators(path); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#843
  def prepare_rename?; end

  # A hash of client requests by ID. The host uses this to keep track of
  # pending responses.
  #
  # @return [Hash{Integer => Solargraph::LanguageServer::Request}]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#721
  def requests; end

  # @param library [Library]
  # @param uuid [String, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host.rb#857
  def sync_library_map(library); end
end

# An asynchronous diagnosis reporter.
#
# source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#8
class Solargraph::LanguageServer::Host::Diagnoser
  # @param host [Host]
  # @return [Diagnoser] a new instance of Diagnoser
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#10
  def initialize(host); end

  # Schedule a file to be diagnosed.
  #
  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#21
  def schedule(uri); end

  # Start the diagnosis thread.
  #
  # @return [self, nil]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#42
  def start; end

  # Stop the diagnosis thread.
  #
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#28
  def stop; end

  # True is the diagnoser is stopped.
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#35
  def stopped?; end

  # Perform diagnoses.
  #
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#57
  def tick; end

  private

  # @return [Host]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#79
  def host; end

  # @return [Mutex]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#82
  def mutex; end

  # @return [::Array]
  #
  # source://solargraph//lib/solargraph/language_server/host/diagnoser.rb#85
  def queue; end
end

# Methods for associating sources with libraries via URIs.
#
# source://solargraph//lib/solargraph/language_server/host/dispatch.rb#8
module Solargraph::LanguageServer::Host::Dispatch
  # @abstract
  # @raise [NotImplementedError]
  # @return [Host::Diagnoser]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#11
  def diagnoser; end

  # Find an explicit library match for the given URI. An explicit match
  # means the libary's workspace includes the file.
  #
  # If a matching library is found, the source corresponding to the URI
  # gets attached to it.
  #
  # @param uri [String]
  # @raise [FileNotFoundError] if the source could not be attached.
  # @return [Library, nil]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#65
  def explicit_library_for(uri); end

  # @return [Library]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#116
  def generic_library; end

  # Get a generic library for the given URI and attach the corresponding
  # source.
  #
  # @param uri [String]
  # @raise [FileNotFoundError] if the source could not be attached.
  # @return [Library]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#110
  def generic_library_for(uri); end

  # Find an implicit library match for the given URI. An implicit match
  # means the file is located inside the library's workspace directory,
  # regardless of whether the workspace is configured to include it.
  #
  # If a matching library is found, the source corresponding to the URI
  # gets attached to it.
  #
  # @param uri [String]
  # @raise [FileNotFoundError] if the source could not be attached.
  # @return [Library, nil]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#87
  def implicit_library_for(uri); end

  # @return [::Array<Library>]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#25
  def libraries; end

  # Find the best libary match for the given URI.
  #
  # @param uri [String]
  # @return [Library]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#46
  def library_for(uri); end

  # @return [Hash{String => undefined}]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#99
  def options; end

  # @return [Sources]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#16
  def sources; end

  # @param library [Solargraph::Library]
  # @param progress [Solargraph::LanguageServer::Progress, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#124
  def update(progress); end

  # The Sources observer callback that merges a source into the host's
  # libraries when it gets updated.
  #
  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/dispatch.rb#34
  def update_libraries(uri); end
end

# A serial worker Thread to handle incoming messages.
#
# source://solargraph//lib/solargraph/language_server/host/message_worker.rb#8
class Solargraph::LanguageServer::Host::MessageWorker
  # @param host [Host]
  # @return [MessageWorker] a new instance of MessageWorker
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#23
  def initialize(host); end

  # pending handle messages
  #
  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#32
  def messages; end

  # @param message [Hash] The message to handle. Will be forwarded to Host#receive
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#47
  def queue(message); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#55
  def start; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#41
  def stop; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#36
  def stopped?; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#64
  def tick; end

  private

  # @return [Hash, nil]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#81
  def cancel_message; end

  # @return [Hash, nil]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#76
  def next_message; end

  # @return [Hash, nil]
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#92
  def next_priority; end

  # True if the message requires a previous update to have executed in
  # order to work correctly.
  #
  # @param msg [Hash{String => Object}]
  # @return [Object]
  # @todo need boolish type from RBS
  #
  # source://solargraph//lib/solargraph/language_server/host/message_worker.rb#106
  def version_dependent?(msg); end
end

# source://solargraph//lib/solargraph/language_server/host/message_worker.rb#9
Solargraph::LanguageServer::Host::MessageWorker::UPDATE_METHODS = T.let(T.unsafe(nil), Array)

# A Host class for managing sources.
#
# source://solargraph//lib/solargraph/language_server/host/sources.rb#10
class Solargraph::LanguageServer::Host::Sources
  include ::Observable
  include ::Solargraph::LanguageServer::UriHelpers

  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#16
  def add_uri(uri); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#79
  def clear; end

  # Close the source with the given URI.
  #
  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#67
  def close(uri); end

  # Find the source with the given URI.
  #
  # @param uri [String]
  # @raise [FileNotFoundError] if the URI does not match an open source.
  # @return [Solargraph::Source]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#59
  def find(uri); end

  # True if a source with given URI is currently open.
  #
  # @param uri [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#74
  def include?(uri); end

  # Open a source.
  #
  # @param uri [String]
  # @param text [String]
  # @param version [Integer]
  # @return [Source]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#26
  def open(uri, text, version); end

  # @param uri [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#34
  def open_from_disk(uri); end

  # Update an existing source.
  #
  # @param uri [String]
  # @param updater [Source::Updater]
  # @raise [FileNotFoundError] if the URI does not match an open source.
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#46
  def update(uri, updater); end

  private

  # @return [Hash{String => Solargraph::Source}]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#86
  def open_source_hash; end

  # An array of source URIs that are waiting to finish synchronizing.
  #
  # @return [::Array<String>]
  #
  # source://solargraph//lib/solargraph/language_server/host/sources.rb#93
  def queue; end
end

# The Message namespace contains classes that implement language server
# protocol methods.
#
# source://solargraph//lib/solargraph/language_server/message.rb#10
module Solargraph::LanguageServer::Message
  class << self
    # Register a method name and message for handling by the language
    # server.
    #
    # @example
    #   Message.register 'initialize', Solargraph::Message::Initialize
    # @param path [String] The method name
    # @param message_class [Class<Message::Base>] The message class
    # @return [void]
    #
    # source://solargraph//lib/solargraph/language_server/message.rb#34
    def register(path, message_class); end

    # @param path [String]
    # @return [Class<Solargraph::LanguageServer::Message::Base>]
    #
    # source://solargraph//lib/solargraph/language_server/message.rb#40
    def select(path); end

    private

    # @return [Hash{String => Class<Message::Base>}]
    #
    # source://solargraph//lib/solargraph/language_server/message.rb#53
    def method_map; end
  end
end

# source://solargraph//lib/solargraph/language_server/message/base.rb#6
class Solargraph::LanguageServer::Message::Base
  # @param host [Solargraph::LanguageServer::Host]
  # @param request [Hash]
  # @return [Base] a new instance of Base
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#30
  def initialize(host, request); end

  # @return [Hash, nil]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#26
  def error; end

  # @return [Solargraph::LanguageServer::Host]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#8
  def host; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#11
  def id; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#17
  def method; end

  # @return [Hash{String => undefined}]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#20
  def params; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#40
  def post_initialize; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#43
  def process; end

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#14
  def request; end

  # @return [Hash, Array, nil]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#23
  def result; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#62
  def send_response; end

  # @param code [Integer] See Solargraph::LanguageServer::ErrorCodes
  # @param message [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#54
  def set_error(code, message); end

  # @param data [Hash, Array, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#47
  def set_result(data); end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/base.rb#83
  def accept_or_cancel; end
end

# source://solargraph//lib/solargraph/language_server/message/cancel_request.rb#6
class Solargraph::LanguageServer::Message::CancelRequest < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/cancel_request.rb#7
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/completion_item.rb#6
module Solargraph::LanguageServer::Message::CompletionItem; end

# completionItem/resolve message handler
#
# source://solargraph//lib/solargraph/language_server/message/completion_item/resolve.rb#9
class Solargraph::LanguageServer::Message::CompletionItem::Resolve < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/completion_item/resolve.rb#10
  def process; end

  private

  # @param pins [Array<Pin::Base>]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/message/completion_item/resolve.rb#43
  def join_docs(pins); end

  # @param text [String]
  # @return [Hash{Symbol => String}, nil]
  #
  # source://solargraph//lib/solargraph/language_server/message/completion_item/resolve.rb#33
  def markup_content(text); end

  # @param pins [Array<Pin::Base>]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/message/completion_item/resolve.rb#19
  def merge(pins); end
end

# source://solargraph//lib/solargraph/language_server/message/exit_notification.rb#6
class Solargraph::LanguageServer::Message::ExitNotification < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/exit_notification.rb#7
  def process; end
end

# Messages in the Extended module are custom to the Solargraph
# implementation of the language server. In the protocol, the method
# names should start with "$/" so clients that don't recognize them can
# ignore them, as per the LSP specification.
#
# source://solargraph//lib/solargraph/language_server/message/extended.rb#11
module Solargraph::LanguageServer::Message::Extended; end

# Check if a more recent version of the Solargraph gem is available.
# Notify the client when an update exists. If the `verbose` parameter
# is true, notify the client when the gem is up to date.
#
# source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#18
class Solargraph::LanguageServer::Message::Extended::CheckGemVersion < ::Solargraph::LanguageServer::Message::Base
  # @param host [Solargraph::LanguageServer::Host]
  # @param request [Hash]
  # @param current [Gem::Version]
  # @param available [Gem::Version, nil]
  # @return [CheckGemVersion] a new instance of CheckGemVersion
  #
  # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#36
  def initialize(host, request, current: T.unsafe(nil), available: T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#42
  def process; end

  private

  # @return [Gem::Version]
  #
  # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#81
  def available; end

  # @return [Gem::Version]
  #
  # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#78
  def current; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#109
  def error; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#104
  def fetched?; end

  class << self
    # @return [Gem::SpecFetcher]
    #
    # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#20
    def fetcher; end

    # @param obj [Gem::SpecFetcher]
    # @return [Gem::SpecFetcher]
    #
    # source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#26
    def fetcher=(obj); end
  end
end

# source://solargraph//lib/solargraph/language_server/message/extended/check_gem_version.rb#30
Solargraph::LanguageServer::Message::Extended::CheckGemVersion::GEM_ZERO = T.let(T.unsafe(nil), Gem::Version)

# source://solargraph//lib/solargraph/language_server/message/extended/document.rb#7
class Solargraph::LanguageServer::Message::Extended::Document < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/extended/document.rb#8
  def process; end
end

# Update YARD documentation for installed gems. If the `rebuild`
# parameter is true, rebuild existing yardocs.
#
# source://solargraph//lib/solargraph/language_server/message/extended/document_gems.rb#12
class Solargraph::LanguageServer::Message::Extended::DocumentGems < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/extended/document_gems.rb#13
  def process; end
end

# Update core Ruby documentation.
#
# source://solargraph//lib/solargraph/language_server/message/extended/download_core.rb#11
class Solargraph::LanguageServer::Message::Extended::DownloadCore < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/extended/download_core.rb#12
  def process; end
end

# Update YARD documentation for installed gems. If the `rebuild`
# parameter is true, rebuild existing yardocs.
#
# source://solargraph//lib/solargraph/language_server/message/extended/environment.rb#10
class Solargraph::LanguageServer::Message::Extended::Environment < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/extended/environment.rb#11
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/extended/search.rb#7
class Solargraph::LanguageServer::Message::Extended::Search < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/extended/search.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/initialize.rb#6
class Solargraph::LanguageServer::Message::Initialize < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#7
  def process; end

  private

  # @sg-ignore
  #
  # @param section [String]
  # @param capability [String]
  # @return [Boolean]
  # @todo Need support for RBS' boolish "type", which doesn't
  #   enforce strict true/false-ness
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#180
  def dynamic_registration_for?(section, capability); end

  # @return [Hash{Symbol => BasicObject}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#71
  def static_code_action; end

  # @return [Hash{Symbol => undefined}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#60
  def static_completion; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#129
  def static_definitions; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#106
  def static_document_formatting; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#114
  def static_document_symbols; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#161
  def static_folding_range; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#169
  def static_highlights; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#98
  def static_hover; end

  # @return [Hash{Symbol => Hash{Symbol => String, Array<String>}}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#88
  def static_on_type_formatting; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#153
  def static_references; end

  # @return [Hash{Symbol => Hash{Symbol => Boolean}}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#145
  def static_rename; end

  # @return [Hash{Symbol => BasicObject}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#79
  def static_signature_help; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#137
  def static_type_definitions; end

  # @return [Hash{Symbol => Boolean}]
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#122
  def static_workspace_symbols; end

  # @sg-ignore
  #
  # @return [Boolean]
  # @todo '?' methods should type like RBS 'boolish' rather than a strict true or false
  #
  # source://solargraph//lib/solargraph/language_server/message/initialize.rb#52
  def support_workspace_folders?; end
end

# source://solargraph//lib/solargraph/language_server/message/initialized.rb#6
class Solargraph::LanguageServer::Message::Initialized < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/initialized.rb#7
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/method_not_found.rb#6
class Solargraph::LanguageServer::Message::MethodNotFound < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/method_not_found.rb#7
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/method_not_implemented.rb#6
class Solargraph::LanguageServer::Message::MethodNotImplemented < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/method_not_implemented.rb#7
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/shutdown.rb#6
class Solargraph::LanguageServer::Message::Shutdown < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/shutdown.rb#7
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document.rb#6
module Solargraph::LanguageServer::Message::TextDocument; end

# source://solargraph//lib/solargraph/language_server/message/text_document/base.rb#7
class Solargraph::LanguageServer::Message::TextDocument::Base < ::Solargraph::LanguageServer::Message::Base
  include ::Solargraph::LanguageServer::UriHelpers

  # Returns the value of attribute filename.
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/base.rb#10
  def filename; end

  # source://solargraph//lib/solargraph/language_server/message/text_document/base.rb#12
  def post_initialize; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/completion.rb#7
class Solargraph::LanguageServer::Message::TextDocument::Completion < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # @param incomplete [Boolean]
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/completion.rb#46
  def empty_result(incomplete = T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/language_server/message/text_document/completion.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/definition.rb#4
class Solargraph::LanguageServer::Message::TextDocument::Definition < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/definition.rb#5
  def process; end

  private

  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/definition.rb#14
  def code_location; end

  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/definition.rb#26
  def require_location; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/did_change.rb#7
class Solargraph::LanguageServer::Message::TextDocument::DidChange < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/did_change.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/did_close.rb#7
class Solargraph::LanguageServer::Message::TextDocument::DidClose < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/did_close.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/did_open.rb#7
class Solargraph::LanguageServer::Message::TextDocument::DidOpen < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/did_open.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/did_save.rb#7
class Solargraph::LanguageServer::Message::TextDocument::DidSave < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/did_save.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/document_highlight.rb#4
class Solargraph::LanguageServer::Message::TextDocument::DocumentHighlight < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/document_highlight.rb#5
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/document_symbol.rb#3
class Solargraph::LanguageServer::Message::TextDocument::DocumentSymbol < ::Solargraph::LanguageServer::Message::Base
  include ::Solargraph::LanguageServer::UriHelpers

  # source://solargraph//lib/solargraph/language_server/message/text_document/document_symbol.rb#6
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/folding_range.rb#9
class Solargraph::LanguageServer::Message::TextDocument::FoldingRange < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/folding_range.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#10
class Solargraph::LanguageServer::Message::TextDocument::Formatting < ::Solargraph::LanguageServer::Message::TextDocument::Base
  include ::Solargraph::Diagnostics::RubocopHelpers

  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#13
  def process; end

  private

  # @param file_uri [String]
  # @param config [Hash{String => String}]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#67
  def cli_args(file_uri, config); end

  # @param file_uri [String]
  # @return [Hash{String => undefined}]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#57
  def config_for(file_uri); end

  # @param value [Array, String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#100
  def cop_list(value); end

  # @param original [String]
  # @param result [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#109
  def format(original, result); end

  # @sg-ignore
  #
  # @param config [Hash{String => String}]
  # @return [Class<RuboCop::Formatter::BaseFormatter>]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#87
  def formatter_class(config); end

  # @param corrections [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/formatting.rb#44
  def log_corrections(corrections); end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/hover.rb#7
class Solargraph::LanguageServer::Message::TextDocument::Hover < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/hover.rb#8
  def process; end

  private

  # @param contents [Array<String>]
  # @return [Hash{Symbol => Hash{Symbol => String}}, nil]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/hover.rb#42
  def contents_or_nil(contents); end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/on_type_formatting.rb#7
class Solargraph::LanguageServer::Message::TextDocument::OnTypeFormatting < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/on_type_formatting.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/prepare_rename.rb#4
class Solargraph::LanguageServer::Message::TextDocument::PrepareRename < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/prepare_rename.rb#5
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/references.rb#4
class Solargraph::LanguageServer::Message::TextDocument::References < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/references.rb#5
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/rename.rb#4
class Solargraph::LanguageServer::Message::TextDocument::Rename < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/rename.rb#5
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/signature_help.rb#7
class Solargraph::LanguageServer::Message::TextDocument::SignatureHelp < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/signature_help.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/text_document/type_definition.rb#4
class Solargraph::LanguageServer::Message::TextDocument::TypeDefinition < ::Solargraph::LanguageServer::Message::TextDocument::Base
  # source://solargraph//lib/solargraph/language_server/message/text_document/type_definition.rb#5
  def process; end

  private

  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/language_server/message/text_document/type_definition.rb#14
  def code_location; end
end

# source://solargraph//lib/solargraph/language_server/message/workspace.rb#6
module Solargraph::LanguageServer::Message::Workspace; end

# source://solargraph//lib/solargraph/language_server/message/workspace/did_change_configuration.rb#4
class Solargraph::LanguageServer::Message::Workspace::DidChangeConfiguration < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/workspace/did_change_configuration.rb#5
  def process; end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/workspace/did_change_configuration.rb#15
  def register_from_options; end
end

# source://solargraph//lib/solargraph/language_server/message/workspace/did_change_watched_files.rb#4
class Solargraph::LanguageServer::Message::Workspace::DidChangeWatchedFiles < ::Solargraph::LanguageServer::Message::Base
  include ::Solargraph::LanguageServer::UriHelpers

  # source://solargraph//lib/solargraph/language_server/message/workspace/did_change_watched_files.rb#11
  def process; end
end

# source://solargraph//lib/solargraph/language_server/message/workspace/did_change_watched_files.rb#6
Solargraph::LanguageServer::Message::Workspace::DidChangeWatchedFiles::CHANGED = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/message/workspace/did_change_watched_files.rb#5
Solargraph::LanguageServer::Message::Workspace::DidChangeWatchedFiles::CREATED = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/message/workspace/did_change_watched_files.rb#7
Solargraph::LanguageServer::Message::Workspace::DidChangeWatchedFiles::DELETED = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/message/workspace/did_change_workspace_folders.rb#4
class Solargraph::LanguageServer::Message::Workspace::DidChangeWorkspaceFolders < ::Solargraph::LanguageServer::Message::Base
  # source://solargraph//lib/solargraph/language_server/message/workspace/did_change_workspace_folders.rb#5
  def process; end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/workspace/did_change_workspace_folders.rb#13
  def add_folders; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/message/workspace/did_change_workspace_folders.rb#19
  def remove_folders; end
end

# source://solargraph//lib/solargraph/language_server/message/workspace/workspace_symbol.rb#3
class Solargraph::LanguageServer::Message::Workspace::WorkspaceSymbol < ::Solargraph::LanguageServer::Message::Base
  include ::Solargraph::LanguageServer::UriHelpers

  # source://solargraph//lib/solargraph/language_server/message/workspace/workspace_symbol.rb#6
  def process; end
end

# The MessageType constants from the language server specification.
#
# source://solargraph//lib/solargraph/language_server/message_types.rb#7
module Solargraph::LanguageServer::MessageTypes; end

# source://solargraph//lib/solargraph/language_server/message_types.rb#8
Solargraph::LanguageServer::MessageTypes::ERROR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/message_types.rb#10
Solargraph::LanguageServer::MessageTypes::INFO = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/message_types.rb#11
Solargraph::LanguageServer::MessageTypes::LOG = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/message_types.rb#9
Solargraph::LanguageServer::MessageTypes::WARNING = T.let(T.unsafe(nil), Integer)

# Progress notification handling for language server hosts.
#
# source://solargraph//lib/solargraph/language_server/progress.rb#9
class Solargraph::LanguageServer::Progress
  # @param title [String]
  # @return [Progress] a new instance of Progress
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#33
  def initialize(title); end

  # @param message [String]
  # @param percentage [Integer]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#43
  def begin(message, percentage); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#79
  def created?; end

  # @param message [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#60
  def finish(message); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#83
  def finished?; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#21
  def kind; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#24
  def message; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#27
  def percentage; end

  # @param message [String]
  # @param percentage [Integer]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#52
  def report(message, percentage); end

  # @param host [Solargraph::LanguageServer::Host]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#69
  def send(host); end

  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#30
  def status; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#18
  def title; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#15
  def uuid; end

  private

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#99
  def build; end

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#110
  def build_value; end

  # @param host [Solargraph::LanguageServer::Host]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#91
  def create(host); end

  # @param host [Host]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#125
  def keep_alive(host); end

  # @return [Mutex]
  #
  # source://solargraph//lib/solargraph/language_server/progress.rb#138
  def mutex; end
end

# source://solargraph//lib/solargraph/language_server/progress.rb#11
Solargraph::LanguageServer::Progress::CREATED = T.let(T.unsafe(nil), Symbol)

# source://solargraph//lib/solargraph/language_server/progress.rb#12
Solargraph::LanguageServer::Progress::FINISHED = T.let(T.unsafe(nil), Symbol)

# source://solargraph//lib/solargraph/language_server/progress.rb#10
Solargraph::LanguageServer::Progress::WAITING = T.let(T.unsafe(nil), Symbol)

# source://solargraph//lib/solargraph/language_server/request.rb#5
class Solargraph::LanguageServer::Request
  # @param id [Integer]
  # @param &block The block that processes the client's response
  # @return [Request] a new instance of Request
  #
  # source://solargraph//lib/solargraph/language_server/request.rb#8
  def initialize(id, &block); end

  # @param result [Object]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/request.rb#15
  def process(result); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/request.rb#20
  def send_response; end
end

# The SymbolKind constants for the language server protocol.
#
# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#7
module Solargraph::LanguageServer::SymbolKinds; end

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#25
Solargraph::LanguageServer::SymbolKinds::ARRAY = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#24
Solargraph::LanguageServer::SymbolKinds::BOOLEAN = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#12
Solargraph::LanguageServer::SymbolKinds::CLASS = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#21
Solargraph::LanguageServer::SymbolKinds::CONSTANT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#16
Solargraph::LanguageServer::SymbolKinds::CONSTRUCTOR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#17
Solargraph::LanguageServer::SymbolKinds::ENUM = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#29
Solargraph::LanguageServer::SymbolKinds::ENUM_MEMBER = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#31
Solargraph::LanguageServer::SymbolKinds::EVENT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#15
Solargraph::LanguageServer::SymbolKinds::FIELD = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#8
Solargraph::LanguageServer::SymbolKinds::FILE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#19
Solargraph::LanguageServer::SymbolKinds::FUNCTION = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#18
Solargraph::LanguageServer::SymbolKinds::INTERFACE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#27
Solargraph::LanguageServer::SymbolKinds::KEY = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#13
Solargraph::LanguageServer::SymbolKinds::METHOD = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#9
Solargraph::LanguageServer::SymbolKinds::MODULE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#10
Solargraph::LanguageServer::SymbolKinds::NAMESPACE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#28
Solargraph::LanguageServer::SymbolKinds::NULL = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#23
Solargraph::LanguageServer::SymbolKinds::NUMBER = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#26
Solargraph::LanguageServer::SymbolKinds::OBJECT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#32
Solargraph::LanguageServer::SymbolKinds::OPERATOR = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#11
Solargraph::LanguageServer::SymbolKinds::PACKAGE = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#14
Solargraph::LanguageServer::SymbolKinds::PROPERTY = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#22
Solargraph::LanguageServer::SymbolKinds::STRING = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#30
Solargraph::LanguageServer::SymbolKinds::STRUCT = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#33
Solargraph::LanguageServer::SymbolKinds::TYPE_PARAMETER = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/language_server/symbol_kinds.rb#20
Solargraph::LanguageServer::SymbolKinds::VARIABLE = T.let(T.unsafe(nil), Integer)

# The Transport namespace contains concrete implementations of
# communication protocols for language servers.
#
# source://solargraph//lib/solargraph/language_server/transport.rb#8
module Solargraph::LanguageServer::Transport; end

# A common module for running language servers in Backport.
#
# source://solargraph//lib/solargraph/language_server/transport/adapter.rb#10
module Solargraph::LanguageServer::Transport::Adapter
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/adapter.rb#33
  def closing; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/adapter.rb#22
  def opening; end

  # @param data [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/adapter.rb#39
  def receiving(data); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/adapter.rb#44
  def update; end

  private

  # @param request [Hash]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/adapter.rb#57
  def process(request); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/adapter.rb#62
  def shutdown; end
end

# source://solargraph//lib/solargraph/language_server/transport/data_reader.rb#8
class Solargraph::LanguageServer::Transport::DataReader
  # @return [DataReader] a new instance of DataReader
  #
  # source://solargraph//lib/solargraph/language_server/transport/data_reader.rb#9
  def initialize; end

  # Process raw data received from the client. The data will be parsed
  # into messages based on the JSON-RPC protocol. Each message will be
  # passed to the block declared via set_message_handler. Incomplete data
  # will be buffered and subsequent data will be appended to the buffer.
  #
  # @param data [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/data_reader.rb#31
  def receive(data); end

  # Declare a block to be executed for each message received from the
  # client.
  #
  # @return [void]
  # @yieldparam The [Hash] message received from the client
  #
  # source://solargraph//lib/solargraph/language_server/transport/data_reader.rb#20
  def set_message_handler(&block); end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/data_reader.rb#58
  def parse_message_from_buffer; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/language_server/transport/data_reader.rb#45
  def prepare_to_parse_message; end
end

# Methods to handle conversions between file URIs and paths.
#
# source://solargraph//lib/solargraph/language_server/uri_helpers.rb#9
module Solargraph::LanguageServer::UriHelpers
  private

  # Decode text from a URI path component in LSP.
  #
  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#44
  def decode(text); end

  # Encode text to be used as a URI path component in LSP.
  #
  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#32
  def encode(text); end

  # Convert a file path to a URI.
  #
  # @param file [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#24
  def file_to_uri(file); end

  # Convert a file URI to a path.
  #
  # @param uri [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#16
  def uri_to_file(uri); end

  class << self
    # Decode text from a URI path component in LSP.
    #
    # @param text [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#44
    def decode(text); end

    # Encode text to be used as a URI path component in LSP.
    #
    # @param text [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#32
    def encode(text); end

    # Convert a file path to a URI.
    #
    # @param file [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#24
    def file_to_uri(file); end

    # Convert a file URI to a path.
    #
    # @param uri [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/language_server/uri_helpers.rb#16
    def uri_to_file(uri); end
  end
end

# A Library handles coordination between a Workspace and an ApiMap.
#
# source://solargraph//lib/solargraph/library.rb#10
class Solargraph::Library
  include ::Solargraph::Logging
  include ::Observable

  # @param workspace [Solargraph::Workspace]
  # @param name [String, nil]
  # @return [Library] a new instance of Library
  #
  # source://solargraph//lib/solargraph/library.rb#28
  def initialize(workspace = T.unsafe(nil), name = T.unsafe(nil)); end

  # Attach a source to the library.
  #
  # The attached source does not need to be a part of the workspace. The
  # library will include it in the ApiMap while it's attached. Only one
  # source can be attached to the library at a time.
  #
  # @param source [Source, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#59
  def attach(source); end

  # True if the specified file is currently attached.
  #
  # @param filename [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/library.rb#75
  def attached?(filename); end

  # @return [Bench]
  #
  # source://solargraph//lib/solargraph/library.rb#431
  def bench; end

  # @return [LanguageServer::Progress, nil]
  #
  # source://solargraph//lib/solargraph/library.rb#24
  def cache_progress; end

  # Update the ApiMap from the library's workspace and open files.
  #
  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#426
  def catalog; end

  # Close a file in the library. Closing a file will make it unavailable for
  # checkout although it may still exist in the workspace.
  #
  # @param filename [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#147
  def close(filename); end

  # Get completion suggestions at the specified file and location.
  #
  # @param filename [String] The file to analyze
  # @param line [Integer] The zero-based line number
  # @param column [Integer] The zero-based column number
  # @return [SourceMap::Completion, nil]
  # @todo Take a Location instead of filename/line/column
  #
  # source://solargraph//lib/solargraph/library.rb#161
  def completions_at(filename, line, column); end

  # True if the specified file is included in the workspace (but not
  # necessarily open).
  #
  # @param filename [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/library.rb#95
  def contain?(filename); end

  # Create a source to be added to the workspace. The file is ignored if it is
  # neither open in the library nor included in the workspace.
  #
  # @param filename [String]
  # @param text [String] The contents of the file
  # @return [Boolean] True if the file was added to the workspace.
  #
  # source://solargraph//lib/solargraph/library.rb#105
  def create(filename, text); end

  # Create file sources from files on disk. A file is ignored if it is
  # neither open in the library nor included in the workspace.
  #
  # @param filenames [Array<String>]
  # @return [Boolean] True if at least one file was added to the workspace.
  #
  # source://solargraph//lib/solargraph/library.rb#117
  def create_from_disk(*filenames); end

  # @return [Source, nil]
  #
  # source://solargraph//lib/solargraph/library.rb#21
  def current; end

  # Get definition suggestions for the expression at the specified file and
  # location.
  #
  # @param filename [String] The file to analyze
  # @param line [Integer] The zero-based line number
  # @param column [Integer] The zero-based column number
  # @return [Array<Solargraph::Pin::Base>, nil]
  # @todo Take filename/position instead of filename/line/column
  #
  # source://solargraph//lib/solargraph/library.rb#178
  def definitions_at(filename, line, column); end

  # Delete files from the library. Deleting a file will make it unavailable
  # for checkout and optionally remove it from the workspace unless the
  # workspace configuration determines that it should still exist.
  #
  # @param filenames [Array<String>]
  # @return [Boolean] True if any file was deleted
  #
  # source://solargraph//lib/solargraph/library.rb#132
  def delete(*filenames); end

  # Detach the specified file if it is currently attached to the library.
  #
  # @param filename [String]
  # @return [Boolean] True if the specified file was detached
  #
  # source://solargraph//lib/solargraph/library.rb#84
  def detach(filename); end

  # Get diagnostics about a file.
  #
  # @param filename [String]
  # @return [Array<Hash>]
  #
  # source://solargraph//lib/solargraph/library.rb#391
  def diagnose(filename); end

  # @param query [String]
  # @return [Enumerable<YARD::CodeObjects::Base>]
  # @return [Array(ApiMap, Enumerable<Pin::Base>)]
  #
  # source://solargraph//lib/solargraph/library.rb#332
  def document(query); end

  # Get an array of document symbols.
  #
  # Document symbols are composed of namespace, method, and constant pins.
  # The results of this query are appropriate for building the response to a
  # textDocument/documentSymbol message in the language server protocol.
  #
  # @param filename [String]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/library.rb#361
  def document_symbols(filename); end

  # @return [Set<String>]
  #
  # source://solargraph//lib/solargraph/library.rb#497
  def external_requires; end

  # Get an array of pins that match a path.
  #
  # @param path [String]
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/library.rb#324
  def get_path_pins(path); end

  # source://solargraph//lib/solargraph/library.rb#38
  def inspect; end

  # Get the pins at the specified location or nil if the pin does not exist.
  #
  # @param location [Location]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/library.rb#290
  def locate_pins(location); end

  # Match a require reference to a file.
  #
  # @param location [Location]
  # @return [Location, nil]
  #
  # source://solargraph//lib/solargraph/library.rb#299
  def locate_ref(location); end

  # @return [self]
  #
  # source://solargraph//lib/solargraph/library.rb#483
  def map!; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/library.rb#465
  def mapped?; end

  # Try to merge a source into the library's workspace. If the workspace is
  # not configured to include the source, it gets ignored.
  #
  # @param source [Source]
  # @return [Boolean] True if the source was merged into the workspace.
  #
  # source://solargraph//lib/solargraph/library.rb#454
  def merge(source); end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/library.rb#18
  def name; end

  # @return [SourceMap, Boolean]
  #
  # source://solargraph//lib/solargraph/library.rb#470
  def next_map; end

  # True if the specified file is currently attached.
  #
  # @param filename [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/library.rb#78
  def open?(filename); end

  # @param path [String]
  # @return [Enumerable<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/library.rb#368
  def path_pins(path); end

  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/library.rb#492
  def pins; end

  # Get an array of all symbols in the workspace that match the query.
  #
  # @param query [String]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/library.rb#348
  def query_symbols(query); end

  # Get the current text of a file in the library.
  #
  # @param filename [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/library.rb#382
  def read_text(filename); end

  # @param filename [String]
  # @param line [Integer]
  # @param column [Integer]
  # @param strip [Boolean] Strip special characters from variable names
  # @param only [Boolean] Search for references in the current file only
  # @return [Array<Solargraph::Location>]
  # @todo Take a Location instead of filename/line/column
  #
  # source://solargraph//lib/solargraph/library.rb#243
  def references_from(filename, line, column, strip: T.unsafe(nil), only: T.unsafe(nil)); end

  # @param query [String]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/library.rb#339
  def search(query); end

  # Get signature suggestions for the method at the specified file and
  # location.
  #
  # @param filename [String] The file to analyze
  # @param line [Integer] The zero-based line number
  # @param column [Integer] The zero-based column number
  # @return [Array<Solargraph::Pin::Base>]
  # @todo Take filename/position instead of filename/line/column
  #
  # source://solargraph//lib/solargraph/library.rb#229
  def signatures_at(filename, line, column); end

  # @return [Hash{String => SourceMap}]
  #
  # source://solargraph//lib/solargraph/library.rb#461
  def source_map_hash; end

  # @return [Array<SourceMap>]
  #
  # source://solargraph//lib/solargraph/library.rb#374
  def source_maps; end

  # True if the ApiMap is up to date with the library's workspace and open
  # files.
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/library.rb#47
  def synchronized?; end

  # Get type definition suggestions for the expression at the specified file and
  # location.
  #
  # @param filename [String] The file to analyze
  # @param line [Integer] The zero-based line number
  # @param column [Integer] The zero-based column number
  # @return [Array<Solargraph::Pin::Base>, nil]
  # @todo Take filename/position instead of filename/line/column
  #
  # source://solargraph//lib/solargraph/library.rb#212
  def type_definitions_at(filename, line, column); end

  # @return [Solargraph::Workspace]
  #
  # source://solargraph//lib/solargraph/library.rb#15
  def workspace; end

  private

  # @return [ApiMap]
  #
  # source://solargraph//lib/solargraph/library.rb#531
  def api_map; end

  # @return [Set<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/library.rb#575
  def cache_errors; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#580
  def cache_next_gemspec; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/library.rb#615
  def cacheable_specs; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#660
  def end_cache_progress; end

  # @param source_map [SourceMap]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#510
  def find_external_requires(source_map); end

  # @param filename [String]
  # @param error [FileNotFoundError]
  # @return [nil]
  #
  # source://solargraph//lib/solargraph/library.rb#552
  def handle_file_not_found(filename, error); end

  # @param source [Source, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#563
  def maybe_map(source); end

  # @return [Mutex]
  #
  # source://solargraph//lib/solargraph/library.rb#526
  def mutex; end

  # @return [Array<Gem::Specification>]
  #
  # source://solargraph//lib/solargraph/library.rb#626
  def queued_gemspec_cache; end

  # Get the source for an open file or create a new source if the file
  # exists on disk. Sources created from disk are not added to the open
  # workspace files, i.e., the version on disk remains the authoritative
  # version.
  #
  # @param filename [String]
  # @raise [FileNotFoundError] if the file does not exist
  # @return [Solargraph::Source]
  #
  # source://solargraph//lib/solargraph/library.rb#543
  def read(filename); end

  # @param gem_name [String]
  # @param pending [Integer]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#633
  def report_cache_progress(gem_name, pending); end

  # @return [Hash{String => Array<String>}]
  #
  # source://solargraph//lib/solargraph/library.rb#504
  def source_map_external_require_hash; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/library.rb#668
  def sync_catalog; end

  class << self
    # Create a library from a directory.
    #
    # @param directory [String] The path to be used for the workspace
    # @param name [String, nil]
    # @return [Solargraph::Library]
    #
    # source://solargraph//lib/solargraph/library.rb#445
    def load(directory = T.unsafe(nil), name = T.unsafe(nil)); end
  end
end

# A pointer to a section of source text identified by its filename
# and Range.
#
# source://solargraph//lib/solargraph/location.rb#7
class Solargraph::Location
  include ::Solargraph::Equality

  # @param filename [String]
  # @param range [Solargraph::Range]
  # @return [Location] a new instance of Location
  #
  # source://solargraph//lib/solargraph/location.rb#18
  def initialize(filename, range); end

  # @param other [self]
  #
  # source://solargraph//lib/solargraph/location.rb#29
  def <=>(other); end

  # @param other [BasicObject]
  #
  # source://solargraph//lib/solargraph/location.rb#72
  def ==(other); end

  # @param location [self]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/location.rb#43
  def contain?(location); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/location.rb#11
  def filename; end

  # source://solargraph//lib/solargraph/location.rb#47
  def inspect; end

  # @return [Solargraph::Range]
  #
  # source://solargraph//lib/solargraph/location.rb#14
  def range; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/location.rb#38
  def rbs?; end

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/location.rb#56
  def to_hash; end

  # source://solargraph//lib/solargraph/location.rb#51
  def to_s; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/location.rb#24
  def equality_fields; end

  class << self
    # @param node [Parser::AST::Node, nil]
    # @return [Location, nil]
    #
    # source://solargraph//lib/solargraph/location.rb#65
    def from_node(node); end
  end
end

# source://solargraph//lib/solargraph/logging.rb#6
module Solargraph::Logging
  private

  # @return [Logger]
  #
  # source://solargraph//lib/solargraph/logging.rb#33
  def logger; end

  class << self
    # @return [Logger]
    #
    # source://solargraph//lib/solargraph/logging.rb#33
    def logger; end
  end
end

# source://solargraph//lib/solargraph/logging.rb#7
Solargraph::Logging::DEFAULT_LOG_LEVEL = T.let(T.unsafe(nil), Integer)

# source://solargraph//lib/solargraph/logging.rb#9
Solargraph::Logging::LOG_LEVELS = T.let(T.unsafe(nil), Hash)

# source://solargraph//lib/solargraph/page.rb#9
class Solargraph::Page
  # @param directory [String]
  # @return [Page] a new instance of Page
  #
  # source://solargraph//lib/solargraph/page.rb#52
  def initialize(directory = T.unsafe(nil)); end

  # @sg-ignore
  #
  # @param template [String]
  # @param layout [Boolean]
  # @param locals [Hash]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/page.rb#77
  def render(template, layout: T.unsafe(nil), locals: T.unsafe(nil)); end

  class << self
    # @param directories [Array<String>]
    # @param name [String]
    # @raise [FileNotFoundError]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/page.rb#85
    def select_template(directories, name); end
  end
end

# @todo This method directive is necessary because OpenStruct.new confuses
#   the typechecker.
#
# source://solargraph//lib/solargraph/page.rb#16
class Solargraph::Page::Binder < ::OpenStruct
  # @param locals [Hash]
  # @param render_method [Proc]
  # @return [Binder] a new instance of Binder
  #
  # source://solargraph//lib/solargraph/page.rb#19
  def initialize(locals, render_method); end

  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/page.rb#39
  def escape(text); end

  # @sg-ignore https://github.com/lsegal/yard/pull/1615
  #
  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/page.rb#32
  def htmlify(text); end

  # @param code [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/page.rb#45
  def ruby_to_html(code); end
end

# source://solargraph//lib/solargraph/parser.rb#2
module Solargraph::Parser
  extend ::Solargraph::Parser::ParserGem::ClassMethods
end

# source://solargraph//lib/solargraph/parser.rb#16
Solargraph::Parser::ClassMethods = Solargraph::Parser::ParserGem::ClassMethods

# source://solargraph//lib/solargraph/parser/comment_ripper.rb#5
class Solargraph::Parser::CommentRipper < ::Ripper::SexpBuilderPP
  # @param src [String]
  # @param filename [String]
  # @param lineno [Integer]
  # @return [CommentRipper] a new instance of CommentRipper
  #
  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#16
  def initialize(src, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # @param result [Array(Symbol, String, Array([Integer, nil], [Integer, nil]))]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#38
  def create_snippet(result); end

  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#22
  def on_comment(*args); end

  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#49
  def on_embdoc(*args); end

  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#43
  def on_embdoc_beg(*args); end

  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#55
  def on_embdoc_end(*args); end

  # @return [Hash{Integer => Solargraph::Parser::Snippet}]
  #
  # source://solargraph//lib/solargraph/parser/comment_ripper.rb#62
  def parse; end
end

# source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#3
class Solargraph::Parser::FlowSensitiveTyping
  include ::Solargraph::Parser::ParserGem::NodeMethods
  include ::Solargraph::Logging
  extend ::Solargraph::Logging

  # @param locals [Array<Solargraph::Pin::LocalVariable, Solargraph::Pin::Parameter>]
  # @param enclosing_breakable_pin [Solargraph::Pin::Breakable, nil]
  # @return [FlowSensitiveTyping] a new instance of FlowSensitiveTyping
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#8
  def initialize(locals, enclosing_breakable_pin = T.unsafe(nil)); end

  # @param and_node [Parser::AST::Node]
  # @param true_ranges [Array<Range>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#17
  def process_and(and_node, true_ranges = T.unsafe(nil)); end

  # @param if_node [Parser::AST::Node]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#34
  def process_if(if_node); end

  private

  # @param pin [Pin::LocalVariable]
  # @param downcast_type_name [String]
  # @param presence [Range]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#127
  def add_downcast_local(pin, downcast_type_name, presence); end

  # @param clause_node [Parser::AST::Node]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#246
  def always_breaks?(clause_node); end

  # Returns the value of attribute enclosing_breakable_pin.
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#252
  def enclosing_breakable_pin; end

  # @param variable_name [String]
  # @param position [Position]
  # @return [Solargraph::Pin::LocalVariable, nil]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#203
  def find_local(variable_name, position); end

  # Returns the value of attribute locals.
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#250
  def locals; end

  # @param isa_node [Parser::AST::Node]
  # @return [Array(String, String)]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#175
  def parse_isa(isa_node); end

  # @param conditional_node [Parser::AST::Node]
  # @param true_ranges [Array<Range>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#165
  def process_conditional(conditional_node, true_ranges); end

  # @param facts_by_pin [Hash{Pin::LocalVariable => Array<Hash{Symbol => String}>}]
  # @param presences [Array<Range>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#147
  def process_facts(facts_by_pin, presences); end

  # @param isa_node [Parser::AST::Node]
  # @param true_presences [Array<Range>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#213
  def process_isa(isa_node, true_presences); end

  # @param node [Parser::AST::Node]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#230
  def type_name(node); end

  class << self
    # Find a variable pin by name and where it is used.
    #
    # Resolves our most specific view of this variable's type by
    # preferring pins created by flow-sensitive typing when we have
    # them based on the Closure and Location.
    #
    # @param pins [Array<Pin::LocalVariable>]
    # @param name [String]
    # @param closure [Pin::Closure]
    # @param location [Location]
    # @return [Array<Pin::LocalVariable>]
    #
    # source://solargraph//lib/solargraph/parser/flow_sensitive_typing.rb#90
    def visible_pins(pins, name, closure, location); end
  end
end

# @deprecated
#
# source://solargraph//lib/solargraph/parser.rb#14
Solargraph::Parser::Legacy = Solargraph::Parser::ParserGem

# source://solargraph//lib/solargraph/parser.rb#21
Solargraph::Parser::NodeMethods = Solargraph::Parser::ParserGem::NodeMethods

# The processor classes used by SourceMap::Mapper to generate pins from
# parser nodes.
#
# source://solargraph//lib/solargraph/parser/node_processor.rb#8
module Solargraph::Parser::NodeProcessor
  class << self
    # @param type [Symbol]
    # @param cls [Class<NodeProcessor::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/parser/node_processor.rb#30
    def deregister(type, cls); end

    # @param node [Parser::AST::Node]
    # @param region [Region]
    # @param pins [Array<Pin::Base>]
    # @param locals [Array<Pin::BaseVariable>]
    # @return [Array(Array<Pin::Base>, Array<Pin::Base>)]
    #
    # source://solargraph//lib/solargraph/parser/node_processor.rb#40
    def process(node, region = T.unsafe(nil), pins = T.unsafe(nil), locals = T.unsafe(nil)); end

    # Register a processor for a node type. You can register multiple processors for the same type.
    # If a node processor returns true, it will skip the next processor of the same node type.
    #
    # @param type [Symbol]
    # @param cls [Class<NodeProcessor::Base>]
    # @return [Array<Class<NodeProcessor::Base>>]
    #
    # source://solargraph//lib/solargraph/parser/node_processor.rb#21
    def register(type, cls); end
  end
end

# source://solargraph//lib/solargraph/parser/node_processor/base.rb#6
class Solargraph::Parser::NodeProcessor::Base
  # @param node [Parser::AST::Node]
  # @param region [Region]
  # @param pins [Array<Pin::Base>]
  # @param locals [Array<Pin::LocalVariable>]
  # @return [Base] a new instance of Base
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#23
  def initialize(node, region, pins, locals); end

  # @return [Array<Pin::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#17
  def locals; end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#8
  def node; end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#14
  def pins; end

  # Subclasses should override this method to generate new pins.
  #
  # @return [Boolean] continue processing the next processor of the same node type.
  # @return [void] In case there is only one processor registered for the node type, it can be void.
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#35
  def process; end

  # @return [Region]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#11
  def region; end

  private

  # @param position [Solargraph::Position]
  # @return [Pin::Closure, nil]
  # @todo Candidate for deprecation
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#78
  def block_pin(position); end

  # @param position [Solargraph::Position]
  # @return [Pin::Closure, nil]
  # @todo Candidate for deprecation
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#86
  def closure_pin(position); end

  # @param node [Parser::AST::Node]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#63
  def comments_for(node); end

  # @param node [Parser::AST::Node]
  # @return [Solargraph::Location]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#56
  def get_node_location(node); end

  # @param position [Solargraph::Position]
  # @return [Pin::Closure, nil]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#69
  def named_path_pin(position); end

  # @param subregion [Region]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/node_processor/base.rb#45
  def process_children(subregion = T.unsafe(nil)); end
end

# source://solargraph//lib/solargraph/parser/parser_gem.rb#3
module Solargraph::Parser::ParserGem; end

# source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#17
module Solargraph::Parser::ParserGem::ClassMethods
  # @return [Source::Chain]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#96
  def chain(*args); end

  # @return [Source::Chain]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#101
  def chain_string(*args); end

  # @param node [Parser::AST::Node]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#112
  def infer_literal_node_type(node); end

  # @param name [String]
  # @param top [AST::Node]
  # @return [Array<AST::Node>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#86
  def inner_node_references(name, top); end

  # @param node [BasicObject]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#123
  def is_ast_node?(node); end

  # @param source [Source]
  # @return [Array(Array<Pin::Base>, Array<Pin::Base>)]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#49
  def map(source); end

  # @param node [Parser::AST::Node]
  # @return [Range]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#129
  def node_range(node); end

  # @param code [String]
  # @param filename [String, nil]
  # @param line [Integer]
  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#31
  def parse(code, filename = T.unsafe(nil), line = T.unsafe(nil)); end

  # @param code [String]
  # @param filename [String, nil]
  # @return [Array(Parser::AST::Node, Hash{Integer => Solargraph::Parser::Snippet})]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#21
  def parse_with_comments(code, filename = T.unsafe(nil)); end

  # @return [::Parser::Base]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#40
  def parser; end

  # @return [Array(Array<Pin::Base>, Array<Pin::Base>)]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#106
  def process_node(*args); end

  # @param source [Source]
  # @param name [String]
  # @return [Array<Location>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#56
  def references(source, name); end

  # @param node [Parser::AST::Node]
  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#137
  def string_ranges(node); end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/class_methods.rb#117
  def version; end
end

# A custom builder for source parsers that ignores character encoding
# issues in literal strings.
#
# source://solargraph//lib/solargraph/parser/parser_gem/flawed_builder.rb#9
class Solargraph::Parser::ParserGem::FlawedBuilder < ::Parser::Builders::Default
  # @sg-ignore
  #
  # @param token [::Parser::AST::Node]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/flawed_builder.rb#13
  def string_value(token); end
end

# A factory for generating chains from nodes.
#
# source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#8
class Solargraph::Parser::ParserGem::NodeChainer
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @param node [Parser::AST::Node]
  # @param filename [String, nil]
  # @param parent [Parser::AST::Node, nil]
  # @return [NodeChainer] a new instance of NodeChainer
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#16
  def initialize(node, filename = T.unsafe(nil), parent = T.unsafe(nil)); end

  # @return [Source::Chain]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#23
  def chain; end

  private

  # @param n [Parser::AST::Node]
  # @return [Array<Chain::Link>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#51
  def generate_links(n); end

  # @param node [Parser::AST::Node]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#141
  def hash_is_splatted?(node); end

  # @param node [Parser::AST::Node]
  # @return [Array<Source::Chain>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#158
  def node_args(node); end

  # @param node [Parser::AST::Node]
  # @return [Source::Chain, nil]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#150
  def passed_block(node); end

  class << self
    # @param node [Parser::AST::Node]
    # @param filename [String, nil]
    # @param parent [Parser::AST::Node, nil]
    # @return [Source::Chain]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#33
    def chain(node, filename = T.unsafe(nil), parent = T.unsafe(nil)); end

    # @param code [String]
    # @return [Source::Chain]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#39
    def load_string(code); end
  end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_chainer.rb#11
Solargraph::Parser::ParserGem::NodeChainer::Chain = Solargraph::Source::Chain

# source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#24
module Solargraph::Parser::ParserGem::NodeMethods
  private

  # @param nodes [Enumerable<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#164
  def any_splatted_call?(nodes); end

  # @param node [Parser::AST::Node]
  # @return [Array<Parser::AST::Node>]
  # @todo Temporarily here for testing. Move to Solargraph::Parser.
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#171
  def call_nodes_from(node); end

  # @param node [Parser::AST::Node]
  # @return [Array<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#141
  def const_nodes_from(node); end

  # @param node [Parser::AST::Node]
  # @return [Hash{Symbol => Chain}]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#124
  def convert_hash(node); end

  # @param node [Parser::AST::Node]
  # @param signature [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#101
  def drill_signature(node, signature); end

  # @param cursor [Solargraph::Source::Cursor]
  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#221
  def find_recipient_node(cursor); end

  # @param node [Parser::AST::Node]
  # @return [Position]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#93
  def get_node_end_position(node); end

  # @param node [Parser::AST::Node]
  # @return [Position]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#87
  def get_node_start_position(node); end

  # @param node [Parser::AST::Node]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#56
  def infer_literal_node_type(node); end

  # @param node [Parser::AST::Node]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#35
  def pack_name(node); end

  # @param cursor [Solargraph::Source::Cursor]
  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#258
  def repaired_find_recipient_node(cursor); end

  # Find all the nodes within the provided node that potentially return a
  # value.
  #
  # The node parameter typically represents a method's logic, e.g., the
  # second child (after the :args node) of a :def node. A simple one-line
  # method would typically return itself, while a node with conditions
  # would return the resulting node from each conditional branch. Nodes
  # that follow a :return node are assumed to be unreachable. Nil values
  # are converted to nil node types.
  #
  # @param node [Parser::AST::Node]
  # @return [Array<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#205
  def returns_from_method_body(node); end

  # @param node [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#158
  def splatted_call?(node); end

  # @param node [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#153
  def splatted_hash?(node); end

  # @param node [Parser::AST::Node]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#29
  def unpack_name(node); end

  # @param node [Parser::AST::Node]
  # @return [Array<AST::Node>] low-level value nodes in
  #   value position.  Does not include explicit return
  #   statements
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#215
  def value_position_nodes_only(node); end

  class << self
    # @param nodes [Enumerable<Parser::AST::Node>]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#164
    def any_splatted_call?(nodes); end

    # @param node [Parser::AST::Node]
    # @return [Array<Parser::AST::Node>]
    # @todo Temporarily here for testing. Move to Solargraph::Parser.
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#171
    def call_nodes_from(node); end

    # @param node [Parser::AST::Node]
    # @return [Array<Parser::AST::Node>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#141
    def const_nodes_from(node); end

    # @param node [Parser::AST::Node]
    # @return [Hash{Symbol => Chain}]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#124
    def convert_hash(node); end

    # @param node [Parser::AST::Node]
    # @param signature [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#101
    def drill_signature(node, signature); end

    # @param cursor [Solargraph::Source::Cursor]
    # @return [Parser::AST::Node, nil]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#221
    def find_recipient_node(cursor); end

    # @param node [Parser::AST::Node]
    # @return [Position]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#93
    def get_node_end_position(node); end

    # @param node [Parser::AST::Node]
    # @return [Position]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#87
    def get_node_start_position(node); end

    # @param node [Parser::AST::Node]
    # @return [String, nil]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#56
    def infer_literal_node_type(node); end

    # @param node [Parser::AST::Node]
    # @return [Array<String>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#35
    def pack_name(node); end

    # @param cursor [Solargraph::Source::Cursor]
    # @return [Parser::AST::Node, nil]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#258
    def repaired_find_recipient_node(cursor); end

    # Find all the nodes within the provided node that potentially return a
    # value.
    #
    # The node parameter typically represents a method's logic, e.g., the
    # second child (after the :args node) of a :def node. A simple one-line
    # method would typically return itself, while a node with conditions
    # would return the resulting node from each conditional branch. Nodes
    # that follow a :return node are assumed to be unreachable. Nil values
    # are converted to nil node types.
    #
    # @param node [Parser::AST::Node]
    # @return [Array<Parser::AST::Node>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#205
    def returns_from_method_body(node); end

    # @param node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#158
    def splatted_call?(node); end

    # @param node [Parser::AST::Node]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#153
    def splatted_hash?(node); end

    # @param node [Parser::AST::Node]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#29
    def unpack_name(node); end

    # @param node [Parser::AST::Node]
    # @return [Array<AST::Node>] low-level value nodes in
    #   value position.  Does not include explicit return
    #   statements
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#215
    def value_position_nodes_only(node); end
  end
end

# Concepts:
#
#  - statement - one single node in the AST.  Generally used
#    synonymously with how the Parser gem uses the term
#    'expression'.  This may have side effects (e.g.,
#    registering a method in the namespace, modifying
#    variables or doing I/O).  It may encapsulate multiple
#    other statements (see compound statement).
#
#  - value - something that can be assigned to a variable by
#    evaluating a statement
#
#  - value node - the 'lowest level' AST node whose return
#    type is a subset of the value type of the overall
#    statement.  Might be a literal, a method call, etc - the
#    goal is to find the lowest level node, which we can use
#    Chains and Pins later on to determine the type of.
#
#    e.g., if the node 'b ? 123 : 456' were a return value, we
#    know the actual return values possible are 123 and 456,
#    and can disregard the rest.
#
#  - value type - the type representing the multiple possible
#    values that can result from evaluation of the statement.
#
#  - return type - the type describing the values a statement
#    might evaluate to.  When used with a method, the term
#    describes the values that may result from the method
#    being called, and includes explicit return statements
#    within the method body's closure.
#
#  - method body - a compound statement with parameters whose
#    return value type must account both for the explicit
#    'return' statemnts as well as the final statements
#    executed in any given control flow through the method.
#
#  - explicit return statement - a statement which, when part of a
#     method body, is a possible value of a call to that method -
#     e.g., "return 123"
#
#  - compound statement - a statement which can be expanded to
#     be multiple statements in a row, executed in the context
#     of a method which can be explicitly returned from.
#
#  - value position - the positions in the AST where the
#    return type of the statement would be one of the return
#    types of any compound statements it is a part of.  For a
#    compound statement, the last of the child statements
#    would be in return position.  This concept can be applied
#    recursively through e.g. conditionals to find a list of
#    statements in value positions.
#
# source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#316
module Solargraph::Parser::ParserGem::NodeMethods::DeepInference
  class << self
    # @param node [AST::Node] a method body compound statement
    # @param include_explicit_returns [Boolean] If true,
    #   include the value nodes of the parameter of the
    #   'return' statements in the type returned.
    # @return [Array<AST::Node>] low-level value nodes from
    #   both nodes in value position as well as explicit
    #   return statements in the method's closure.
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#334
    def from_method_body(node); end

    # Treat parent as as a begin block and use the last node's
    # return node plus any explicit return nodes' return nodes.  e.g.,
    #
    #    123
    #    456
    #    return 'a' if foo == bar
    #    789
    #
    #  would return 'a' and 789.
    #
    # @param parent [Parser::AST::Node]
    # @return [Array<Parser::AST::Node>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#411
    def from_value_position_compound_statement(parent); end

    # Look at known control statements and use them to find
    # more specific return nodes.
    #
    # @param node [Parser::AST::Node] Statement which is in
    #   value position for a method body
    # @param include_explicit_returns [Boolean] If true,
    #   include the value nodes of the parameter of the
    #   'return' statements in the type returned.
    # @return [Array<Parser::AST::Node>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#356
    def from_value_position_statement(node, include_explicit_returns: T.unsafe(nil)); end

    # @param node [AST::Node] an individual statement, to be
    #   evaluated outside the context of a containing method
    # @return [Array<AST::Node>] low-level value nodes in
    #   value position.  Does not include explicit return
    #   statements
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#343
    def value_position_nodes_only(node); end

    private

    # Useful when this statement isn't in value position, but
    # we care explicit return statements nonetheless.
    #
    # @param parent [Parser::AST::Node]
    # @return [Array<Parser::AST::Node>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#451
    def explicit_return_values_from_compound_statement(parent); end

    # @param nodes [Enumerable<Parser::AST::Node, BasicObject>]
    # @return [Array<Parser::AST::Node, nil>]
    #
    # source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#471
    def reduce_to_value_nodes(nodes); end
  end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_methods.rb#136
Solargraph::Parser::ParserGem::NodeMethods::NIL_NODE = T.let(T.unsafe(nil), Parser::AST::Node)

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors.rb#8
module Solargraph::Parser::ParserGem::NodeProcessors; end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/alias_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::AliasNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/alias_node.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/and_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::AndNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/and_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/args_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::ArgsNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/args_node.rb#8
  def process; end

  private

  # @param callable [Pin::Callable]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/args_node.rb#38
  def forward(callable); end

  # @param node [AST::Node]
  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/args_node.rb#52
  def get_decl(node); end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/begin_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::BeginNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/begin_node.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/block_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::BlockNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/block_node.rb#10
  def process; end

  private

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/block_node.rb#37
  def other_class_eval?; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/casgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::CasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/casgn_node.rb#10
  def process; end

  private

  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/casgn_node.rb#25
  def const_name; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/cvasgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::CvasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/cvasgn_node.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/def_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::DefNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/def_node.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/defs_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::DefsNode < ::Solargraph::Parser::ParserGem::NodeProcessors::DefNode
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/defs_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/gvasgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::GvasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/gvasgn_node.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/if_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::IfNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/if_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/ivasgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::IvasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/ivasgn_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/lvasgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::LvasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/lvasgn_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/masgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::MasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/masgn_node.rb#11
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/namespace_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::NamespaceNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/namespace_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/opasgn_node.rb#9
class Solargraph::Parser::ParserGem::NodeProcessors::OpasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/opasgn_node.rb#11
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/orasgn_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::OrasgnNode < ::Solargraph::Parser::NodeProcessor::Base
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/orasgn_node.rb#9
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/resbody_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::ResbodyNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/resbody_node.rb#11
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/sclass_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::SclassNode < ::Solargraph::Parser::NodeProcessor::Base
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/sclass_node.rb#8
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::SendNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#10
  def process; end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#264
  def process_alias_method; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#87
  def process_attribute; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#186
  def process_autoload; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#156
  def process_extend; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#125
  def process_include; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#194
  def process_module_function; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#141
  def process_prepend; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#277
  def process_private_class_method; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#254
  def process_private_constant; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#178
  def process_require; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/send_node.rb#57
  def process_visibility; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/sym_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::SymNode < ::Solargraph::Parser::NodeProcessor::Base
  # @return [void]
  #
  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/sym_node.rb#9
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/until_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::UntilNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/until_node.rb#10
  def process; end
end

# source://solargraph//lib/solargraph/parser/parser_gem/node_processors/while_node.rb#7
class Solargraph::Parser::ParserGem::NodeProcessors::WhileNode < ::Solargraph::Parser::NodeProcessor::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # source://solargraph//lib/solargraph/parser/parser_gem/node_processors/while_node.rb#10
  def process; end
end

# Data used by the parser to track context at various locations in a
# source.
#
# source://solargraph//lib/solargraph/parser/region.rb#8
class Solargraph::Parser::Region
  # @param source [Source]
  # @param namespace [String]
  # @param closure [Pin::Closure, nil]
  # @param scope [Symbol, nil]
  # @param visibility [Symbol]
  # @param lvars [Array<Symbol>]
  # @return [Region] a new instance of Region
  #
  # source://solargraph//lib/solargraph/parser/region.rb#30
  def initialize(source: T.unsafe(nil), closure: T.unsafe(nil), scope: T.unsafe(nil), visibility: T.unsafe(nil), lvars: T.unsafe(nil)); end

  # @return [Pin::Closure]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#10
  def closure; end

  # @param node [Parser::AST::Node]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#64
  def code_for(node); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#41
  def filename; end

  # @return [Array<Symbol>]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#22
  def lvars; end

  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#13
  def scope; end

  # @return [Solargraph::Source]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#19
  def source; end

  # Generate a new Region with the provided attribute changes.
  #
  # @param closure [Pin::Closure, nil]
  # @param scope [Symbol, nil]
  # @param visibility [Symbol, nil]
  # @param lvars [Array<Symbol>, nil]
  # @return [Region]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#52
  def update(closure: T.unsafe(nil), scope: T.unsafe(nil), visibility: T.unsafe(nil), lvars: T.unsafe(nil)); end

  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/parser/region.rb#16
  def visibility; end
end

# source://solargraph//lib/solargraph/parser/snippet.rb#3
class Solargraph::Parser::Snippet
  # @param range [Solargraph::Range]
  # @param text [String]
  # @return [Snippet] a new instance of Snippet
  #
  # source://solargraph//lib/solargraph/parser/snippet.rb#11
  def initialize(range, text); end

  # @return [Range]
  #
  # source://solargraph//lib/solargraph/parser/snippet.rb#5
  def range; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/parser/snippet.rb#7
  def text; end
end

# source://solargraph//lib/solargraph/parser.rb#10
class Solargraph::Parser::SyntaxError < ::StandardError; end

# The namespace for Pins used in SourceMaps.
#
# Pins represent declarations, from gems, Sources, and the Ruby core.
#
# source://solargraph//lib/solargraph/pin.rb#10
module Solargraph::Pin; end

# The base class for map pins.
#
# source://solargraph//lib/solargraph/pin/base.rb#7
class Solargraph::Pin::Base
  include ::Solargraph::Pin::Common
  include ::Solargraph::Pin::Conversions
  include ::Solargraph::Pin::Documenting
  include ::Solargraph::Logging

  # @param location [Solargraph::Location, nil]
  # @param type_location [Solargraph::Location, nil]
  # @param closure [Solargraph::Pin::Closure, nil]
  # @param name [String]
  # @param comments [String]
  # @param source [Symbol, nil]
  # @param docstring [YARD::Docstring, nil]
  # @param directives [::Array<YARD::Tags::Directive>, nil]
  # @param combine_priority [::Numeric, nil] See attr_reader for combine_priority
  # @return [Base] a new instance of Base
  #
  # source://solargraph//lib/solargraph/pin/base.rb#49
  def initialize(location: T.unsafe(nil), type_location: T.unsafe(nil), closure: T.unsafe(nil), source: T.unsafe(nil), name: T.unsafe(nil), comments: T.unsafe(nil), docstring: T.unsafe(nil), directives: T.unsafe(nil), combine_priority: T.unsafe(nil)); end

  # Pin equality is determined using the #nearly? method and also
  # requiring both pins to have the same location.
  #
  # @param other [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#460
  def ==(other); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#616
  def all_location_text; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#399
  def all_rooted?; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#66
  def assert_location_provided; end

  # @sg-ignore
  #
  # @param other [self]
  # @param attr [::Symbol]
  # @return [undefined]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#310
  def assert_same(other, attr); end

  # @param other [self]
  # @param attr [::Symbol]
  # @return [void]
  # @todo strong typechecking should complain when there are no block-related tags
  #
  # source://solargraph//lib/solargraph/pin/base.rb#269
  def assert_same_array_content(other, attr, &block); end

  # @param other [self]
  # @param attr [::Symbol]
  # @return [::Enumerable]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#292
  def assert_same_count(other, attr); end

  # @param other [self]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#259
  def assert_same_macros(other); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#361
  def assert_source_provided; end

  # @return [Location, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#436
  def best_location; end

  # when choices are arbitrary, make sure the choice is consistent
  #
  # @param other [Pin::Base]
  # @param attr [::Symbol]
  # @return [Object, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#217
  def choose(other, attr); end

  # @sg-ignore
  #
  # @param other [self]
  # @param attr [::Symbol]
  # @return [undefined]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#132
  def choose_longer(other, attr); end

  # @sg-ignore
  #
  # @param other [self]
  # @param attr [::Symbol]
  # @return [undefined]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#231
  def choose_node(other, attr); end

  # @sg-ignore
  #
  # @param other [self]
  # @param attr [::Symbol]
  # @return [undefined]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#343
  def choose_pin_attr(other, attr); end

  # @sg-ignore
  #
  # @param other [self]
  # @param attr [::Symbol]
  # @return [undefined]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#324
  def choose_pin_attr_with_same_name(other, attr); end

  # @param other [self]
  # @return [self, nil] Returns either the pin chosen based on priority or nil
  #   A nil return means that the combination process must proceed
  #
  # source://solargraph//lib/solargraph/pin/base.rb#112
  def choose_priority(other); end

  # @return [Pin::Closure, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#73
  def closure; end

  # @return [YARD::CodeObjects::Base]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#14
  def code_object; end

  # @param other [self]
  # @return [::Array<YARD::Tags::Directive>, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#144
  def combine_directives(other); end

  # @param other [self]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#152
  def combine_name(other); end

  # @type A [::Numeric, nil] priority for determining if pins should be combined or not
  #   A nil priority is considered the be the lowest. All code, yard & rbs pins have nil priority
  #   Between 2 pins, the one with the higher priority gets chosen. If the priorities are equal, they are combined.
  #
  # source://solargraph//lib/solargraph/pin/base.rb#34
  def combine_priority; end

  # @param other [self]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#187
  def combine_return_type(other); end

  # @param other [self]
  # @param attrs [Hash{::Symbol => Object}]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#83
  def combine_with(other, attrs = T.unsafe(nil)); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#366
  def comments; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#417
  def completion_item_kind; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#503
  def deprecated?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#606
  def desc; end

  # @return [::Array<YARD::Tags::Directive>]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#479
  def directives; end

  # @return [YARD::Docstring]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#473
  def docstring; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#206
  def dodgy_return_type_source?; end

  # @param generics_to_erase [::Array<String>]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#405
  def erase_generics(generics_to_erase); end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#411
  def filename; end

  # @deprecated
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#573
  def identity; end

  # @deprecated Use #typify and/or #probe instead
  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#530
  def infer(api_map); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#599
  def inner_desc; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#611
  def inspect; end

  # @return [Solargraph::Location, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#17
  def location; end

  # @return [::Array<YARD::Tags::MacroDirective>]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#485
  def macros; end

  # Perform a quick check to see if this pin possibly includes YARD
  # directives. This method does not require parsing the comments.
  #
  # After the comments have been parsed, this method will return false if
  # no directives were found, regardless of whether it previously appeared
  # possible.
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#497
  def maybe_directives?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#23
  def name; end

  # True if the specified pin is a near match to this one. A near match
  # indicates that the pins contain mostly the same data. Any differences
  # between them should not have an impact on the API surface.
  #
  # @param other [Solargraph::Pin::Base, Object]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#446
  def nearly?(other); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#176
  def needs_consistent_name?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#26
  def path; end

  # @sg-ignore
  #
  # @param other [self]
  # @param attr [::Symbol]
  # @return [undefined]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#243
  def prefer_rbs_location(other, attr); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#36
  def presence_certain?; end

  # Infer the pin's return type via static code analysis.
  #
  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#523
  def probe(api_map); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#541
  def probed?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#537
  def proxied?; end

  # Return a proxy for this pin with the specified return type. Other than
  # the return type and the #proxied? setting, the proxy should be a clone
  # of the original.
  #
  # @param return_type [ComplexType]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#564
  def proxy(return_type); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#253
  def rbs_location?; end

  # @param api_map [ApiMap]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#547
  def realize(api_map); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#161
  def reset_generated!; end

  # Determine the concrete type for each of the generic type
  # parameters used in this method based on the parameters passed
  # into the its class and return a new method pin.
  #
  # @param definitions [Pin::Namespace] The module/class which uses generic types
  # @param context_type [ComplexType] The receiver type
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#395
  def resolve_generics(definitions, context_type); end

  # @param generics_to_resolve [Enumerable<String>]
  # @param return_type_context [ComplexType, nil]
  # @param context [ComplexType]
  # @param resolved_generic_values [Hash{String => ComplexType}]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#375
  def resolve_generics_from_context(generics_to_resolve, return_type_context = T.unsafe(nil), resolved_generic_values: T.unsafe(nil)); end

  # The pin's return type.
  #
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#468
  def return_type; end

  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#29
  def source; end

  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#29
  def source=(_arg0); end

  # @return [Integer, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#422
  def symbol_kind; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#578
  def to_rbs; end

  # source://solargraph//lib/solargraph/pin/base.rb#426
  def to_s; end

  # @return [self]
  # @yieldparam [ComplexType]
  # @yieldreturn [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#384
  def transform_types(&transform); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#583
  def type_desc; end

  # @return [Solargraph::Location, nil]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#20
  def type_location; end

  # Get a fully qualified type from the pin's return type.
  #
  # The relative type is determined from YARD documentation (@return,
  # @param, @type, etc.) and its namespaces are fully qualified using the
  # provided ApiMap.
  #
  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#515
  def typify(api_map); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#431
  def variable?; end

  protected

  # Sets the attribute directives
  #
  # @param value the value to set the attribute directives to.
  #
  # source://solargraph//lib/solargraph/pin/base.rb#645
  def directives=(_arg0); end

  # Sets the attribute docstring
  #
  # @param value the value to set the attribute docstring to.
  #
  # source://solargraph//lib/solargraph/pin/base.rb#643
  def docstring=(_arg0); end

  # @sg-ignore def should infer as symbol - "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/pin/base.rb#181
  def equality_fields; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#635
  def probed=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#638
  def proxied=(_arg0); end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#641
  def return_type=(_arg0); end

  private

  # @return [::Array<YARD::Tags::Handlers::Directive>]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#701
  def collect_macros; end

  # @param dir1 [::Array<YARD::Tags::Directive>]
  # @param dir2 [::Array<YARD::Tags::Directive>]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#681
  def compare_directives(dir1, dir2); end

  # True if two docstrings have the same tags, regardless of any other
  # differences.
  #
  # @param d1 [YARD::Docstring]
  # @param d2 [YARD::Docstring]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#670
  def compare_docstring_tags(d1, d2); end

  # @param tag1 [YARD::Tags::Tag]
  # @param tag2 [YARD::Tags::Tag]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#692
  def compare_tags(tag1, tag2); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/base.rb#650
  def parse_comments; end
end

# source://solargraph//lib/solargraph/pin/base_variable.rb#5
class Solargraph::Pin::BaseVariable < ::Solargraph::Pin::Base
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @param return_type [ComplexType, nil]
  # @param assignment [Parser::AST::Node, nil]
  # @return [BaseVariable] a new instance of BaseVariable
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#16
  def initialize(assignment: T.unsafe(nil), return_type: T.unsafe(nil), **splat); end

  # @param other [Object]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#105
  def ==(other); end

  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#10
  def assignment; end

  # source://solargraph//lib/solargraph/pin/base_variable.rb#24
  def combine_with(other, attrs = T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/pin/base_variable.rb#33
  def completion_item_kind; end

  # Returns the value of attribute mass_assignment.
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#12
  def mass_assignment; end

  # Sets the attribute mass_assignment
  #
  # @param value the value to set the attribute mass_assignment to.
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#12
  def mass_assignment=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#46
  def nil_assignment?; end

  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#82
  def probe(api_map); end

  # source://solargraph//lib/solargraph/pin/base_variable.rb#42
  def return_type; end

  # @param parent_node [Parser::AST::Node]
  # @param api_map [ApiMap]
  # @return [::Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#59
  def return_types_from_node(parent_node, api_map); end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#38
  def symbol_kind; end

  # source://solargraph//lib/solargraph/pin/base_variable.rb#110
  def type_desc; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#52
  def variable?; end

  private

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/base_variable.rb#117
  def generate_complex_type; end
end

# source://solargraph//lib/solargraph/pin/block.rb#5
class Solargraph::Pin::Block < ::Solargraph::Pin::Callable
  include ::Solargraph::Pin::Breakable

  # @param receiver [Parser::AST::Node, nil]
  # @param node [Parser::AST::Node, nil]
  # @param context [ComplexType, nil]
  # @param args [::Array<Parameter>]
  # @return [Block] a new instance of Block
  #
  # source://solargraph//lib/solargraph/pin/block.rb#18
  def initialize(receiver: T.unsafe(nil), args: T.unsafe(nil), context: T.unsafe(nil), node: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/block.rb#32
  def binder; end

  # @param yield_types [::Array<ComplexType>]
  # @param parameters [::Array<Parameter>]
  # @return [::Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/pin/block.rb#40
  def destructure_yield_types(yield_types, parameters); end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/pin/block.rb#12
  def node; end

  # @param api_map [ApiMap]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/block.rb#28
  def rebind(api_map); end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/pin/block.rb#9
  def receiver; end

  # @param api_map [ApiMap]
  # @return [::Array<ComplexType>]
  #
  # source://solargraph//lib/solargraph/pin/block.rb#51
  def typify_parameters(api_map); end

  private

  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/block.rb#85
  def maybe_rebind(api_map); end
end

# Mix-in for pins which enclose code which the 'break' statement works with-in - e.g., blocks, when, until, ...
#
# source://solargraph//lib/solargraph/pin/breakable.rb#4
module Solargraph::Pin::Breakable
  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/pin/breakable.rb#6
  def node; end
end

# source://solargraph//lib/solargraph/pin/callable.rb#5
class Solargraph::Pin::Callable < ::Solargraph::Pin::Closure
  # @param block [Signature, nil]
  # @param return_type [ComplexType, nil]
  # @param parameters [::Array<Pin::Parameter>]
  # @return [Callable] a new instance of Callable
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#17
  def initialize(block: T.unsafe(nil), return_type: T.unsafe(nil), parameters: T.unsafe(nil), **splat); end

  # @return [Array]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#88
  def arity; end

  # @param arguments [::Array<Chain>]
  # @param with_block [Boolean]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#199
  def arity_matches?(arguments, with_block); end

  # @return [Signature]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#7
  def block; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#218
  def block?; end

  # @return [Array<Pin::Parameter>]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#79
  def blockless_parameters; end

  # @param other [self]
  # @return [Array<Pin::Parameter>]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#65
  def choose_parameters(other); end

  # @param other [self]
  # @return [Pin::Block, nil]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#31
  def combine_blocks(other); end

  # @param other [self]
  # @param attrs [Hash{Symbol => Object}]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#45
  def combine_with(other, attrs = T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/pin/callable.rb#59
  def generics; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#209
  def mandatory_positional_param_count; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#136
  def method_name; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#25
  def method_namespace; end

  # @return [::Array<String>]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#55
  def parameter_names; end

  # Returns the value of attribute parameters.
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#9
  def parameters; end

  # Sets the attribute parameters
  #
  # @param value the value to set the attribute parameters to.
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#9
  def parameters=(_arg0); end

  # @param generics_to_resolve [Enumerable<String>]
  # @param arg_types [Array<ComplexType>, nil]
  # @param return_type_context [ComplexType, nil]
  # @param yield_arg_types [Array<ComplexType>, nil]
  # @param yield_return_type_context [ComplexType, nil]
  # @param context [ComplexType, nil]
  # @param resolved_generic_values [Hash{String => ComplexType}]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#100
  def resolve_generics_from_context(generics_to_resolve, arg_types = T.unsafe(nil), return_type_context = T.unsafe(nil), yield_arg_types = T.unsafe(nil), yield_return_type_context = T.unsafe(nil), resolved_generic_values: T.unsafe(nil)); end

  # @param generics_to_resolve [::Array<String>]
  # @param arg_types [Array<ComplexType>, nil]
  # @param return_type_context [ComplexType, nil]
  # @param yield_arg_types [Array<ComplexType>, nil]
  # @param yield_return_type_context [ComplexType, nil]
  # @param context [ComplexType, nil]
  # @param resolved_generic_values [Hash{String => ComplexType}]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#149
  def resolve_generics_from_context_until_complete(generics_to_resolve, arg_types = T.unsafe(nil), return_type_context = T.unsafe(nil), yield_arg_types = T.unsafe(nil), yield_return_type_context = T.unsafe(nil), resolved_generic_values: T.unsafe(nil)); end

  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#12
  def return_type; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#214
  def to_rbs; end

  # @return [Array<String>]
  # @return [self]
  # @yieldparam [ComplexType]
  # @yieldreturn [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#186
  def transform_types(&transform); end

  # source://solargraph//lib/solargraph/pin/callable.rb#123
  def typify(api_map); end

  protected

  # Sets the attribute block
  #
  # @param value the value to set the attribute block to.
  #
  # source://solargraph//lib/solargraph/pin/callable.rb#224
  def block=(_arg0); end
end

# source://solargraph//lib/solargraph/pin/class_variable.rb#5
class Solargraph::Pin::ClassVariable < ::Solargraph::Pin::BaseVariable; end

# source://solargraph//lib/solargraph/pin/closure.rb#5
class Solargraph::Pin::Closure < ::Solargraph::Pin::Base
  # @param scope [::Symbol] :class or :instance
  # @param generics [::Array<Pin::Parameter>, nil]
  # @param generic_defaults [Hash{String => ComplexType}]
  # @return [Closure] a new instance of Closure
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#12
  def initialize(scope: T.unsafe(nil), generics: T.unsafe(nil), generic_defaults: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/closure.rb#47
  def binder; end

  # @param other [self]
  # @param attrs [Hash{Symbol => Object}]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#28
  def combine_with(other, attrs = T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/pin/closure.rb#36
  def context; end

  # @return [::Array<String>]
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#52
  def gates; end

  # @return [Hash{String => ComplexType}]
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#20
  def generic_defaults; end

  # @return [::Array<String>]
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#59
  def generics; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#69
  def rbs_generics; end

  # @return [::Symbol] :class or :instance
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#7
  def scope; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/closure.rb#64
  def to_rbs; end
end

# source://solargraph//lib/solargraph/pin/common.rb#5
module Solargraph::Pin::Common
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#44
  def binder; end

  # @sg-ignore Solargraph::Pin::Common#closure return type could not be inferred
  #
  # @return [Pin::Closure, nil]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#16
  def closure; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#49
  def comments; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#32
  def context; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#36
  def full_context; end

  # @return [Location]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#12
  def location; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#22
  def name; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#39
  def namespace; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#54
  def path; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#27
  def return_type; end

  protected

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://solargraph//lib/solargraph/pin/common.rb#60
  def context=(_arg0); end

  private

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/common.rb#65
  def find_context; end
end

# source://solargraph//lib/solargraph/pin/constant.rb#5
class Solargraph::Pin::Constant < ::Solargraph::Pin::BaseVariable
  # @param visibility [::Symbol] The visibility of the constant (:public, :protected, or :private)
  # @param splat [Hash] Additional options supported by superclasses
  # @return [Constant] a new instance of Constant
  #
  # source://solargraph//lib/solargraph/pin/constant.rb#10
  def initialize(visibility: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/constant.rb#19
  def completion_item_kind; end

  # source://solargraph//lib/solargraph/pin/constant.rb#28
  def path; end

  # source://solargraph//lib/solargraph/pin/constant.rb#15
  def return_type; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/constant.rb#24
  def symbol_kind; end

  # Returns the value of attribute visibility.
  #
  # source://solargraph//lib/solargraph/pin/constant.rb#6
  def visibility; end

  private

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/constant.rb#35
  def generate_complex_type; end
end

# @todo Move this stuff. It should be the responsibility of the language server.
# @todo abstract methods below should be verified to be overridden
#   by type checker when mixin included by non-abstract class
#
# source://solargraph//lib/solargraph/pin/conversions.rb#10
module Solargraph::Pin::Conversions
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#38
  def completion_item; end

  # @abstract
  # @raise [NotImplementedError]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#17
  def completion_item_kind; end

  # @abstract
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#23
  def deprecated?; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#71
  def detail; end

  # Get a markdown-flavored link to a documentation page.
  #
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#84
  def link_documentation; end

  # @abstract
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#28
  def probed?; end

  # @abstract
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#33
  def proxied?; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#96
  def reset_conversions; end

  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#53
  def resolve_completion_item; end

  # @return [::Array<Hash>]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#66
  def signature_help; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#89
  def text_documentation; end

  private

  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#117
  def escape_brackets(text); end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/pin/conversions.rb#107
  def generate_link; end
end

# A DelegatedMethod is a more complicated version of a MethodAlias that
# allows aliasing a method from a different closure (class/module etc).
#
# source://solargraph//lib/solargraph/pin/delegated_method.rb#7
class Solargraph::Pin::DelegatedMethod < ::Solargraph::Pin::Method
  # A DelegatedMethod can be constructed with either a :resolved_method
  # pin, or a :receiver_chain. When a :receiver_chain is supplied, it
  # will be used to *dynamically* resolve a receiver type within the
  # given closure/scope, and the delegated method will then be resolved
  # to a method pin on that type.
  #
  # @param method [Method, nil] an already resolved method pin.
  # @param receiver [Source::Chain, nil] the source code used to resolve the receiver for this delegated method.
  # @param name [String]
  # @param receiver_method_name [String] the method name that will be called on the receiver (defaults to :name).
  # @raise [ArgumentError]
  # @return [DelegatedMethod] a new instance of DelegatedMethod
  #
  # source://solargraph//lib/solargraph/pin/delegated_method.rb#18
  def initialize(method: T.unsafe(nil), receiver: T.unsafe(nil), name: T.unsafe(nil), receiver_method_name: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#45
  def comments; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#53
  def infer(api_map); end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#27
  def inner_desc; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#31
  def location; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#45
  def parameters; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#53
  def probe(api_map); end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#53
  def realize(api_map); end

  # @param api_map [ApiMap]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/delegated_method.rb#62
  def resolvable?(api_map); end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#45
  def return_type; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#45
  def signatures; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#38
  def type_location; end

  # source://solargraph//lib/solargraph/pin/delegated_method.rb#53
  def typify(api_map); end

  private

  # helper to print a source chain as code, probably not 100% correct.
  #
  # @param chain [Source::Chain]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/delegated_method.rb#105
  def print_chain(chain); end

  # Resolves the receiver chain and method name to a method pin, resetting any previously resolution.
  #
  # @param api_map [ApiMap]
  # @return [Pin::Method, nil]
  #
  # source://solargraph//lib/solargraph/pin/delegated_method.rb#73
  def resolve_method(api_map); end
end

# A module to add the Pin::Base#documentation method.
#
# source://solargraph//lib/solargraph/pin/documenting.rb#32
module Solargraph::Pin::Documenting
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#75
  def documentation; end

  class << self
    # @param text [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin/documenting.rb#103
    def normalize_indentation(text); end

    # @param text [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin/documenting.rb#97
    def strip_html_comments(text); end
  end
end

# A documentation formatter that either performs Markdown conversion for
# text, or applies backticks for code blocks.
#
# source://solargraph//lib/solargraph/pin/documenting.rb#36
class Solargraph::Pin::Documenting::DocSection
  # @param code [Boolean] True if this section is a code block
  # @return [DocSection] a new instance of DocSection
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#41
  def initialize(code); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#46
  def code?; end

  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#52
  def concat(text); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#38
  def plaintext; end

  # source://solargraph//lib/solargraph/pin/documenting.rb#56
  def to_s; end

  private

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#64
  def to_code; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/documenting.rb#69
  def to_markdown; end
end

# DuckMethod pins are used to add completion items for type tags that
# use duck typing, e.g., `@param file [#read]`.
#
# source://solargraph//lib/solargraph/pin/duck_method.rb#8
class Solargraph::Pin::DuckMethod < ::Solargraph::Pin::Method; end

# source://solargraph//lib/solargraph/pin/global_variable.rb#5
class Solargraph::Pin::GlobalVariable < ::Solargraph::Pin::BaseVariable; end

# source://solargraph//lib/solargraph/pin/instance_variable.rb#5
class Solargraph::Pin::InstanceVariable < ::Solargraph::Pin::BaseVariable
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/instance_variable.rb#7
  def binder; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/instance_variable.rb#17
  def context; end

  # @param other [InstanceVariable]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/instance_variable.rb#29
  def nearly?(other); end

  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/instance_variable.rb#12
  def scope; end
end

# source://solargraph//lib/solargraph/pin/keyword.rb#5
class Solargraph::Pin::Keyword < ::Solargraph::Pin::Base
  # @return [Keyword] a new instance of Keyword
  #
  # source://solargraph//lib/solargraph/pin/keyword.rb#6
  def initialize(name, **kwargs); end

  # source://solargraph//lib/solargraph/pin/keyword.rb#11
  def closure; end

  # source://solargraph//lib/solargraph/pin/keyword.rb#15
  def name; end
end

# source://solargraph//lib/solargraph/pin/keyword_param.rb#5
class Solargraph::Pin::KeywordParam < ::Solargraph::Pin::Symbol; end

# source://solargraph//lib/solargraph/pin/local_variable.rb#5
class Solargraph::Pin::LocalVariable < ::Solargraph::Pin::BaseVariable
  # @param assignment [AST::Node, nil]
  # @param presence [Range, nil]
  # @param presence_certain [Boolean]
  # @param splat [Hash]
  # @return [LocalVariable] a new instance of LocalVariable
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#17
  def initialize(assignment: T.unsafe(nil), presence: T.unsafe(nil), presence_certain: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/local_variable.rb#24
  def combine_with(other, attrs = T.unsafe(nil)); end

  # @return [Range]
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#7
  def presence; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#9
  def presence_certain?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#46
  def to_rbs; end

  # @param other_closure [Pin::Closure]
  # @param other_loc [Location]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#39
  def visible_at?(other_closure, other_loc); end

  private

  # @param needle [Pin::Base]
  # @param haystack [Pin::Base]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#67
  def match_named_closure(needle, haystack); end

  # @param tag1 [String]
  # @param tag2 [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/local_variable.rb#55
  def match_tags(tag1, tag2); end
end

# The base class for method and attribute pins.
#
# source://solargraph//lib/solargraph/pin/method.rb#7
class Solargraph::Pin::Method < ::Solargraph::Pin::Callable
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @param visibility [::Symbol] :public, :protected, or :private
  # @param explicit [Boolean]
  # @param block [Pin::Signature, nil, ::Symbol]
  # @param node [Parser::AST::Node, nil]
  # @param attribute [Boolean]
  # @param signatures [::Array<Signature>, nil]
  # @param anon_splat [Boolean]
  # @return [Method] a new instance of Method
  #
  # source://solargraph//lib/solargraph/pin/method.rb#25
  def initialize(visibility: T.unsafe(nil), explicit: T.unsafe(nil), block: T.unsafe(nil), node: T.unsafe(nil), attribute: T.unsafe(nil), signatures: T.unsafe(nil), anon_splat: T.unsafe(nil), **splat); end

  # @param other [Pin::Method]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#104
  def ==(other); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#133
  def all_rooted?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#419
  def anon_splat?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#375
  def attribute?; end

  # @return [Pin::Signature, nil]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#159
  def block; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#154
  def block?; end

  # @return [Array<Pin::Signature>]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#38
  def combine_all_signature_pins(*signature_pins); end

  # @param other [Pin::Method]
  # @return [Array<Pin::Signature>]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#67
  def combine_signatures(other); end

  # @param other [Pin::Method]
  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#55
  def combine_visibility(other); end

  # source://solargraph//lib/solargraph/pin/method.rb#79
  def combine_with(other, attrs = T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/pin/method.rb#164
  def completion_item_kind; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#236
  def detail; end

  # source://solargraph//lib/solargraph/pin/method.rb#308
  def documentation; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#371
  def explicit?; end

  # @param parameters [::Array<Parameter>]
  # @param return_type [ComplexType]
  # @return [Signature]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#179
  def generate_signature(parameters, return_type); end

  # source://solargraph//lib/solargraph/pin/method.rb#261
  def inner_desc; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#287
  def method_name; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#380
  def nearly?(other); end

  # @return [Parser::AST::Node]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#16
  def node; end

  # @return [::Array<Pin::Method>]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#392
  def overloads; end

  # source://solargraph//lib/solargraph/pin/method.rb#282
  def path; end

  # source://solargraph//lib/solargraph/pin/method.rb#387
  def probe(api_map); end

  # @param return_type [ComplexType]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#229
  def proxy_with_signatures(return_type); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#120
  def reset_generated!; end

  # @param api_map [ApiMap]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#425
  def resolve_ref_tag(api_map); end

  # @param api_map [ApiMap]
  # @return [Array<Pin::Method>]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#448
  def rest_of_stack(api_map); end

  # source://solargraph//lib/solargraph/pin/method.rb#172
  def return_type; end

  # @return [::Array<Hash>]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#252
  def signature_help; end

  # @return [::Array<Signature>]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#216
  def signatures; end

  # Sets the attribute signatures
  #
  # @param value the value to set the attribute signatures to.
  #
  # source://solargraph//lib/solargraph/pin/method.rb#13
  def signatures=(_arg0); end

  # source://solargraph//lib/solargraph/pin/method.rb#168
  def symbol_kind; end

  # source://solargraph//lib/solargraph/pin/method.rb#270
  def to_rbs; end

  # source://solargraph//lib/solargraph/pin/method.rb#108
  def transform_types(&transform); end

  # source://solargraph//lib/solargraph/pin/method.rb#291
  def typify(api_map); end

  # @return [::Symbol] :public, :private, or :protected
  #
  # source://solargraph//lib/solargraph/pin/method.rb#11
  def visibility; end

  # @param signature [Pin::Signature]
  # @return [Pin::Method]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#139
  def with_single_signature(signature); end

  protected

  # Sets the attribute block
  #
  # @param value the value to set the attribute block to.
  #
  # source://solargraph//lib/solargraph/pin/method.rb#454
  def block=(_arg0); end

  # Sets the attribute documentation
  #
  # @param value the value to set the attribute documentation to.
  #
  # source://solargraph//lib/solargraph/pin/method.rb#458
  def documentation=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#460
  def dodgy_visibility_source?; end

  # Sets the attribute return_type
  #
  # @param value the value to set the attribute return_type to.
  #
  # source://solargraph//lib/solargraph/pin/method.rb#653
  def return_type=(_arg0); end

  # Sets the attribute signature_help
  #
  # @param value the value to set the attribute signature_help to.
  #
  # source://solargraph//lib/solargraph/pin/method.rb#456
  def signature_help=(_arg0); end

  private

  # @param name [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#501
  def clean_param(name); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#639
  def concat_example_tags; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#516
  def generate_complex_type; end

  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#610
  def infer_from_iv(api_map); end

  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#583
  def infer_from_return_nodes(api_map); end

  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#572
  def method_body_node; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#536
  def method_namespace; end

  # @param tag [YARD::Tags::OverloadTag]
  # @param name [String]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#509
  def param_type_from_name(tag, name); end

  # When YARD parses an overload tag, it includes rest modifiers in the parameters names.
  #
  # @param name [String]
  # @return [::Array(String, ::Symbol)]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#627
  def parse_overload_param(name); end

  # @param ref [String]
  # @param api_map [ApiMap]
  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#554
  def resolve_reference(ref, api_map); end

  # @param api_map [ApiMap]
  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#524
  def see_reference(api_map); end

  # @param name [String]
  # @param asgn [Boolean]
  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#481
  def select_decl(name, asgn); end

  # @param api_map [ApiMap]
  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/pin/method.rb#542
  def typify_from_super(api_map); end
end

# Use this class to track method aliases for later remapping. Common
# examples that defer mapping are aliases for superclass methods or
# methods from included modules.
#
# source://solargraph//lib/solargraph/pin/method_alias.rb#9
class Solargraph::Pin::MethodAlias < ::Solargraph::Pin::Method
  # @param scope [::Symbol]
  # @param original [String, nil] The name of the original method
  # @param splat [Hash] Additional options supported by superclasses
  # @return [MethodAlias] a new instance of MethodAlias
  #
  # source://solargraph//lib/solargraph/pin/method_alias.rb#19
  def initialize(scope: T.unsafe(nil), original: T.unsafe(nil), **splat); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/method_alias.rb#14
  def original; end

  # source://solargraph//lib/solargraph/pin/method_alias.rb#29
  def path; end

  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/method_alias.rb#11
  def scope; end

  # source://solargraph//lib/solargraph/pin/method_alias.rb#25
  def visibility; end
end

# source://solargraph//lib/solargraph/pin/namespace.rb#7
class Solargraph::Pin::Namespace < ::Solargraph::Pin::Closure
  # @param type [::Symbol] :class or :module
  # @param visibility [::Symbol] :public or :private
  # @param gates [::Array<String>]
  # @param name [String]
  # @return [Namespace] a new instance of Namespace
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#23
  def initialize(type: T.unsafe(nil), visibility: T.unsafe(nil), gates: T.unsafe(nil), name: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/namespace.rb#71
  def binder; end

  # does not assert like super, as a namespace without a closure
  # may be the root level namespace, or it may not yet be
  # qualified
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#17
  def closure; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#79
  def completion_item_kind; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#98
  def domains; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#67
  def full_context; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#106
  def gates; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#55
  def inner_desc; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#63
  def namespace; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#89
  def path; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#93
  def return_type; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#75
  def scope; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#84
  def symbol_kind; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#51
  def to_rbs; end

  # @return [::Symbol] :class or :module
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#12
  def type; end

  # source://solargraph//lib/solargraph/pin/namespace.rb#102
  def typify(api_map); end

  # @return [::Symbol] :public or :private
  #
  # source://solargraph//lib/solargraph/pin/namespace.rb#9
  def visibility; end
end

# source://solargraph//lib/solargraph/pin/parameter.rb#5
class Solargraph::Pin::Parameter < ::Solargraph::Pin::LocalVariable
  # @param decl [::Symbol] :arg, :optarg, :kwarg, :kwoptarg, :restarg, :kwrestarg, :block, :blockarg
  # @param asgn_code [String, nil]
  # @return [Parameter] a new instance of Parameter
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#18
  def initialize(decl: T.unsafe(nil), asgn_code: T.unsafe(nil), **splat); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#75
  def arg?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#54
  def arity_decl; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#10
  def asgn_code; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#87
  def block?; end

  # allow this to be set to the method after the method itself has
  # been created
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#14
  def closure=(_arg0); end

  # source://solargraph//lib/solargraph/pin/parameter.rb#32
  def combine_with(other, attrs = T.unsafe(nil)); end

  # @param atype [ComplexType]
  # @param api_map [ApiMap]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#175
  def compatible_arg?(atype, api_map); end

  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#7
  def decl; end

  # source://solargraph//lib/solargraph/pin/parameter.rb#182
  def documentation; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#127
  def full; end

  # @return [String] the full name of the parameter, including any
  #   declarative symbols such as `*` or `:` indicating type of
  #   parameter. This is used in method signatures.
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#111
  def full_name; end

  # The parameter's zero-based location in the block's signature.
  #
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#161
  def index; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#41
  def keyword?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#45
  def kwrestarg?; end

  # source://solargraph//lib/solargraph/pin/parameter.rb#28
  def location; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#49
  def needs_consistent_name?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#83
  def rest?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#79
  def restarg?; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#139
  def return_type; end

  # source://solargraph//lib/solargraph/pin/parameter.rb#91
  def to_rbs; end

  # source://solargraph//lib/solargraph/pin/parameter.rb#24
  def type_location; end

  # @param api_map [ApiMap]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#168
  def typify(api_map); end

  private

  # @return [YARD::Tags::Tag, nil]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#191
  def param_tag; end

  # @param ref [String]
  # @param api_map [ApiMap]
  # @param skip [::Array]
  # @return [::Array<YARD::Tags::Tag>, nil]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#247
  def resolve_reference(ref, api_map, skip); end

  # @param heredoc [YARD::Docstring]
  # @param api_map [ApiMap]
  # @param skip [::Array]
  # @return [::Array<YARD::Tags::Tag>]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#234
  def see_reference(heredoc, api_map, skip = T.unsafe(nil)); end

  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#201
  def typify_block_param(api_map); end

  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/parameter.rb#211
  def typify_method_param(api_map); end
end

# source://solargraph//lib/solargraph/pin/proxy_type.rb#5
class Solargraph::Pin::ProxyType < ::Solargraph::Pin::Base
  # @param return_type [ComplexType]
  # @param binder [ComplexType, ComplexType::UniqueType, nil]
  # @return [ProxyType] a new instance of ProxyType
  #
  # source://solargraph//lib/solargraph/pin/proxy_type.rb#8
  def initialize(return_type: T.unsafe(nil), binder: T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/proxy_type.rb#14
  def context; end

  class << self
    # @param context [ComplexType, ComplexType::UniqueType] Used as context for this pin
    # @param closure [Pin::Namespace, nil] Used as the closure for this pin
    # @param binder [ComplexType, ComplexType::UniqueType, nil]
    # @return [ProxyType]
    #
    # source://solargraph//lib/solargraph/pin/proxy_type.rb#22
    def anonymous(context, closure: T.unsafe(nil), binder: T.unsafe(nil), **kwargs); end
  end
end

# source://solargraph//lib/solargraph/pin.rb#42
Solargraph::Pin::ROOT_PIN = T.let(T.unsafe(nil), Solargraph::Pin::Namespace)

# source://solargraph//lib/solargraph/pin/reference.rb#5
class Solargraph::Pin::Reference < ::Solargraph::Pin::Base
  # @param generic_values [Array<String>]
  # @return [Reference] a new instance of Reference
  #
  # source://solargraph//lib/solargraph/pin/reference.rb#16
  def initialize(generic_values: T.unsafe(nil), **splat); end

  # Returns the value of attribute generic_values.
  #
  # source://solargraph//lib/solargraph/pin/reference.rb#13
  def generic_values; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/pin/reference.rb#22
  def parameter_tag; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/pin/reference.rb#31
  def parametrized_tag; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/pin/reference.rb#43
  def reference_gates; end
end

# source://solargraph//lib/solargraph/pin/reference/extend.rb#6
class Solargraph::Pin::Reference::Extend < ::Solargraph::Pin::Reference; end

# source://solargraph//lib/solargraph/pin/reference/include.rb#6
class Solargraph::Pin::Reference::Include < ::Solargraph::Pin::Reference; end

# source://solargraph//lib/solargraph/pin/reference/override.rb#6
class Solargraph::Pin::Reference::Override < ::Solargraph::Pin::Reference
  # @param location [Location, nil]
  # @param name [String]
  # @param tags [::Array<YARD::Tags::Tag>]
  # @param delete [::Array<Symbol>]
  # @param splat [Hash]
  # @return [Override] a new instance of Override
  #
  # source://solargraph//lib/solargraph/pin/reference/override.rb#22
  def initialize(location, name, tags, delete = T.unsafe(nil), **splat); end

  # source://solargraph//lib/solargraph/pin/reference/override.rb#13
  def closure; end

  # @return [::Array<Symbol>]
  #
  # source://solargraph//lib/solargraph/pin/reference/override.rb#11
  def delete; end

  # @return [::Array<YARD::Tags::Tag>]
  #
  # source://solargraph//lib/solargraph/pin/reference/override.rb#8
  def tags; end

  class << self
    # @param name [String]
    # @param comment [String]
    # @param splat [Hash]
    # @return [Solargraph::Pin::Reference::Override]
    #
    # source://solargraph//lib/solargraph/pin/reference/override.rb#41
    def from_comment(name, comment, **splat); end

    # @param name [String]
    # @param tags [::Array<String>]
    # @param delete [::Array<Symbol>]
    # @param splat [Hash]
    # @return [Solargraph::Pin::Reference::Override]
    #
    # source://solargraph//lib/solargraph/pin/reference/override.rb#33
    def method_return(name, *tags, delete: T.unsafe(nil), **splat); end
  end
end

# source://solargraph//lib/solargraph/pin/reference/prepend.rb#6
class Solargraph::Pin::Reference::Prepend < ::Solargraph::Pin::Reference; end

# source://solargraph//lib/solargraph/pin/reference/require.rb#6
class Solargraph::Pin::Reference::Require < ::Solargraph::Pin::Reference
  # @return [Require] a new instance of Require
  #
  # source://solargraph//lib/solargraph/pin/reference/require.rb#7
  def initialize(location, name, **splat); end
end

# A Superclass reference pin.
#
# source://solargraph//lib/solargraph/pin/reference/superclass.rb#8
class Solargraph::Pin::Reference::Superclass < ::Solargraph::Pin::Reference
  # source://solargraph//lib/solargraph/pin/reference/superclass.rb#9
  def reference_gates; end
end

# source://solargraph//lib/solargraph/pin/search.rb#7
class Solargraph::Pin::Search
  # @param pins [::Array<Pin::Base>]
  # @param query [String]
  # @return [Search] a new instance of Search
  #
  # source://solargraph//lib/solargraph/pin/search.rb#25
  def initialize(pins, query); end

  # @return [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/pin/search.rb#31
  def results; end

  private

  # @return [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/pin/search.rb#38
  def do_query; end

  # @param str1 [String]
  # @param str2 [String]
  # @return [Float]
  #
  # source://solargraph//lib/solargraph/pin/search.rb#52
  def fuzzy_string_match(str1, str2); end
end

# source://solargraph//lib/solargraph/pin/search.rb#8
class Solargraph::Pin::Search::Result
  # @param match [Float] The match score for the pin
  # @param pin [Pin::Base]
  # @return [Result] a new instance of Result
  #
  # source://solargraph//lib/solargraph/pin/search.rb#17
  def initialize(match, pin); end

  # @return [Float]
  #
  # source://solargraph//lib/solargraph/pin/search.rb#10
  def match; end

  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/pin/search.rb#13
  def pin; end
end

# source://solargraph//lib/solargraph/pin/signature.rb#3
class Solargraph::Pin::Signature < ::Solargraph::Pin::Callable
  # @return [Signature] a new instance of Signature
  #
  # source://solargraph//lib/solargraph/pin/signature.rb#8
  def initialize(**splat); end

  # allow signature to be created before method pin, then set this
  # to the method pin
  #
  # source://solargraph//lib/solargraph/pin/signature.rb#6
  def closure=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/signature.rb#22
  def dodgy_return_type_source?; end

  # source://solargraph//lib/solargraph/pin/signature.rb#12
  def generics; end

  # source://solargraph//lib/solargraph/pin/signature.rb#16
  def identity; end

  # source://solargraph//lib/solargraph/pin/signature.rb#30
  def location; end

  # source://solargraph//lib/solargraph/pin/signature.rb#26
  def type_location; end

  # source://solargraph//lib/solargraph/pin/signature.rb#34
  def typify(api_map); end
end

# source://solargraph//lib/solargraph/pin/singleton.rb#5
class Solargraph::Pin::Singleton < ::Solargraph::Pin::Closure
  # @return [Singleton] a new instance of Singleton
  #
  # source://solargraph//lib/solargraph/pin/singleton.rb#6
  def initialize(name: T.unsafe(nil), location: T.unsafe(nil), closure: T.unsafe(nil), **splat); end
end

# source://solargraph//lib/solargraph/pin/symbol.rb#5
class Solargraph::Pin::Symbol < ::Solargraph::Pin::Base
  # @param location [Solargraph::Location]
  # @param name [String]
  # @return [Symbol] a new instance of Symbol
  #
  # source://solargraph//lib/solargraph/pin/symbol.rb#8
  def initialize(location, name, **kwargs); end

  # source://solargraph//lib/solargraph/pin/symbol.rb#23
  def closure; end

  # source://solargraph//lib/solargraph/pin/symbol.rb#31
  def comments; end

  # source://solargraph//lib/solargraph/pin/symbol.rb#27
  def completion_item_kind; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/pin/symbol.rb#48
  def deprecated?; end

  # source://solargraph//lib/solargraph/pin/symbol.rb#39
  def directives; end

  # source://solargraph//lib/solargraph/pin/symbol.rb#15
  def namespace; end

  # source://solargraph//lib/solargraph/pin/symbol.rb#19
  def path; end

  # source://solargraph//lib/solargraph/pin/symbol.rb#35
  def return_type; end

  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/pin/symbol.rb#44
  def visibility; end
end

# source://solargraph//lib/solargraph/pin/until.rb#5
class Solargraph::Pin::Until < ::Solargraph::Pin::Base
  include ::Solargraph::Pin::Breakable

  # @param receiver [Parser::AST::Node, nil]
  # @param node [Parser::AST::Node, nil]
  # @param context [ComplexType, nil]
  # @param args [::Array<Parameter>]
  # @return [Until] a new instance of Until
  #
  # source://solargraph//lib/solargraph/pin/until.rb#12
  def initialize(node: T.unsafe(nil), **splat); end
end

# source://solargraph//lib/solargraph/pin/while.rb#5
class Solargraph::Pin::While < ::Solargraph::Pin::Base
  include ::Solargraph::Pin::Breakable

  # @param receiver [Parser::AST::Node, nil]
  # @param node [Parser::AST::Node, nil]
  # @param context [ComplexType, nil]
  # @param args [::Array<Parameter>]
  # @return [While] a new instance of While
  #
  # source://solargraph//lib/solargraph/pin/while.rb#12
  def initialize(node: T.unsafe(nil), **splat); end
end

# source://solargraph//lib/solargraph/pin_cache.rb#6
module Solargraph::PinCache
  extend ::Solargraph::Logging

  class << self
    # The base directory where cached YARD documentation and serialized pins are serialized
    #
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#13
    def base_dir; end

    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#188
    def clear; end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#135
    def combined_path(gemspec, hash); end

    # @param gemspec [Gem::Specification]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#141
    def combined_path_prefix(gemspec); end

    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#64
    def core_path; end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#156
    def deserialize_combined_gem(gemspec, hash); end

    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#69
    def deserialize_core; end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#120
    def deserialize_rbs_collection_gem(gemspec, hash); end

    # @param require [String]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#52
    def deserialize_stdlib_require(require); end

    # @param gemspec [Gem::Specification]
    # @return [Array<Pin::Base>]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#87
    def deserialize_yard_gem(gemspec); end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#163
    def has_rbs_collection?(gemspec, hash); end

    # @param gemspec [Gem::Specification]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#100
    def has_yard?(gemspec); end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#107
    def rbs_collection_path(gemspec, hash); end

    # @param gemspec [Gem::Specification]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#113
    def rbs_collection_path_prefix(gemspec); end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @param pins [Array<Pin::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#149
    def serialize_combined_gem(gemspec, hash, pins); end

    # @param pins [Array<Pin::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#75
    def serialize_core(pins); end

    # @param gemspec [Gem::Specification]
    # @param hash [String, nil]
    # @param pins [Array<Pin::Base>] n
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#128
    def serialize_rbs_collection_gem(gemspec, hash, pins); end

    # @param require [String]
    # @param pins [Array<Pin::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#59
    def serialize_stdlib_require(require, pins); end

    # @param gemspec [Gem::Specification]
    # @param pins [Array<Pin::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#94
    def serialize_yard_gem(gemspec, pins); end

    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#40
    def stdlib_path; end

    # @param require [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#46
    def stdlib_require_path(require); end

    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#168
    def uncache_core; end

    # @param gemspec [Gem::Specification]
    # @param out [IO, nil]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#180
    def uncache_gem(gemspec, out: T.unsafe(nil)); end

    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#173
    def uncache_stdlib; end

    # The working directory for the current Ruby, RBS, and Solargraph versions.
    #
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#24
    def work_dir; end

    # @param gemspec [Gem::Specification]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#81
    def yard_gem_path(gemspec); end

    # @param gemspec [Gem::Specification]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#32
    def yardoc_path(gemspec); end

    private

    # @param path [String]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#206
    def exist?(*path); end

    # @param file [String]
    # @return [Array<Solargraph::Pin::Base>, nil]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#196
    def load(file); end

    # @param file [String]
    # @param pins [Array<Pin::Base>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#213
    def save(file, pins); end

    # @param path_segments [Array<String>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#223
    def uncache(*path_segments, out: T.unsafe(nil)); end

    # @param path_segments [Array<String>]
    # @return [void]
    #
    # source://solargraph//lib/solargraph/pin_cache.rb#233
    def uncache_by_prefix(*path_segments, out: T.unsafe(nil)); end
  end
end

# The zero-based line and column numbers of a position in a string.
#
# source://solargraph//lib/solargraph/position.rb#6
class Solargraph::Position
  include ::Solargraph::Equality

  # @param line [Integer]
  # @param character [Integer]
  # @return [Position] a new instance of Position
  #
  # source://solargraph//lib/solargraph/position.rb#19
  def initialize(line, character); end

  # @param other [Position]
  #
  # source://solargraph//lib/solargraph/position.rb#30
  def <=>(other); end

  # source://solargraph//lib/solargraph/position.rb#113
  def ==(other); end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/position.rb#13
  def character; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/position.rb#15
  def column; end

  # source://solargraph//lib/solargraph/position.rb#50
  def inspect; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/position.rb#10
  def line; end

  # Get a hash of the position. This representation is suitable for use in
  # the language server protocol.
  #
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/position.rb#43
  def to_hash; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/position.rb#25
  def equality_fields; end

  class << self
    # Get a position for the specified text and offset.
    #
    # @param text [String]
    # @param offset [Integer]
    # @raise [InvalidOffsetError]
    # @return [Position]
    #
    # source://solargraph//lib/solargraph/position.rb#81
    def from_offset(text, offset); end

    # Get a numeric offset for the specified text and a position identified
    # by its line and character.
    #
    # @param text [String]
    # @param line [Integer]
    # @param character [Integer]
    # @return [Integer]
    #
    # source://solargraph//lib/solargraph/position.rb#72
    def line_char_to_offset(text, line, character); end

    # A helper method for generating positions from arrays of integers. The
    # original parameter is returned if it is already a position.
    #
    # @param object [Position, Array(Integer, Integer)]
    # @raise [ArgumentError] if the object cannot be converted to a position.
    # @return [Position]
    #
    # source://solargraph//lib/solargraph/position.rb#107
    def normalize(object); end

    # Get a numeric offset for the specified text and position.
    #
    # @param text [String]
    # @param position [Position]
    # @return [Integer]
    #
    # source://solargraph//lib/solargraph/position.rb#59
    def to_offset(text, position); end
  end
end

# A pair of Positions that compose a section of text in code.
#
# source://solargraph//lib/solargraph/range.rb#6
class Solargraph::Range
  include ::Solargraph::Equality

  # @param start [Position]
  # @param ending [Position]
  # @return [Range] a new instance of Range
  #
  # source://solargraph//lib/solargraph/range.rb#17
  def initialize(start, ending); end

  # @param other [BasicObject]
  #
  # source://solargraph//lib/solargraph/range.rb#28
  def <=>(other); end

  # source://solargraph//lib/solargraph/range.rb#99
  def ==(other); end

  # True if the specified position is inside the range.
  #
  # @param position [Position, Array(Integer, Integer)]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/range.rb#52
  def contain?(position); end

  # @return [Position]
  #
  # source://solargraph//lib/solargraph/range.rb#13
  def ending; end

  # True if the range contains the specified position and the position does not precede it.
  #
  # @param position [Position, Array(Integer, Integer)]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/range.rb#64
  def include?(position); end

  # source://solargraph//lib/solargraph/range.rb#104
  def inspect; end

  # @return [Position]
  #
  # source://solargraph//lib/solargraph/range.rb#10
  def start; end

  # Get a hash of the range. This representation is suitable for use in
  # the language server protocol.
  #
  # @return [Hash<Symbol, Position>]
  #
  # source://solargraph//lib/solargraph/range.rb#41
  def to_hash; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/range.rb#23
  def equality_fields; end

  class << self
    # Get a range from a Parser range, usually found in
    # Parser::AST::Node#location#expression.
    #
    # @param expr [Parser::Source::Range]
    # @return [Range]
    #
    # source://solargraph//lib/solargraph/range.rb#95
    def from_expr(expr); end

    # Get a range from a node.
    #
    # @param node [Parser::AST::Node]
    # @return [Range, nil]
    #
    # source://solargraph//lib/solargraph/range.rb#84
    def from_node(node); end

    # Create a range from a pair of lines and characters.
    #
    # @param l1 [Integer] Starting line
    # @param c1 [Integer] Starting character
    # @param l2 [Integer] Ending line
    # @param c2 [Integer] Ending character
    # @return [Range]
    #
    # source://solargraph//lib/solargraph/range.rb#76
    def from_to(l1, c1, l2, c2); end
  end
end

# source://solargraph//lib/solargraph/rbs_map.rb#8
class Solargraph::RbsMap
  include ::Solargraph::Logging

  # @param library [String]
  # @param version [String, nil] ersion [String, nil
  # @param rbs_collection_config_path [String, Pathname, nil]
  # @param rbs_collection_paths [Array<Pathname, String>]
  # @return [RbsMap] a new instance of RbsMap
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#29
  def initialize(library, version = T.unsafe(nil), rbs_collection_config_path: T.unsafe(nil), rbs_collection_paths: T.unsafe(nil)); end

  # @return [String] representing the version of the RBS info fetched
  #   for the given library.  Must change when the RBS info is
  #   updated upstream for the same library and version.  May change
  #   if the config for where information comes form changes.
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#49
  def cache_key; end

  # Returns the value of attribute library.
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#19
  def library; end

  # @generic T
  # @param path [String]
  # @param klass [Class<generic<T>>]
  # @return [generic<T>, nil]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#100
  def path_pin(path, klass = T.unsafe(nil)); end

  # @param path [String]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#107
  def path_pins(path); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#92
  def pins; end

  # Returns the value of attribute rbs_collection_config_path.
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#23
  def rbs_collection_config_path; end

  # Returns the value of attribute rbs_collection_paths.
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#21
  def rbs_collection_paths; end

  # @return [RBS::Repository]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#116
  def repository; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#111
  def resolved?; end

  private

  # @param loader [RBS::EnvironmentLoader]
  # @param library [String]
  # @param version [String, nil]
  # @return [Boolean] true if adding the library succeeded
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#147
  def add_library(loader, library, version); end

  # @return [Conversions]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#139
  def conversions; end

  # @return [RBS::EnvironmentLoader]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#41
  def loader; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/rbs_map.rb#159
  def short_name; end

  class << self
    # @param gemspec [Gem::Specification]
    # @param rbs_collection_path [String, Pathname, nil]
    # @param rbs_collection_config_path [String, Pathname, nil]
    # @return [RbsMap]
    #
    # source://solargraph//lib/solargraph/rbs_map.rb#79
    def from_gemspec(gemspec, rbs_collection_path, rbs_collection_config_path); end

    # @param library [String]
    # @return [RbsMap]
    #
    # source://solargraph//lib/solargraph/rbs_map.rb#127
    def load(library); end
  end
end

# Functions for converting RBS declarations to Solargraph pins
#
# source://solargraph//lib/solargraph/rbs_map/conversions.rb#9
class Solargraph::RbsMap::Conversions
  include ::Solargraph::Logging

  # @param loader [RBS::EnvironmentLoader]
  # @return [Conversions] a new instance of Conversions
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#26
  def initialize(loader:); end

  # @return [RBS::EnvironmentLoader]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#33
  def loader; end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#36
  def pins; end

  private

  # @param decl [RBS::AST::Declarations::Class, RBS::AST::Declarations::Module]
  # @param namespace [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#786
  def add_mixins(decl, namespace); end

  # @param decl [RBS::AST::Members::Alias]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#669
  def alias_to_pin(decl, closure); end

  # @param decl [RBS::AST::Members::AttrAccessor]
  # @param closure [Pin::Namespace]
  # @param context [Context]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#572
  def attr_accessor_to_pin(decl, closure, context); end

  # @param decl [RBS::AST::Members::AttrReader, RBS::AST::Members::AttrAccessor]
  # @param closure [Pin::Namespace]
  # @param context [Context]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#515
  def attr_reader_to_pin(decl, closure, context); end

  # @param decl [RBS::AST::Members::AttrWriter, RBS::AST::Members::AttrAccessor]
  # @param closure [Pin::Namespace]
  # @param context [Context]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#539
  def attr_writer_to_pin(decl, closure, context); end

  # @param type_name [RBS::TypeName]
  # @param type_args [Enumerable<RBS::Types::Bases::Base>]
  # @return [ComplexType::UniqueType]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#702
  def build_type(type_name, type_args = T.unsafe(nil)); end

  # @sg-ignore
  #
  # @param decl [RBS::AST::Members::MethodDefinition, RBS::AST::Members::AttrReader, RBS::AST::Members::AttrAccessor]
  # @param closure [Pin::Closure]
  # @param context [Context]
  # @param scope [Symbol] :instance or :class
  # @param name [String] The name of the method
  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#356
  def calculate_method_visibility(decl, context, closure, scope, name); end

  # @param decl [RBS::AST::Members::ClassInstanceVariable]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#613
  def civar_to_pin(decl, closure); end

  # @param decl [RBS::AST::Declarations::ClassAlias]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#268
  def class_alias_decl_to_pin(decl); end

  # @param decl [RBS::AST::Declarations::Class]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#157
  def class_decl_to_pin(decl); end

  # @param decl [RBS::AST::Declarations::Constant]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#288
  def constant_decl_to_pin(decl); end

  # @param decl [RBS::AST::Declarations::Base]
  # @param closure [Pin::Closure]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#60
  def convert_decl_to_pin(decl, closure); end

  # @param member [RBS::AST::Members::Base, RBS::AST::Declarations::Base]
  # @param closure [Pin::Namespace]
  # @param context [Context]
  # @return [Context]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#119
  def convert_member_to_pin(member, closure, context); end

  # @param decl [RBS::AST::Declarations::Module, RBS::AST::Declarations::Class, RBS::AST::Declarations::Interface]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#110
  def convert_members_to_pins(decl, closure); end

  # @param decl [RBS::AST::Declarations::Module::Self]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#94
  def convert_self_type_to_pins(decl, closure); end

  # @param decl [RBS::AST::Declarations::Module]
  # @param module_pin [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#87
  def convert_self_types_to_pins(decl, module_pin); end

  # @param name [String]
  # @param tag [String]
  # @param comments [String]
  # @param decl [RBS::AST::Declarations::ClassAlias, RBS::AST::Declarations::Constant, RBS::AST::Declarations::ModuleAlias]
  # @param base [String, nil] Optional conversion of tag to base<tag>
  # @return [Solargraph::Pin::Constant]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#244
  def create_constant(name, tag, comments, decl, base = T.unsafe(nil)); end

  # @param decl [RBS::AST::Members::ClassVariable]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#596
  def cvar_to_pin(decl, closure); end

  # @param decl [RBS::AST::Members::Extend]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#657
  def extend_to_pin(decl, closure); end

  # @param decl [RBS::AST::Declarations::Global]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#295
  def global_decl_to_pin(decl); end

  # @param decl [RBS::AST::Members::Include]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#630
  def include_to_pin(decl, closure); end

  # @param decl [RBS::AST::Declarations::Interface]
  # @param closure [Pin::Closure]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#200
  def interface_decl_to_pin(decl, closure); end

  # @param decl [RBS::AST::Members::InstanceVariable]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#580
  def ivar_to_pin(decl, closure); end

  # @param loader [RBS::EnvironmentLoader]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#47
  def load_environment_to_pins(loader); end

  # @param location [RBS::Location, nil]
  # @return [Solargraph::Location, nil]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#445
  def location_decl_to_pin_location(location); end

  # @param decl [RBS::AST::Members::MethodDefinition]
  # @param closure [Pin::Closure]
  # @param context [Context]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#376
  def method_def_to_pin(decl, closure, context); end

  # @param decl [RBS::AST::Members::MethodDefinition]
  # @param pin [Pin::Method]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#428
  def method_def_to_sigs(decl, pin); end

  # @param type [RBS::MethodType]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#691
  def method_type_to_tag(type); end

  # @param decl [RBS::AST::Declarations::ModuleAlias]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#278
  def module_alias_decl_to_pin(decl); end

  # @param decl [RBS::AST::Declarations::Module]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#220
  def module_decl_to_pin(decl); end

  # @param type [RBS::Types::Bases::Base]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#723
  def other_type_to_tag(type); end

  # @param type [RBS::MethodType, RBS::Types::Block]
  # @param pin [Pin::Method]
  # @return [Array(Array<Pin::Parameter>, ComplexType)]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#457
  def parts_of_function(type, pin); end

  # @param decl [RBS::AST::Members::Prepend]
  # @param closure [Pin::Namespace]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#645
  def prepend_to_pin(decl, closure); end

  # @return [Hash{String => RBS::AST::Declarations::TypeAlias}]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#41
  def type_aliases; end

  # @param type_name [RBS::TypeName]
  # @param type_args [Enumerable<RBS::Types::Bases::Base>]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#717
  def type_tag(type_name, type_args = T.unsafe(nil)); end
end

# A container for tracking the current context of the RBS conversion
# process, e.g., what visibility is declared for methods in the current
# scope
#
# source://solargraph//lib/solargraph/rbs_map/conversions.rb#16
class Solargraph::RbsMap::Conversions::Context
  # @param visibility [Symbol]
  # @return [Context] a new instance of Context
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#20
  def initialize(visibility = T.unsafe(nil)); end

  # Returns the value of attribute visibility.
  #
  # source://solargraph//lib/solargraph/rbs_map/conversions.rb#17
  def visibility; end
end

# source://solargraph//lib/solargraph/rbs_map/conversions.rb#681
Solargraph::RbsMap::Conversions::RBS_TO_YARD_TYPE = T.let(T.unsafe(nil), Hash)

# Visibility overrides that will allow the Solargraph project
# and plugins to pass typechecking using SOLARGRAPH_ASSERTS=on,
# so that we can detect any regressions/issues elsewhere in the
# visibility logic.
#
# These should either reflect a bug upstream in the RBS
# definitions, or include a @todo indicating what needs to be
# fixed in Solargraph to properly understand it.
#
# @todo PR these fixes upstream and list open PRs here above
#   related overrides
# @todo externalize remaining overrides into yaml file, then
#   allow that to be extended via .solargraph.yml
# @type Hash{Array(String, [Hash{Array(String, Symbol, String) => Symbol}] Symbol, String) => Symbol}
#
# source://solargraph//lib/solargraph/rbs_map/conversions.rb#325
Solargraph::RbsMap::Conversions::VISIBILITY_OVERRIDE = T.let(T.unsafe(nil), Hash)

# Override pins to fill gaps in RbsMap::CoreMap coverage
#
# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#7
module Solargraph::RbsMap::CoreFills; end

# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#63
Solargraph::RbsMap::CoreFills::ALL = T.let(T.unsafe(nil), Array)

# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#61
Solargraph::RbsMap::CoreFills::ERRNOS = T.let(T.unsafe(nil), Array)

# @todo I don't see any direct link in RBS to build this from -
#   presumably RBS is using duck typing to match interfaces
#   against concrete classes
#
# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#47
Solargraph::RbsMap::CoreFills::INCLUDES = T.let(T.unsafe(nil), Array)

# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#10
Solargraph::RbsMap::CoreFills::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#18
Solargraph::RbsMap::CoreFills::MISSING = T.let(T.unsafe(nil), Array)

# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#24
Solargraph::RbsMap::CoreFills::OVERRIDES = T.let(T.unsafe(nil), Array)

# source://solargraph//lib/solargraph/rbs_map/core_fills.rb#8
Solargraph::RbsMap::CoreFills::Override = Solargraph::Pin::Reference::Override

# Ruby core pins
#
# source://solargraph//lib/solargraph/rbs_map/core_map.rb#7
class Solargraph::RbsMap::CoreMap
  # @return [CoreMap] a new instance of CoreMap
  #
  # source://solargraph//lib/solargraph/rbs_map/core_map.rb#15
  def initialize; end

  # @return [Enumerable<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/rbs_map/core_map.rb#18
  def pins; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/rbs_map/core_map.rb#9
  def resolved?; end

  private

  # @return [Conversions]
  #
  # source://solargraph//lib/solargraph/rbs_map/core_map.rb#49
  def conversions; end

  # @return [RBS::EnvironmentLoader]
  #
  # source://solargraph//lib/solargraph/rbs_map/core_map.rb#37
  def loader; end
end

# source://solargraph//lib/solargraph/rbs_map/core_map.rb#13
Solargraph::RbsMap::CoreMap::FILLS_DIRECTORY = T.let(T.unsafe(nil), String)

# Ruby stdlib pins
#
# source://solargraph//lib/solargraph/rbs_map/stdlib_map.rb#9
class Solargraph::RbsMap::StdlibMap < ::Solargraph::RbsMap
  # @param library [String]
  # @return [StdlibMap] a new instance of StdlibMap
  #
  # source://solargraph//lib/solargraph/rbs_map/stdlib_map.rb#16
  def initialize(library); end

  class << self
    # @param library [String]
    # @return [StdlibMap]
    #
    # source://solargraph//lib/solargraph/rbs_map/stdlib_map.rb#38
    def load(library); end
  end
end

# source://solargraph//lib/solargraph/server_methods.rb#6
module Solargraph::ServerMethods
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/server_methods.rb#8
  def available_port; end
end

# source://solargraph//lib/solargraph/shell.rb#8
class Solargraph::Shell < ::Thor
  include ::Solargraph::ServerMethods

  # @param gem [String]
  # @param version [String, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#105
  def cache(gem, version = T.unsafe(nil)); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#93
  def clear; end

  # @param directory [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#66
  def config(directory = T.unsafe(nil)); end

  # @param names [Array<String>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#141
  def gems(*names); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#238
  def list; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#159
  def reporters; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#212
  def scan; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#28
  def socket; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#47
  def stdio; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#173
  def typecheck(*files); end

  # @param gems [Array<String>]
  # @raise [ArgumentError]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#119
  def uncache(*gems); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#20
  def version; end

  private

  # @param gemspec [Gem::Specification]
  # @param api_map [ApiMap]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/shell.rb#265
  def do_cache(gemspec, api_map); end

  # @param pin [Solargraph::Pin::Base]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/shell.rb#248
  def pin_description(pin); end

  class << self
    # Tell Thor to ensure the process exits with status 1 if any error happens.
    #
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/shell.rb#12
    def exit_on_failure?; end
  end
end

# A Ruby file that has been parsed into an AST.
#
# source://solargraph//lib/solargraph/source.rb#8
class Solargraph::Source
  include ::Solargraph::Source::EncodingFixes

  # @param code [String]
  # @param filename [String, nil]
  # @param version [Integer]
  # @return [Source] a new instance of Source
  #
  # source://solargraph//lib/solargraph/source.rb#46
  def initialize(code, filename = T.unsafe(nil), version = T.unsafe(nil)); end

  # Get a hash of comments grouped by the line numbers of the associated code.
  #
  # @return [Hash{Integer => String}]
  #
  # source://solargraph//lib/solargraph/source.rb#236
  def associated_comments; end

  # @param range [Solargraph::Range]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#55
  def at(range); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#22
  def code; end

  # @param node [Parser::AST::Node]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#182
  def code_for(node); end

  # @param position [Position]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#160
  def comment_at?(position); end

  # @return [Hash{Integer => Solargraph::Parser::Snippet}]
  #
  # source://solargraph//lib/solargraph/source.rb#34
  def comments; end

  # @param node [Parser::AST::Node]
  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/source.rb#192
  def comments_for(node); end

  # @param position [Position, Array(Integer, Integer)]
  # @return [Source::Cursor]
  #
  # source://solargraph//lib/solargraph/source.rb#113
  def cursor_at(position); end

  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/source.rb#176
  def error_ranges; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#19
  def filename; end

  # Get an array of ranges that can be folded, e.g., the range of a class
  # definition or an if condition.
  #
  # See FOLDING_NODE_TYPES for the list of node types that can be folded.
  #
  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/source.rb#220
  def folding_ranges; end

  # @param l1 [Integer]
  # @param c1 [Integer]
  # @param l2 [Integer]
  # @param c2 [Integer]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#64
  def from_to(l1, c1, l2, c2); end

  # A location representing the file in its entirety.
  #
  # @return [Location]
  #
  # source://solargraph//lib/solargraph/source.rb#203
  def location; end

  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/source.rb#28
  def node; end

  # Get the nearest node that contains the specified index.
  #
  # @param line [Integer]
  # @param column [Integer]
  # @return [AST::Node]
  #
  # source://solargraph//lib/solargraph/source.rb#75
  def node_at(line, column); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#119
  def parsed?; end

  # @param name [String]
  # @return [Array<Location>]
  #
  # source://solargraph//lib/solargraph/source.rb#171
  def references(name); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#124
  def repaired?; end

  # @param position [Position]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#130
  def string_at?(position); end

  # @return [::Array<Range>]
  #
  # source://solargraph//lib/solargraph/source.rb#154
  def string_ranges; end

  # Synchronize the Source with an update. This method applies changes to the
  # code, parses the new code's AST, and returns the resulting Source object.
  #
  # @param updater [Source::Updater]
  # @return [Source]
  #
  # source://solargraph//lib/solargraph/source.rb#97
  def synchronize(updater); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#229
  def synchronized?; end

  # Get an array of nodes containing the specified index, starting with the
  # nearest node and ending with the root.
  #
  # @param line [Integer]
  # @param column [Integer]
  # @return [Array<AST::Node>]
  #
  # source://solargraph//lib/solargraph/source.rb#85
  def tree_at(line, column); end

  # @return [Integer]
  # @todo Deprecate?
  #
  # source://solargraph//lib/solargraph/source.rb#41
  def version; end

  protected

  # @return [Array<Change>]
  #
  # source://solargraph//lib/solargraph/source.rb#380
  def changes; end

  # @param val [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#430
  def code=(val); end

  # @return [Hash{Integer => String}] Hash{Integer => String}
  #
  # source://solargraph//lib/solargraph/source.rb#455
  def comments=(_arg0); end

  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/source.rb#440
  def error_ranges=(_arg0); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#385
  def filename=(_arg0); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/source.rb#391
  def finalize; end

  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/source.rb#437
  def node=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#452
  def parsed=(_arg0); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#446
  def repaired; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#443
  def repaired=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source.rb#458
  def synchronized=(_arg0); end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source.rb#388
  def version=(_arg0); end

  private

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/source.rb#463
  def code_lines; end

  # @return [Array<Solargraph::Range>]
  #
  # source://solargraph//lib/solargraph/source.rb#322
  def comment_ranges; end

  # @param line [Integer]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source.rb#261
  def first_not_empty_from(line); end

  # Get an array of foldable comment block ranges. Blocks are excluded if
  # they are less than 3 lines long.
  #
  # @return [Array<Range>]
  #
  # source://solargraph//lib/solargraph/source.rb#330
  def foldable_comment_block_ranges; end

  # @param top [Parser::AST::Node]
  # @param result [Array<Range>]
  # @param parent [Symbol, nil]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/source.rb#272
  def inner_folding_ranges(top, result = T.unsafe(nil), parent = T.unsafe(nil)); end

  # @param node [Parser::AST::Node, nil]
  # @param position [Position]
  # @param stack [Array<Parser::AST::Node>]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/source.rb#364
  def inner_tree_at(node, position, stack); end

  # @return [Array<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/source.rb#317
  def string_nodes; end

  # @param n [Parser::AST::Node, nil]
  # @return [Array<Parser::AST::Node>]
  #
  # source://solargraph//lib/solargraph/source.rb#348
  def string_nodes_in(n); end

  # A hash of line numbers and their associated comments.
  #
  # @return [Hash{Integer => Array<String>, nil}]
  #
  # source://solargraph//lib/solargraph/source.rb#312
  def stringified_comments; end

  # Get a string representation of an array of comments.
  #
  # @param comments [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source.rb#289
  def stringify_comment_array(comments); end

  class << self
    # @param filename [String]
    # @return [Solargraph::Source]
    #
    # source://solargraph//lib/solargraph/source.rb#470
    def load(filename); end

    # @param code [String]
    # @param filename [String, nil]
    # @param version [Integer]
    # @return [Solargraph::Source]
    #
    # source://solargraph//lib/solargraph/source.rb#481
    def load_string(code, filename = T.unsafe(nil), version = T.unsafe(nil)); end

    # @param comments [String]
    # @return [YARD::DocstringParser]
    #
    # source://solargraph//lib/solargraph/source.rb#487
    def parse_docstring(comments); end
  end
end

# Represents an expression as a single call chain at the parse
# tree level, made up of constants, variables, and method calls,
# each represented as a Link object.
#
# Computes Pins and/or ComplexTypes representing the interpreted
# expression.
#
# source://solargraph//lib/solargraph/source/chain/link.rb#5
class Solargraph::Source::Chain
  include ::Solargraph::Equality
  include ::Solargraph::Logging

  # @param node [Parser::AST::Node, nil]
  # @param links [::Array<Chain::Link>]
  # @param splat [Boolean]
  # @return [Chain] a new instance of Chain
  #
  # source://solargraph//lib/solargraph/source/chain.rb#59
  def initialize(links, node = T.unsafe(nil), splat = T.unsafe(nil)); end

  # @return [Chain]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#73
  def base; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#184
  def constant?; end

  # Determine potential Pins returned by this chain of words
  #
  # representing the place in which expression is evaluated (e.g.,
  # a Method pin, or a Module or Class pin if not run within a
  # method - both in terms of the closure around the chain, as well
  # as the self type used for any method calls in head position.
  #
  #   Requirements for name_pin:
  #
  #     * name_pin.context: This should be a type representing the
  #       namespace where we can look up non-local variables and
  #       method names.  If it is a Class<X>, we will look up
  #       :class scoped methods/variables.
  #
  #     * name_pin.binder: Used for method call lookups only
  #       (Chain::Call links).  For method calls as the first
  #       element in the chain, 'name_pin.binder' should be the
  #       same as name_pin.context above.  For method calls later
  #       in the chain (e.g., 'b' in a.b.c), it should represent
  #       'a'.
  #
  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base] A pin
  # @param locals [::Array<Pin::LocalVariable>] Any local
  #   variables / method parameters etc visible by the statement
  # @return [::Array<Pin::Base>] Pins representing possible return
  #   types of this method.
  #
  # source://solargraph//lib/solargraph/source/chain.rb#106
  def define(api_map, name_pin, locals); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#179
  def defined?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#199
  def desc; end

  # @sg-ignore
  #
  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base] The pin for the closure in which this code runs
  # @param locals [::Array<Pin::LocalVariable>]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#140
  def infer(api_map, name_pin, locals); end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @param locals [::Array<Pin::LocalVariable>]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#158
  def infer_uncached(api_map, name_pin, locals); end

  # @return [::Array<Source::Chain::Link>]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#47
  def links; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#171
  def literal?; end

  # Returns the value of attribute node.
  #
  # source://solargraph//lib/solargraph/source/chain.rb#49
  def node; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#192
  def nullable?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#188
  def splat?; end

  # source://solargraph//lib/solargraph/source/chain.rb#203
  def to_s; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#175
  def undefined?; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/source/chain.rb#52
  def equality_fields; end

  private

  # @param pins [::Array<Pin::Base>]
  # @param context [Pin::Base]
  # @param api_map [ApiMap]
  # @param locals [::Enumerable<Pin::LocalVariable>]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#216
  def infer_from_definitions(pins, context, api_map, locals); end

  # @param type [ComplexType]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain.rb#282
  def maybe_nil(type); end
end

# source://solargraph//lib/solargraph/source/chain/array.rb#4
class Solargraph::Source::Chain::Array < ::Solargraph::Source::Chain::Literal
  # @param children [::Array<Chain>]
  # @param node [Parser::AST::Node]
  # @return [Array] a new instance of Array
  #
  # source://solargraph//lib/solargraph/source/chain/array.rb#7
  def initialize(children, node); end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @param locals [::Array<Pin::Parameter, Pin::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/source/chain/array.rb#19
  def resolve(api_map, name_pin, locals); end

  # source://solargraph//lib/solargraph/source/chain/array.rb#12
  def word; end
end

# source://solargraph//lib/solargraph/source/chain/block_symbol.rb#6
class Solargraph::Source::Chain::BlockSymbol < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/block_symbol.rb#7
  def resolve(api_map, name_pin, locals); end
end

# source://solargraph//lib/solargraph/source/chain/block_variable.rb#6
class Solargraph::Source::Chain::BlockVariable < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/block_variable.rb#7
  def resolve(api_map, name_pin, locals); end
end

# Handles both method calls and local variable references by
# first looking for a variable with the name 'word', then
# proceeding to method signature resolution if not found.
#
# source://solargraph//lib/solargraph/source/chain/call.rb#11
class Solargraph::Source::Chain::Call < ::Solargraph::Source::Chain::Link
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @param word [String]
  # @param location [Location, nil]
  # @param arguments [::Array<Chain>]
  # @param block [Chain, nil]
  # @return [Call] a new instance of Call
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#30
  def initialize(word, location = T.unsafe(nil), arguments = T.unsafe(nil), block = T.unsafe(nil)); end

  # @return [::Array<Chain>]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#21
  def arguments; end

  # @return [Chain, nil]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#24
  def block; end

  # @return [Location]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#18
  def location; end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Closure] name_pin.binder should give us the type of the object on which 'word' will be invoked
  # @param locals [::Array<Pin::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#50
  def resolve(api_map, name_pin, locals); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#43
  def with_block?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#15
  def word; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#39
  def equality_fields; end

  private

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @param block_parameter_types [::Array<ComplexType>]
  # @param locals [::Array<Pin::LocalVariable>]
  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#322
  def block_call_type(api_map, name_pin, locals); end

  # @param api_map [ApiMap]
  # @param context [ComplexType]
  # @param block_parameter_types [::Array<ComplexType>]
  # @param locals [::Array<Pin::LocalVariable>]
  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#294
  def block_symbol_call_type(api_map, context, block_parameter_types, locals); end

  # @param docstring [YARD::Docstring]
  # @param context [ComplexType]
  # @return [ComplexType, nil]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#232
  def extra_return_type(docstring, context); end

  # @param api_map [ApiMap]
  # @return [Pin::Block, nil]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#310
  def find_block_pin(api_map); end

  # @param name_pin [Pin::Base]
  # @return [Pin::Method, nil]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#243
  def find_method_pin(name_pin); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#284
  def fix_block_pass; end

  # @param pins [::Enumerable<Pin::Method>]
  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @param locals [::Array<Solargraph::Pin::LocalVariable, Solargraph::Pin::Parameter>]
  # @return [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#75
  def inferred_pins(pins, api_map, name_pin, locals); end

  # @param pin [Pin::Base]
  # @param macro [YARD::Tags::MacroDirective]
  # @param api_map [ApiMap]
  # @param context [ComplexType]
  # @param locals [::Array<Pin::LocalVariable, Pin::Parameter>]
  # @return [Pin::ProxyType]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#209
  def inner_process_macro(pin, macro, api_map, context, locals); end

  # @param pin [Pin::Method]
  # @param api_map [ApiMap]
  # @param context [ComplexType]
  # @param locals [::Array<Solargraph::Pin::LocalVariable, Solargraph::Pin::Parameter>]
  # @return [Pin::ProxyType]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#193
  def process_directive(pin, api_map, context, locals); end

  # @param pin [Pin::Base]
  # @param api_map [ApiMap]
  # @param context [ComplexType]
  # @param locals [::Array<Solargraph::Pin::LocalVariable, Solargraph::Pin::Parameter>]
  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#174
  def process_macro(pin, api_map, context, locals); end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @return [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#255
  def super_pins(api_map, name_pin); end

  # @param type [ComplexType]
  # @param context [ComplexType]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#278
  def with_params(type, context); end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @return [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source/chain/call.rb#265
  def yield_pins(api_map, name_pin); end
end

# source://solargraph//lib/solargraph/source/chain/class_variable.rb#6
class Solargraph::Source::Chain::ClassVariable < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/class_variable.rb#7
  def resolve(api_map, name_pin, locals); end
end

# source://solargraph//lib/solargraph/source/chain/constant.rb#6
class Solargraph::Source::Chain::Constant < ::Solargraph::Source::Chain::Link
  # @return [Constant] a new instance of Constant
  #
  # source://solargraph//lib/solargraph/source/chain/constant.rb#7
  def initialize(word); end

  # source://solargraph//lib/solargraph/source/chain/constant.rb#11
  def resolve(api_map, name_pin, locals); end

  private

  # @param pin [Pin::Closure]
  # @return [::Array<String>]
  #
  # source://solargraph//lib/solargraph/source/chain/constant.rb#46
  def crawl_gates(pin); end

  # @param gate [String]
  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain/constant.rb#76
  def deep_constant_type(gate, api_map); end

  # @param pins [::Array<Pin::Base>]
  # @param api_map [ApiMap]
  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source/chain/constant.rb#62
  def first_pin_type(pins, api_map); end
end

# source://solargraph//lib/solargraph/source/chain/global_variable.rb#6
class Solargraph::Source::Chain::GlobalVariable < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/global_variable.rb#7
  def resolve(api_map, name_pin, locals); end
end

# source://solargraph//lib/solargraph/source/chain/hash.rb#6
class Solargraph::Source::Chain::Hash < ::Solargraph::Source::Chain::Literal
  # @param type [String]
  # @param node [Parser::AST::Node]
  # @param splatted [Boolean]
  # @return [Hash] a new instance of Hash
  #
  # source://solargraph//lib/solargraph/source/chain/hash.rb#10
  def initialize(type, node, splatted = T.unsafe(nil)); end

  # source://solargraph//lib/solargraph/source/chain/hash.rb#24
  def resolve(api_map, name_pin, locals); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/hash.rb#28
  def splatted?; end

  # source://solargraph//lib/solargraph/source/chain/hash.rb#20
  def word; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/source/chain/hash.rb#16
  def equality_fields; end
end

# Chain::Head is a link for ambiguous words, e.g.; `String` can refer to
# either a class (`String`) or a function (`Kernel#String`).
#
# @note Chain::Head is only intended to handle `self` and `super`.
#
# source://solargraph//lib/solargraph/source/chain/head.rb#10
class Solargraph::Source::Chain::Head < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/head.rb#11
  def resolve(api_map, name_pin, locals); end
end

# source://solargraph//lib/solargraph/source/chain/if.rb#6
class Solargraph::Source::Chain::If < ::Solargraph::Source::Chain::Link
  # @param links [::Array<Link>]
  # @return [If] a new instance of If
  #
  # source://solargraph//lib/solargraph/source/chain/if.rb#12
  def initialize(links); end

  # source://solargraph//lib/solargraph/source/chain/if.rb#21
  def resolve(api_map, name_pin, locals); end

  # source://solargraph//lib/solargraph/source/chain/if.rb#7
  def word; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/source/chain/if.rb#17
  def equality_fields; end
end

# source://solargraph//lib/solargraph/source/chain/instance_variable.rb#6
class Solargraph::Source::Chain::InstanceVariable < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/instance_variable.rb#7
  def resolve(api_map, name_pin, locals); end
end

# source://solargraph//lib/solargraph/source/chain/link.rb#6
class Solargraph::Source::Chain::Link
  include ::Solargraph::Equality
  include ::Solargraph::Logging

  # @param word [String]
  # @return [Link] a new instance of Link
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#16
  def initialize(word = T.unsafe(nil)); end

  # Make a copy of this link unmarked as the head of a chain
  #
  # @return [self]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#75
  def clone_body; end

  # Make a copy of this link marked as the head of a chain
  #
  # @return [self]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#68
  def clone_head; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#35
  def constant?; end

  # debugging description of contents; not for machine use
  #
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#49
  def desc; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#61
  def head?; end

  # source://solargraph//lib/solargraph/source/chain/link.rb#57
  def inspect; end

  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#13
  def last_context; end

  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#13
  def last_context=(_arg0); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#79
  def nullable?; end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @param locals [::Enumerable<Pin::Base>]
  # @return [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#43
  def resolve(api_map, name_pin, locals); end

  # source://solargraph//lib/solargraph/source/chain/link.rb#53
  def to_s; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#31
  def undefined?; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#10
  def word; end

  protected

  # @sg-ignore two problems - Declared return type
  #   ::Solargraph::Source::Chain::Array does not match inferred
  #   type ::Array(::Class<::Solargraph::Source::Chain::Link>,
  #   ::String) for
  #   Solargraph::Source::Chain::Link#equality_fields
  #   and
  #   Not enough arguments to Module#protected
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#27
  def equality_fields; end

  # Mark whether this link is the head of a chain
  #
  # @param bool [Boolean]
  # @return [self]
  #
  # source://solargraph//lib/solargraph/source/chain/link.rb#102
  def mark_head(bool); end
end

# source://solargraph//lib/solargraph/source/chain/literal.rb#8
class Solargraph::Source::Chain::Literal < ::Solargraph::Source::Chain::Link
  # @param type [String]
  # @param node [Parser::AST::Node, Object]
  # @return [Literal] a new instance of Literal
  #
  # source://solargraph//lib/solargraph/source/chain/literal.rb#17
  def initialize(type, node); end

  # source://solargraph//lib/solargraph/source/chain/literal.rb#37
  def resolve(api_map, name_pin, locals); end

  # Returns the value of attribute value.
  #
  # source://solargraph//lib/solargraph/source/chain/literal.rb#13
  def value; end

  # source://solargraph//lib/solargraph/source/chain/literal.rb#9
  def word; end

  protected

  # @sg-ignore Fix "Not enough arguments to Module#protected"
  #
  # source://solargraph//lib/solargraph/source/chain/literal.rb#33
  def equality_fields; end
end

# source://solargraph//lib/solargraph/source/chain/or.rb#6
class Solargraph::Source::Chain::Or < ::Solargraph::Source::Chain::Link
  # @param links [::Array<Link>]
  # @return [Or] a new instance of Or
  #
  # source://solargraph//lib/solargraph/source/chain/or.rb#12
  def initialize(links); end

  # source://solargraph//lib/solargraph/source/chain/or.rb#16
  def resolve(api_map, name_pin, locals); end

  # source://solargraph//lib/solargraph/source/chain/or.rb#7
  def word; end
end

# source://solargraph//lib/solargraph/source/chain/q_call.rb#4
class Solargraph::Source::Chain::QCall < ::Solargraph::Source::Chain::Call
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/chain/q_call.rb#5
  def nullable?; end
end

# source://solargraph//lib/solargraph/source/chain.rb#43
Solargraph::Source::Chain::UNDEFINED_CALL = T.let(T.unsafe(nil), Solargraph::Source::Chain::Call)

# source://solargraph//lib/solargraph/source/chain.rb#44
Solargraph::Source::Chain::UNDEFINED_CONSTANT = T.let(T.unsafe(nil), Solargraph::Source::Chain::Constant)

# source://solargraph//lib/solargraph/source/chain/variable.rb#6
class Solargraph::Source::Chain::Variable < ::Solargraph::Source::Chain::Link
  # source://solargraph//lib/solargraph/source/chain/variable.rb#7
  def resolve(api_map, name_pin, locals); end
end

# source://solargraph//lib/solargraph/source/chain/z_super.rb#6
class Solargraph::Source::Chain::ZSuper < ::Solargraph::Source::Chain::Call
  # @param word [String]
  # @param arguments [::Array<Chain>]
  # @param with_block [Boolean] True if the chain is inside a block
  # @param head [Boolean] True if the call is the start of its chain
  # @return [ZSuper] a new instance of ZSuper
  #
  # source://solargraph//lib/solargraph/source/chain/z_super.rb#17
  def initialize(word, with_block = T.unsafe(nil)); end

  # @return [::Array<Chain>]
  #
  # source://solargraph//lib/solargraph/source/chain/z_super.rb#11
  def arguments; end

  # @param api_map [ApiMap]
  # @param name_pin [Pin::Base]
  # @param locals [::Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source/chain/z_super.rb#24
  def resolve(api_map, name_pin, locals); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/chain/z_super.rb#8
  def word; end
end

# A change to be applied to text.
#
# source://solargraph//lib/solargraph/source/change.rb#7
class Solargraph::Source::Change
  include ::Solargraph::Source::EncodingFixes

  # @param range [Range] The starting and ending positions of the change.
  #   If nil, the original text will be overwritten.
  # @param new_text [String] The text to be changed.
  # @return [Change] a new instance of Change
  #
  # source://solargraph//lib/solargraph/source/change.rb#19
  def initialize(range, new_text); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/change.rb#14
  def new_text; end

  # @return [Range]
  #
  # source://solargraph//lib/solargraph/source/change.rb#11
  def range; end

  # Repair an update by replacing the new text with similarly formatted
  # whitespace.
  #
  # @param text [String] The text to be changed.
  # @return [String] The updated text.
  #
  # source://solargraph//lib/solargraph/source/change.rb#55
  def repair(text); end

  # Write the change to the specified text.
  #
  # @param text [String] The text to be changed.
  # @param nullable [Boolean] If true, minor changes that could generate
  #   syntax errors will be repaired.
  # @return [String] The updated text.
  #
  # source://solargraph//lib/solargraph/source/change.rb#30
  def write(text, nullable = T.unsafe(nil)); end

  private

  # @param text [String]
  # @param insert [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/change.rb#75
  def commit(text, insert); end
end

# Information about a single Position in a Source, including the
# word located there.
#
# source://solargraph//lib/solargraph/source/cursor.rb#8
class Solargraph::Source::Cursor
  # @param source [Source]
  # @param position [Position, Array(Integer, Integer)]
  # @return [Cursor] a new instance of Cursor
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#17
  def initialize(source, position); end

  # True if the statement at the cursor is an argument to a previous
  # method.
  #
  # Given the code `process(foo)`, a cursor pointing at `foo` would
  # identify it as an argument being passed to the `process` method.
  #
  # If #argument? is true, the #recipient method will return a cursor that
  # points to the method receiving the argument.
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#91
  def argument?; end

  # @return [Chain]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#77
  def chain; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#97
  def comment?; end

  # The part of the word after the current position. Given the text
  # `foo.bar`, the end_of_word at position (0,6) is `r`.
  #
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#53
  def end_of_word; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#23
  def filename; end

  # @return [AST::Node]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#119
  def node; end

  # @return [Position]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#124
  def node_position; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#145
  def offset; end

  # @return [Position]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#10
  def position; end

  # The range of the word at the current position.
  #
  # @return [Range]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#68
  def range; end

  # Get a cursor pointing to the method that receives the current statement
  # as an argument.
  #
  # @return [Cursor, nil]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#116
  def receiver; end

  # Get a cursor pointing to the method that receives the current statement
  # as an argument.
  #
  # @return [Cursor, nil]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#110
  def recipient; end

  # @return [Parser::AST::Node, nil]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#140
  def recipient_node; end

  # @return [Source]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#13
  def source; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#61
  def start_of_constant?; end

  # The part of the word before the current position. Given the text
  # `foo.bar`, the start_of_word at position(0, 6) is `ba`.
  #
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#39
  def start_of_word; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#102
  def string?; end

  # The whole word at the current position. Given the text `foo.bar`, the
  # word at position(0,6) is `bar`.
  #
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#31
  def word; end

  private

  # A regular expression to find the end of a word from an offset.
  #
  # @return [Regexp]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#161
  def end_word_pattern; end

  # A regular expression to find the start of a word from an offset.
  #
  # @return [Regexp]
  #
  # source://solargraph//lib/solargraph/source/cursor.rb#154
  def start_word_pattern; end
end

# source://solargraph//lib/solargraph/source/encoding_fixes.rb#5
module Solargraph::Source::EncodingFixes
  private

  # Convert strings to normalized UTF-8.
  #
  # @param string [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/encoding_fixes.rb#12
  def normalize(string); end

  class << self
    # Convert strings to normalized UTF-8.
    #
    # @param string [String]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/source/encoding_fixes.rb#12
    def normalize(string); end
  end
end

# source://solargraph//lib/solargraph/source.rb#210
Solargraph::Source::FOLDING_NODE_TYPES = T.let(T.unsafe(nil), Array)

# Information about a location in a source, including the location's word
# and signature, literal values at the base of signatures, and whether the
# location is inside a string or comment. ApiMaps use Fragments to provide
# results for completion and definition queries.
#
# source://solargraph//lib/solargraph/source/source_chainer.rb#10
class Solargraph::Source::SourceChainer
  # @param source [Source]
  # @param position [Position]
  # @return [SourceChainer] a new instance of SourceChainer
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#26
  def initialize(source, position); end

  # @return [Source::Chain]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#33
  def chain; end

  private

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#98
  def end_of_phrase; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#88
  def fixed_phrase; end

  # @return [Position]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#93
  def fixed_position; end

  # @param line [Integer]
  # @param column [Integer]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#125
  def get_offset(line, column); end

  # @param index [Integer]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#136
  def get_signature_data_at(index); end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#118
  def offset; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#83
  def phrase; end

  # @return [Position]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#77
  def position; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#130
  def signature_data; end

  # @return [Solargraph::Source]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#80
  def source; end

  # True if the current offset is inside a string.
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source/source_chainer.rb#112
  def string?; end

  class << self
    # @param source [Source]
    # @param position [Position, Array(Integer, Integer)]
    # @return [Source::Chain]
    #
    # source://solargraph//lib/solargraph/source/source_chainer.rb#19
    def chain(source, position); end

    private

    # source://solargraph//lib/solargraph/source/source_chainer.rb#13
    def new(*_arg0); end
  end
end

# Updaters contain changes to be applied to a source. The source applies
# the update via the Source#synchronize method.
#
# source://solargraph//lib/solargraph/source/updater.rb#8
class Solargraph::Source::Updater
  # @param filename [String] The file to update.
  # @param version [Integer] A version number associated with this update.
  # @param changes [Array<Solargraph::Source::Change>] The changes.
  # @return [Updater] a new instance of Updater
  #
  # source://solargraph//lib/solargraph/source/updater.rb#21
  def initialize(filename, version, changes); end

  # @return [Array<Change>]
  #
  # source://solargraph//lib/solargraph/source/updater.rb#16
  def changes; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/updater.rb#10
  def filename; end

  # @param text [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/updater.rb#47
  def repair(text); end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source/updater.rb#13
  def version; end

  # @param text [String]
  # @param nullable [Boolean]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source/updater.rb#33
  def write(text, nullable = T.unsafe(nil)); end
end

# An index of Pins and other ApiMap-related data for a single Source
# that can be queried.
#
# source://solargraph//lib/solargraph/source_map.rb#10
class Solargraph::SourceMap
  # @param source [Source]
  # @return [SourceMap] a new instance of SourceMap
  #
  # source://solargraph//lib/solargraph/source_map.rb#35
  def initialize(source); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#25
  def all_pins; end

  # A hash representing the state of the source map's API.
  #
  # ApiMap#catalog uses this value to determine whether it needs to clear its
  # cache.
  #
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source_map.rb#60
  def api_hash; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source_map.rb#70
  def code; end

  # @return [Environ]
  #
  # source://solargraph//lib/solargraph/source_map.rb#80
  def conventions_environ; end

  # @param position [Position]
  # @return [Source::Cursor]
  #
  # source://solargraph//lib/solargraph/source_map.rb#100
  def cursor_at(position); end

  # all pins except Solargraph::Pin::Reference::Reference
  #
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#86
  def document_symbols; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/source_map.rb#65
  def filename; end

  # @param path [String]
  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/source_map.rb#106
  def first_pin(path); end

  # @return [Array<Pin::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#30
  def locals; end

  # @param location [Location]
  # @return [Array<Pin::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#139
  def locals_at(location); end

  # @param line [Integer]
  # @param character [Integer]
  # @return [Pin::Namespace, Pin::Method, Pin::Block]
  #
  # source://solargraph//lib/solargraph/source_map.rb#127
  def locate_block_pin(line, character); end

  # @param line [Integer]
  # @param character [Integer]
  # @return [Pin::Method, Pin::Namespace]
  #
  # source://solargraph//lib/solargraph/source_map.rb#120
  def locate_named_path_pin(line, character); end

  # @param location [Solargraph::Location]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#112
  def locate_pins(location); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#20
  def pins; end

  # @generic T
  # @param klass [Class<generic<T>>]
  # @return [Array<generic<T>>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#50
  def pins_by_class(klass); end

  # @param query [String]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#94
  def query_symbols(query); end

  # @param name [String]
  # @return [Array<Location>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#133
  def references(name); end

  # @return [Array<Pin::Reference::Require>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#75
  def requires; end

  # @return [Source]
  #
  # source://solargraph//lib/solargraph/source_map.rb#17
  def source; end

  private

  # @param line [Integer]
  # @param character [Integer]
  # @param klasses [Array<Class>]
  # @return [Pin::Base, nil]
  #
  # source://solargraph//lib/solargraph/source_map.rb#193
  def _locate_pin(line, character, *klasses); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#185
  def convention_pins; end

  # @return [Hash{Class => Array<Pin::Base>}]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map.rb#173
  def convention_pins=(_arg0); end

  # @return [Data]
  #
  # source://solargraph//lib/solargraph/source_map.rb#180
  def data; end

  # source://solargraph//lib/solargraph/source_map.rb#175
  def pin_class_hash; end

  class << self
    # @param filename [String]
    # @return [SourceMap]
    #
    # source://solargraph//lib/solargraph/source_map.rb#148
    def load(filename); end

    # @param code [String]
    # @param filename [String, nil]
    # @return [SourceMap]
    #
    # source://solargraph//lib/solargraph/source_map.rb#156
    def load_string(code, filename = T.unsafe(nil)); end

    # @deprecated
    # @param source [Source]
    # @return [SourceMap]
    #
    # source://solargraph//lib/solargraph/source_map.rb#164
    def map(source); end
  end
end

# A static analysis tool for obtaining definitions, Completions,
# signatures, and type inferences from a Cursor.
#
# source://solargraph//lib/solargraph/source_map/clip.rb#8
class Solargraph::SourceMap::Clip
  # @param api_map [ApiMap]
  # @param cursor [Source::Cursor]
  # @return [Clip] a new instance of Clip
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#11
  def initialize(api_map, cursor); end

  # @return [Completion]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#34
  def complete; end

  # @return [Array<Pin::Base>] Relevant pins for infering the type of the Cursor's position
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#20
  def define; end

  # @return [::Array<String>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#74
  def gates; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#78
  def in_block?; end

  # @return [ComplexType]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#53
  def infer; end

  # Get an array of all the locals that are visible from the cursors's
  # position. Locals can be local variables, method parameters, or block
  # parameters. The array starts with the nearest local pin.
  #
  # @return [::Array<Solargraph::Pin::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#69
  def locals; end

  # @return [Array<Pin::Method>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#46
  def signify; end

  # @param phrase [String]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#88
  def translate(phrase); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#29
  def types; end

  private

  # @return [ApiMap]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#96
  def api_map; end

  # @return [Solargraph::Pin::Closure]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#112
  def block; end

  # @return [Completion]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#178
  def code_complete; end

  # @return [Array<Pin::KeywordParam>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#124
  def complete_keyword_parameters; end

  # The context at the current position.
  #
  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#119
  def context_pin; end

  # @return [Source::Cursor]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#99
  def cursor; end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#226
  def file_global_methods; end

  # @return [Location]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#107
  def location; end

  # @param result [Enumerable<Pin::Base>]
  # @return [Completion]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#149
  def package_completions(result); end

  # @return [SourceMap]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#102
  def source_map; end

  # @return [Completion]
  #
  # source://solargraph//lib/solargraph/source_map/clip.rb#159
  def tag_complete; end
end

# The result of a completion request containing the pins that describe
# completion options and the range to be replaced.
#
# source://solargraph//lib/solargraph/source_map/completion.rb#8
class Solargraph::SourceMap::Completion
  # @param pins [Array<Solargraph::Pin::Base>]
  # @param range [Solargraph::Range]
  # @return [Completion] a new instance of Completion
  #
  # source://solargraph//lib/solargraph/source_map/completion.rb#17
  def initialize(pins, range); end

  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map/completion.rb#10
  def pins; end

  # @return [Solargraph::Range]
  #
  # source://solargraph//lib/solargraph/source_map/completion.rb#13
  def range; end
end

# source://solargraph//lib/solargraph/source_map/data.rb#5
class Solargraph::SourceMap::Data
  # @param source [Solargraph::Source]
  # @return [Data] a new instance of Data
  #
  # source://solargraph//lib/solargraph/source_map/data.rb#7
  def initialize(source); end

  # @return [Array<Solargraph::LocalVariable>]
  #
  # source://solargraph//lib/solargraph/source_map/data.rb#18
  def locals; end

  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map/data.rb#12
  def pins; end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/source_map/data.rb#26
  def generate; end
end

# The Mapper generates pins and other data for SourceMaps.
#
# This class is used internally by the SourceMap class. Users should not
# normally need to call it directly.
#
# source://solargraph//lib/solargraph/source_map/mapper.rb#10
class Solargraph::SourceMap::Mapper
  # @param position [Solargraph::Position]
  # @return [Solargraph::Pin::Closure]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#64
  def closure_at(position); end

  # @param comment [String]
  # @param tag [String]
  # @param start [Integer]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#91
  def find_directive_line_number(comment, tag, start); end

  # Generate the data.
  #
  # @param source [Source]
  # @return [Array]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#21
  def map(source); end

  # @param line1 [Integer]
  # @param line2 [Integer]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#221
  def no_empty_lines?(line1, line2); end

  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#57
  def pins; end

  # @param source_position [Position]
  # @param comment_position [Position]
  # @param comment [String]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#72
  def process_comment(source_position, comment_position, comment); end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#247
  def process_comment_directives; end

  # @param source_position [Position]
  # @param comment_position [Position]
  # @param directive [YARD::Tags::Directive]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#106
  def process_directive(source_position, comment_position, directive); end

  # @param comment [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#227
  def remove_inline_comment_hashes(comment); end

  # @param filename [String]
  # @param code [String]
  # @return [Array]
  #
  # source://solargraph//lib/solargraph/source_map/mapper.rb#40
  def unmap(filename, code); end

  class << self
    # @param source [Source]
    # @return [Array]
    #
    # source://solargraph//lib/solargraph/source_map/mapper.rb#50
    def map(source); end

    private

    # source://solargraph//lib/solargraph/source_map/mapper.rb#13
    def new(*_arg0); end
  end
end

# source://solargraph//lib/solargraph/source_map/mapper.rb#15
Solargraph::SourceMap::Mapper::DIRECTIVE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://solargraph//lib/solargraph.rb#18
class Solargraph::SourceNotAvailableError < ::StandardError; end

# A static analysis tool for validating data types.
#
# source://solargraph//lib/solargraph/type_checker.rb#6
class Solargraph::TypeChecker
  include ::Solargraph::TypeChecker::Checks
  include ::Solargraph::Parser::ParserGem::NodeMethods

  # @param filename [String]
  # @param api_map [ApiMap, nil]
  # @param level [Symbol]
  # @return [TypeChecker] a new instance of TypeChecker
  #
  # source://solargraph//lib/solargraph/type_checker.rb#27
  def initialize(filename, api_map: T.unsafe(nil), level: T.unsafe(nil)); end

  # @return [ApiMap]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#22
  def api_map; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#16
  def filename; end

  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#47
  def problems; end

  # @return [Rules]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#19
  def rules; end

  # @return [Source]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#42
  def source; end

  # @return [SourceMap]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#37
  def source_map; end

  private

  # @param pin [Pin::Method]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#680
  def abstract?(pin); end

  # @return [Set<Integer>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#713
  def all_sg_ignore_lines; end

  # @return [Array<Pin::BaseVariable>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#231
  def all_variables; end

  # @param chain [Solargraph::Source::Chain]
  # @param api_map [Solargraph::ApiMap]
  # @param closure_pin [Solargraph::Pin::Closure]
  # @param locals [Array<Solargraph::Pin::Base>]
  # @param location [Solargraph::Location]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#300
  def argument_problems_for(chain, api_map, closure_pin, locals, location); end

  # @param pin [Pin::Method]
  # @param arguments [Array<Source::Chain>]
  # @param location [Location]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#591
  def arity_problems_for(pin, arguments, location); end

  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#255
  def call_problems; end

  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#236
  def const_problems; end

  # @param pin [Pin::BaseVariable]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#560
  def declared_externally?(pin); end

  # @param pin [Pin::Base]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#555
  def external?(pin); end

  # @param pin [Pin::Method]
  # @return [Array<Source::Chain>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#687
  def fake_args_for(pin); end

  # @param pins [Array<Pin::Method>]
  # @return [Hash{String => Hash{Symbol => String, ComplexType}}]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#517
  def first_param_hash(pins); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#188
  def ignored_pins; end

  # @param pin [Pin::Base]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#542
  def internal?(pin); end

  # True if the pin is either internal (part of the workspace) or from the core/stdlib
  #
  # @param pin [Pin::Base]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#549
  def internal_or_core?(pin); end

  # @param sig [Pin::Signature]
  # @param argchain [Source::Chain]
  # @param api_map [ApiMap]
  # @param block_pin [Pin::Block]
  # @param locals [Array<Pin::LocalVariable>]
  # @param location [Location]
  # @param pin [Pin::Method]
  # @param params [Hash{String => Hash{Symbol => String, Solargraph::ComplexType}}]
  # @param idx [Integer]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#439
  def kwarg_problems_for(sig, argchain, api_map, block_pin, locals, location, pin, params, idx); end

  # @param api_map [ApiMap]
  # @param block_pin [Pin::Block]
  # @param locals [Array<Pin::LocalVariable>]
  # @param location [Location]
  # @param pin [Pin::Method]
  # @param params [Hash{String => [nil, Hash]}]
  # @param kwargs [Hash{Symbol => Source::Chain}]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#475
  def kwrestarg_problems_for(api_map, block_pin, locals, location, pin, params, kwargs); end

  # @param pin [Pin::Method]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#153
  def method_param_type_problems_for(pin); end

  # @param pin [Pin::Method]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#96
  def method_return_type_problems_for(pin); end

  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#84
  def method_tag_problems; end

  # @param parameters [Enumerable<Pin::Parameter>]
  # @param pin [Pin::Method]
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#675
  def optional_param_count(parameters); end

  # @param pin [Pin::Method]
  # @return [Hash{String => Hash{Symbol => String, ComplexType}}]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#490
  def param_hash(pin); end

  # @param pin [Pin::Method]
  # @param parameters [Array<Pin::Parameter>]
  # @param arguments [Array<Source::Chain>]
  # @param location [Location]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#605
  def parameterized_arity_problems_for(pin, parameters, arguments, location); end

  # @param parameters [Enumerable<Pin::Parameter>]
  # @return [Integer]
  # @todo need to use generic types in method to choose correct
  #   signature and generate Integer as return type
  #
  # source://solargraph//lib/solargraph/type_checker.rb#668
  def required_param_count(parameters); end

  # @param pin [Pin::Base]
  # @return [Boolean]
  # @todo This is not optimal. A better solution would probably be to mix
  #   namespace alias into types at the ApiMap level.
  #
  # source://solargraph//lib/solargraph/type_checker.rb#135
  def resolved_constant?(pin); end

  # @return [Set<Integer>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#708
  def sg_ignore_lines_processed; end

  # @param location [Location]
  # @param locals [Array<Pin::LocalVariable>]
  # @param closure_pin [Pin::Closure]
  # @param params [Hash{String => Hash{Symbol => String, Solargraph::ComplexType}}]
  # @param arguments [Array<Source::Chain>]
  # @param sig [Pin::Signature]
  # @param pin [Pin::Method]
  # @param pins [Array<Pin::Method>]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#360
  def signature_argument_problems_for(location, locals, closure_pin, params, arguments, sig, pin); end

  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#725
  def unneeded_sgignore_problems; end

  # @return [Array<Integer>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#720
  def unprocessed_sg_ignore_lines; end

  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#193
  def variable_type_tag_problems; end

  # @param pin [Pin::Base]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#147
  def virtual_pin?(pin); end

  # @param problems [Array<Problem>]
  # @return [Array<Problem>]
  #
  # source://solargraph//lib/solargraph/type_checker.rb#738
  def without_ignored(problems); end

  class << self
    # @param filename [String]
    # @param level [Symbol]
    # @return [self]
    #
    # source://solargraph//lib/solargraph/type_checker.rb#62
    def load(filename, level = T.unsafe(nil)); end

    # @param code [String]
    # @param filename [String, nil]
    # @param level [Symbol]
    # @return [self]
    #
    # source://solargraph//lib/solargraph/type_checker.rb#73
    def load_string(code, filename = T.unsafe(nil), level = T.unsafe(nil)); end
  end
end

# Helper methods for performing type checks
#
# source://solargraph//lib/solargraph/type_checker/checks.rb#7
module Solargraph::TypeChecker::Checks
  private

  # @param api_map [ApiMap]
  # @param inferred [ComplexType]
  # @param expected [ComplexType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/checks.rb#75
  def all_types_match?(api_map, inferred, expected); end

  # @param api_map [ApiMap]
  # @param expected [ComplexType]
  # @param inferred [ComplexType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/checks.rb#52
  def any_types_match?(api_map, expected, inferred); end

  # @param api_map [ApiMap]
  # @param expected [ComplexType]
  # @param inferred [ComplexType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/checks.rb#90
  def duck_types_match?(api_map, expected, inferred); end

  # @param api_map [ApiMap]
  # @param cls1 [ComplexType::UniqueType]
  # @param cls2 [ComplexType::UniqueType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/checks.rb#114
  def either_way?(api_map, cls1, cls2); end

  # @param type [ComplexType::UniqueType]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/type_checker/checks.rb#102
  def fuzz(type); end

  # Compare an expected type with an inferred type. Common usage is to
  # check if the type declared in a method's @return tag matches the type
  # inferred from static analysis of the code.
  #
  # @param api_map [ApiMap]
  # @param expected [ComplexType]
  # @param inferred [ComplexType]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/checks.rb#18
  def types_match?(api_map, expected, inferred); end

  class << self
    # @param api_map [ApiMap]
    # @param inferred [ComplexType]
    # @param expected [ComplexType]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/type_checker/checks.rb#75
    def all_types_match?(api_map, inferred, expected); end

    # @param api_map [ApiMap]
    # @param expected [ComplexType]
    # @param inferred [ComplexType]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/type_checker/checks.rb#52
    def any_types_match?(api_map, expected, inferred); end

    # @param api_map [ApiMap]
    # @param expected [ComplexType]
    # @param inferred [ComplexType]
    # @raise [ArgumentError]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/type_checker/checks.rb#90
    def duck_types_match?(api_map, expected, inferred); end

    # @param api_map [ApiMap]
    # @param cls1 [ComplexType::UniqueType]
    # @param cls2 [ComplexType::UniqueType]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/type_checker/checks.rb#114
    def either_way?(api_map, cls1, cls2); end

    # @param type [ComplexType::UniqueType]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/type_checker/checks.rb#102
    def fuzz(type); end

    # Compare an expected type with an inferred type. Common usage is to
    # check if the type declared in a method's @return tag matches the type
    # inferred from static analysis of the code.
    #
    # @param api_map [ApiMap]
    # @param expected [ComplexType]
    # @param inferred [ComplexType]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/type_checker/checks.rb#18
    def types_match?(api_map, expected, inferred); end
  end
end

# Data about a method parameter definition. This is the information from
# the args list in the def call, not the `@param` tags.
#
# source://solargraph//lib/solargraph/type_checker/param_def.rb#8
class Solargraph::TypeChecker::ParamDef
  # @param name [String]
  # @param type [Symbol] The type of parameter, such as :req, :opt, :rest, etc.
  # @return [ParamDef] a new instance of ParamDef
  #
  # source://solargraph//lib/solargraph/type_checker/param_def.rb#17
  def initialize(name, type); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/type_checker/param_def.rb#10
  def name; end

  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/type_checker/param_def.rb#13
  def type; end

  class << self
    # Get an array of ParamDefs from a method pin.
    #
    # @param pin [Solargraph::Pin::Method]
    # @return [Array<ParamDef>]
    #
    # source://solargraph//lib/solargraph/type_checker/param_def.rb#27
    def from(pin); end
  end
end

# A problem reported by TypeChecker.
#
# source://solargraph//lib/solargraph/type_checker/problem.rb#7
class Solargraph::TypeChecker::Problem
  # @param location [Solargraph::Location]
  # @param message [String]
  # @param pin [Solargraph::Pin::Base, nil]
  # @param suggestion [String, nil]
  # @return [Problem] a new instance of Problem
  #
  # source://solargraph//lib/solargraph/type_checker/problem.rb#24
  def initialize(location, message, pin: T.unsafe(nil), suggestion: T.unsafe(nil)); end

  # @return [Solargraph::Location]
  #
  # source://solargraph//lib/solargraph/type_checker/problem.rb#9
  def location; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/type_checker/problem.rb#12
  def message; end

  # @return [Pin::Base]
  #
  # source://solargraph//lib/solargraph/type_checker/problem.rb#15
  def pin; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/type_checker/problem.rb#18
  def suggestion; end
end

# Definitions of type checking rules to be performed at various levels
#
# source://solargraph//lib/solargraph/type_checker/rules.rb#7
class Solargraph::TypeChecker::Rules
  # @param level [Symbol]
  # @return [Rules] a new instance of Rules
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#23
  def initialize(level); end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#33
  def ignore_all_undefined?; end

  # @return [Symbol]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#17
  def level; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#49
  def must_tag_or_infer?; end

  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#20
  def rank; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#57
  def require_all_return_types_match_inferred?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#45
  def require_type_tags?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#41
  def validate_calls?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#37
  def validate_consts?; end

  # We keep this at strong because if you added an @ sg-ignore to
  # address a strong-level issue, then ran at a lower level, you'd
  # get a false positive - we don't run stronger level checks than
  # requested for performance reasons
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#65
  def validate_sg_ignores?; end

  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/type_checker/rules.rb#53
  def validate_tags?; end
end

# source://solargraph//lib/solargraph/type_checker/rules.rb#8
Solargraph::TypeChecker::Rules::LEVELS = T.let(T.unsafe(nil), Hash)

# source://solargraph//lib/solargraph/version.rb#4
Solargraph::VERSION = T.let(T.unsafe(nil), String)

# source://solargraph//lib/solargraph.rb#54
Solargraph::VIEWS_PATH = T.let(T.unsafe(nil), String)

# A workspace consists of the files in a project's directory and the
# project's configuration. It provides a Source for each file to be used
# in an associated Library or ApiMap.
#
# source://solargraph//lib/solargraph/workspace.rb#11
class Solargraph::Workspace
  # @param directory [String]
  # @param config [Config, nil]
  # @param server [Hash]
  # @return [Workspace] a new instance of Workspace
  #
  # source://solargraph//lib/solargraph/workspace.rb#25
  def initialize(directory = T.unsafe(nil), config = T.unsafe(nil), server = T.unsafe(nil)); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/workspace.rb#158
  def command_path; end

  # @return [Solargraph::Workspace::Config]
  #
  # source://solargraph//lib/solargraph/workspace.rb#43
  def config; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/workspace.rb#16
  def directory; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/workspace.rb#163
  def directory_or_nil; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace.rb#82
  def filenames; end

  # True if the workspace has a root Gemfile.
  #
  # @return [Boolean]
  # @todo Handle projects with custom Bundler/Gemfile setups (see DocMap#gemspecs_required_from_bundler)
  #
  # source://solargraph//lib/solargraph/workspace.rb#172
  def gemfile?; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace.rb#19
  def gemnames; end

  # True if the workspace contains at least one gemspec file.
  #
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/workspace.rb#120
  def gemspec?; end

  # Get an array of all gemspec files in the workspace.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace.rb#127
  def gemspecs; end

  # @param filename [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/workspace.rb#93
  def has_file?(filename); end

  # Merge the source. A merge will update the existing source for the file
  # or add it to the sources if the workspace is configured to include it.
  # The source is ignored if the configuration excludes it.
  #
  # @param sources [Array<Solargraph::Source>]
  # @return [Boolean] True if the source was added to the workspace
  #
  # source://solargraph//lib/solargraph/workspace.rb#53
  def merge(*sources); end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/workspace.rb#140
  def rbs_collection_config_path; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/workspace.rb#135
  def rbs_collection_path; end

  # Remove a source from the workspace. The source will not be removed if
  # its file exists and the workspace is configured to include it.
  #
  # @param filename [String]
  # @return [Boolean] True if the source was removed from the workspace
  #
  # source://solargraph//lib/solargraph/workspace.rb#75
  def remove(filename); end

  # The require paths associated with the workspace.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace.rb#37
  def require_paths; end

  # Get a source by its filename.
  #
  # @param filename [String]
  # @return [Solargraph::Source]
  #
  # source://solargraph//lib/solargraph/workspace.rb#101
  def source(filename); end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace.rb#20
  def source_gems; end

  # @return [Array<Solargraph::Source>]
  #
  # source://solargraph//lib/solargraph/workspace.rb#87
  def sources; end

  # Synchronize the workspace from the provided updater.
  #
  # @param updater [Source::Updater]
  # @return [void]
  #
  # source://solargraph//lib/solargraph/workspace.rb#153
  def synchronize!(updater); end

  # True if the path resolves to a file in the workspace's require paths.
  #
  # @param path [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/workspace.rb#109
  def would_require?(path); end

  private

  # @return [void]
  #
  # source://solargraph//lib/solargraph/workspace.rb#190
  def load_sources; end

  # @return [String, nil]
  #
  # source://solargraph//lib/solargraph/workspace.rb#217
  def read_rbs_collection_path; end

  # @return [void]
  #
  # source://solargraph//lib/solargraph/workspace.rb#206
  def require_plugins; end

  # The language server configuration (or an empty hash if the workspace was
  # not initialized from a server).
  #
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/workspace.rb#182
  def server; end

  # @return [Hash{String => Solargraph::Source}]
  #
  # source://solargraph//lib/solargraph/workspace.rb#185
  def source_hash; end
end

# Configuration data for a workspace.
#
# source://solargraph//lib/solargraph/workspace/config.rb#9
class Solargraph::Workspace::Config
  # @param directory [String]
  # @return [Config] a new instance of Config
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#22
  def initialize(directory = T.unsafe(nil)); end

  # @param filename [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#46
  def allow?(filename); end

  # The calculated array of (included - excluded) files in the workspace.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#56
  def calculated; end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#15
  def directory; end

  # An array of domains configured for the workspace.
  # A domain is a namespace that the ApiMap should include in the global
  # namespace. It's typically used to identify available DSLs.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#66
  def domains; end

  # An array of files excluded from the workspace.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#40
  def excluded; end

  # A hash of options supported by the formatter
  #
  # @return [Hash]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#94
  def formatter; end

  # An array of files included in the workspace (before calculating excluded files).
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#32
  def included; end

  # The maximum number of files to parse from the workspace.
  #
  # @return [Integer]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#108
  def max_files; end

  # An array of plugins to require.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#101
  def plugins; end

  # @return [Hash{String => Array, Hash, Integer, nil}]
  # @todo To make this strongly typed we'll need a record syntax
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#19
  def raw_data; end

  # An array of reporters to use for diagnostics.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#87
  def reporters; end

  # An array of load paths for required paths.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#80
  def require_paths; end

  # An array of required paths to add to the workspace.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#73
  def required; end

  private

  # @return [Hash{String => Array<undefined>, Hash{String => undefined}, Integer}]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#127
  def config_data; end

  # @return [Hash{String => Array, Hash, Integer}]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#150
  def default_config; end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#228
  def excluded_directories; end

  # True if the glob translates to a whole directory.
  #
  # @example
  #   glob_is_directory?('path/to/dir')       # => true
  #   glob_is_directory?('path/to/dir/**/*)   # => true
  #   glob_is_directory?('path/to/file.txt')  # => false
  #   glob_is_directory?('path/to/*.txt')     # => false
  # @param glob [String]
  # @return [Boolean]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#212
  def glob_is_directory?(glob); end

  # Translate a glob to a base directory if applicable
  #
  # @example
  #   glob_to_directory('path/to/dir/**/*') # => 'path/to/dir'
  # @param glob [String]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#223
  def glob_to_directory(glob); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#115
  def global_config_path; end

  # Modify the included files based on excluded directories and get an
  # array of additional files to exclude.
  #
  # @param globs [Array<String>]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#189
  def process_exclusions(globs); end

  # Get an array of files from the provided globs.
  #
  # @param globs [Array<String>]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#175
  def process_globs(globs); end

  # Read a .solargraph yaml config
  #
  # @param config_path [String]
  # @return [Hash{String => Array, Hash, Integer}, nil]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#143
  def read_config(config_path = T.unsafe(nil)); end

  # @return [String]
  #
  # source://solargraph//lib/solargraph/workspace/config.rb#121
  def workspace_config_path; end
end

# The maximum number of files that can be added to a workspace.
# The workspace's .solargraph.yml can override this value.
#
# source://solargraph//lib/solargraph/workspace/config.rb#12
Solargraph::Workspace::Config::MAX_FILES = T.let(T.unsafe(nil), Integer)

# Manages determining which gemspecs are available in a workspace
#
# source://solargraph//lib/solargraph/workspace/require_paths.rb#12
class Solargraph::Workspace::RequirePaths
  # @param directory [String, nil]
  # @param config [Config, nil]
  # @return [RequirePaths] a new instance of RequirePaths
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#17
  def initialize(directory, config); end

  # Returns the value of attribute config.
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#13
  def config; end

  # Returns the value of attribute directory.
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#13
  def directory; end

  # Generate require paths from gemspecs if they exist or assume the default
  # lib directory.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#26
  def generate; end

  private

  # Get additional require paths defined in the configuration.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#57
  def configured_require_paths; end

  # Get an array of all gemspec files in the workspace.
  #
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#47
  def gemspec_file_paths; end

  # Generate require paths from gemspecs if they exist or assume the default
  # lib directory.
  #
  # @param gemspec_file_path [String]
  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#68
  def require_path_from_gemspec_file(gemspec_file_path); end

  # @return [Array<String>]
  #
  # source://solargraph//lib/solargraph/workspace/require_paths.rb#36
  def require_paths_from_gemspec_files; end
end

# source://solargraph//lib/solargraph.rb#20
class Solargraph::WorkspaceTooLargeError < ::RuntimeError; end

# The YardMap provides access to YARD documentation for the Ruby core, the
# stdlib, and gems.
#
# source://solargraph//lib/solargraph/yard_map.rb#10
class Solargraph::YardMap; end

# source://solargraph//lib/solargraph/yard_map/cache.rb#5
class Solargraph::YardMap::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://solargraph//lib/solargraph/yard_map/cache.rb#6
  def initialize; end

  # @param path [String]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/yard_map/cache.rb#20
  def get_path_pins(path); end

  # @param path [String]
  # @param pins [Array<Solargraph::Pin::Base>]
  # @return [Array<Solargraph::Pin::Base>]
  #
  # source://solargraph//lib/solargraph/yard_map/cache.rb#14
  def set_path_pins(path, pins); end
end

# source://solargraph//lib/solargraph/yard_map/helpers.rb#3
module Solargraph::YardMap::Helpers
  private

  # @param code_object [YARD::CodeObjects::Base]
  # @param spec [Gem::Specification, nil]
  # @return [Solargraph::Pin::Namespace]
  #
  # source://solargraph//lib/solargraph/yard_map/helpers.rb#24
  def create_closure_namespace_for(code_object, spec); end

  # @param code_object [YARD::CodeObjects::Base]
  # @param spec [Gem::Specification, nil]
  # @return [Solargraph::Location, nil]
  #
  # source://solargraph//lib/solargraph/yard_map/helpers.rb#9
  def object_location(code_object, spec); end

  class << self
    # @param code_object [YARD::CodeObjects::Base]
    # @param spec [Gem::Specification, nil]
    # @return [Solargraph::Pin::Namespace]
    #
    # source://solargraph//lib/solargraph/yard_map/helpers.rb#24
    def create_closure_namespace_for(code_object, spec); end

    # @param code_object [YARD::CodeObjects::Base]
    # @param spec [Gem::Specification, nil]
    # @return [Solargraph::Location, nil]
    #
    # source://solargraph//lib/solargraph/yard_map/helpers.rb#9
    def object_location(code_object, spec); end
  end
end

# source://solargraph//lib/solargraph/yard_map/mapper.rb#5
class Solargraph::YardMap::Mapper
  # @param code_objects [Array<YARD::CodeObjects::Base>]
  # @param spec [Gem::Specification, nil]
  # @return [Mapper] a new instance of Mapper
  #
  # source://solargraph//lib/solargraph/yard_map/mapper.rb#12
  def initialize(code_objects, spec = T.unsafe(nil)); end

  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/yard_map/mapper.rb#21
  def map; end

  private

  # @param code_object [YARD::CodeObjects::Base]
  # @return [Array<Pin::Base>]
  #
  # source://solargraph//lib/solargraph/yard_map/mapper.rb#35
  def generate_pins(code_object); end
end

# source://solargraph//lib/solargraph/yard_map/mapper/to_constant.rb#6
module Solargraph::YardMap::Mapper::ToConstant
  extend ::Solargraph::YardMap::Helpers

  class << self
    # @param code_object [YARD::CodeObjects::Base]
    # @param closure [Pin::Closure, nil]
    # @param spec [Gem::Specification, nil]
    # @return [Pin::Constant]
    #
    # source://solargraph//lib/solargraph/yard_map/mapper/to_constant.rb#13
    def make(code_object, closure = T.unsafe(nil), spec = T.unsafe(nil)); end
  end
end

# source://solargraph//lib/solargraph/yard_map/mapper/to_method.rb#6
module Solargraph::YardMap::Mapper::ToMethod
  extend ::Solargraph::YardMap::Helpers
  extend ::Solargraph::Logging

  class << self
    # @param code_object [YARD::CodeObjects::Base]
    # @param name [String, nil]
    # @param scope [Symbol, nil]
    # @param visibility [Symbol, nil]
    # @param closure [Solargraph::Pin::Namespace, nil]
    # @param spec [Gem::Specification, nil]
    # @return [Solargraph::Pin::Method]
    #
    # source://solargraph//lib/solargraph/yard_map/mapper/to_method.rb#21
    def make(code_object, name = T.unsafe(nil), scope = T.unsafe(nil), visibility = T.unsafe(nil), closure = T.unsafe(nil), spec = T.unsafe(nil)); end

    private

    # @param a [Array<String>]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/yard_map/mapper/to_method.rb#104
    def arg_name(a); end

    # @param a [Array]
    # @return [::Symbol]
    #
    # source://solargraph//lib/solargraph/yard_map/mapper/to_method.rb#110
    def arg_type(a); end

    # @param code_object [YARD::CodeObjects::Base]
    # @param location [Location] ,
    # @param comments [String]
    # @param pin [Pin::Base]
    # @return [Array<Solargraph::Pin::Parameter>]
    #
    # source://solargraph//lib/solargraph/yard_map/mapper/to_method.rb#83
    def get_parameters(code_object, location, comments, pin); end
  end
end

# source://solargraph//lib/solargraph/yard_map/mapper/to_method.rb#9
Solargraph::YardMap::Mapper::ToMethod::VISIBILITY_OVERRIDE = T.let(T.unsafe(nil), Hash)

# source://solargraph//lib/solargraph/yard_map/mapper/to_namespace.rb#6
module Solargraph::YardMap::Mapper::ToNamespace
  extend ::Solargraph::YardMap::Helpers

  class << self
    # @param code_object [YARD::CodeObjects::NamespaceObject]
    # @param spec [Gem::Specification, nil]
    # @param closure [Pin::Closure, nil]
    # @return [Pin::Namespace]
    #
    # source://solargraph//lib/solargraph/yard_map/mapper/to_namespace.rb#13
    def make(code_object, spec, closure = T.unsafe(nil)); end
  end
end

# source://solargraph//lib/solargraph/yard_map.rb#11
class Solargraph::YardMap::NoYardocError < ::StandardError; end

# source://solargraph//lib/solargraph/yard_map/to_method.rb#5
class Solargraph::YardMap::ToMethod
  include ::Solargraph::YardMap::Helpers

  # @param code_object [YARD::CodeObjects::Base]
  # @param name [String, nil]
  # @param scope [Symbol, nil]
  # @param visibility [Symbol, nil]
  # @param closure [Solargraph::Pin::Base, nil]
  # @param spec [Solargraph::Pin::Base, nil]
  # @return [Solargraph::Pin::Method]
  #
  # source://solargraph//lib/solargraph/yard_map/to_method.rb#67
  def make(code_object, name = T.unsafe(nil), scope = T.unsafe(nil), visibility = T.unsafe(nil), closure = T.unsafe(nil), spec = T.unsafe(nil)); end
end

# source://solargraph//lib/solargraph/yard_map/to_method.rb#6
module Solargraph::YardMap::ToMethod::InnerMethods
  private

  # @param a [Array<String>]
  # @return [String]
  #
  # source://solargraph//lib/solargraph/yard_map/to_method.rb#34
  def arg_name(a); end

  # @param a [Array]
  # @return [::Symbol]
  #
  # source://solargraph//lib/solargraph/yard_map/to_method.rb#40
  def arg_type(a); end

  # @param code_object [YARD::CodeObjects::Base]
  # @param location [Solargraph::Location]
  # @param comments [String]
  # @return [Array<Solargraph::Pin::Parameter>]
  #
  # source://solargraph//lib/solargraph/yard_map/to_method.rb#13
  def get_parameters(code_object, location, comments); end

  class << self
    # @param a [Array<String>]
    # @return [String]
    #
    # source://solargraph//lib/solargraph/yard_map/to_method.rb#34
    def arg_name(a); end

    # @param a [Array]
    # @return [::Symbol]
    #
    # source://solargraph//lib/solargraph/yard_map/to_method.rb#40
    def arg_type(a); end

    # @param code_object [YARD::CodeObjects::Base]
    # @param location [Solargraph::Location]
    # @param comments [String]
    # @return [Array<Solargraph::Pin::Parameter>]
    #
    # source://solargraph//lib/solargraph/yard_map/to_method.rb#13
    def get_parameters(code_object, location, comments); end
  end
end

# Methods for caching and loading YARD documentation for gems.
#
# source://solargraph//lib/solargraph/yardoc.rb#8
module Solargraph::Yardoc
  private

  # Build and cache a gem's yardoc and return the path. If the cache already
  # exists, do nothing and return the path.
  #
  # @param yard_plugins [Array<String>] The names of YARD plugins to use.
  # @param gemspec [Gem::Specification]
  # @return [String] The path to the cached yardoc.
  #
  # source://solargraph//lib/solargraph/yardoc.rb#17
  def cache(yard_plugins, gemspec); end

  # True if the gem yardoc is cached.
  #
  # @param gemspec [Gem::Specification]
  #
  # source://solargraph//lib/solargraph/yardoc.rb#40
  def cached?(gemspec); end

  # Load a gem's yardoc and return its code objects.
  #
  # @note This method modifies the global YARD registry.
  # @param gemspec [Gem::Specification]
  # @return [Array<YARD::CodeObjects::Base>]
  #
  # source://solargraph//lib/solargraph/yardoc.rb#59
  def load!(gemspec); end

  # True if another process is currently building the yardoc cache.
  #
  # @param gemspec [Gem::Specification]
  #
  # source://solargraph//lib/solargraph/yardoc.rb#48
  def processing?(gemspec); end

  class << self
    # Build and cache a gem's yardoc and return the path. If the cache already
    # exists, do nothing and return the path.
    #
    # @param yard_plugins [Array<String>] The names of YARD plugins to use.
    # @param gemspec [Gem::Specification]
    # @return [String] The path to the cached yardoc.
    #
    # source://solargraph//lib/solargraph/yardoc.rb#17
    def cache(yard_plugins, gemspec); end

    # True if the gem yardoc is cached.
    #
    # @param gemspec [Gem::Specification]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/yardoc.rb#40
    def cached?(gemspec); end

    # Load a gem's yardoc and return its code objects.
    #
    # @note This method modifies the global YARD registry.
    # @param gemspec [Gem::Specification]
    # @return [Array<YARD::CodeObjects::Base>]
    #
    # source://solargraph//lib/solargraph/yardoc.rb#59
    def load!(gemspec); end

    # True if another process is currently building the yardoc cache.
    #
    # @param gemspec [Gem::Specification]
    # @return [Boolean]
    #
    # source://solargraph//lib/solargraph/yardoc.rb#48
    def processing?(gemspec); end
  end
end
